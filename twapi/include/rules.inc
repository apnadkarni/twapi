# Common file defining build rules
# This is split off from common.inc because we want to give the parent
# makefile a chance to define $(OBJS)

all: build distribute

build: $(OBJDIR)\$(MODULE)

# Static library
lib: $(OBJDIR)\$(MODULELIB)

distribution:
        $(COPY) $(OBJDIR)\$(MODULE) "$(PACKAGEDIR)"

$(OBJDIR):
	@if not exist $(OBJDIR)\nul mkdir $(OBJDIR)

# Link the module
$(OBJDIR)\$(MODULE): $(OBJDIR)\$(MODULENAME).res $(OBJS)
        $(LINK) $(LOPT) -out:$@ $(LIBS) $**
!if $(VCVER) > 8
	cd $(OBJDIR) && $(MT) -manifest $(MODULE).manifest -outputresource:$(MODULE);2
!endif

$(OBJS): $(CINCLUDES) makefile

$(OBJDIR)\$(MODULENAME).res: $(OBJDIR) $(RC_FILE_NAME) makefile $(TWAPI_SCRIPT_RESOURCE_PATH)
        rc $(INCFLAGS) $(RCFLAGS) -fo $@ $(RC_FILE_NAME)

makefile: $(SRCROOT)\include\common.inc $(SRCROOT)\include\rules.inc


# Compile a file
.c{$(OBJDIR)}.obj::
       $(CC) $(CFLAGS) -Fo$(OBJDIR)\ $<

!ifdef TWAPI_SCRIPT_RESOURCE
$(TWAPI_SCRIPT_RESOURCE_PATH): "$(OBJDIR)\tcl\$(MODULENAME)_version.tcl" "$(OBJDIR)\tcl\$(MODULENAME)_buildid.tcl" $(TCLFILES)
	@for %f in ($(TCLFILES)) do @xcopy /q /y %f "$(OBJDIR)\tcl"
!if "$(TWAPI_SCRIPT_RESOURCE_TYPE)" == "tclscript"
	cd "$(OBJDIR)\tcl" && $(TCLSH) "$(TOOLDIR)\createtmfile.tcl" -force -outfile "$(TWAPI_SCRIPT_RESOURCE)" -compact $(PACKAGE) $(MODULEVERSION) $**
!else
	cd "$(OBJDIR)\tcl" && $(TCLSH) "$(TOOLDIR)\createtmfile.tcl" -force -outfile "$(TWAPI_SCRIPT_RESOURCE).raw" -compact $(PACKAGE) $(MODULEVERSION) $**
	"$(TOOLDIR)\lzma.exe" e "$(TWAPI_SCRIPT_RESOURCE_PATH).raw" "$(TWAPI_SCRIPT_RESOURCE_PATH)"
!endif
!endif

$(OBJDIR)\$(MODULELIB): $(OBJDIR) $(OBJS) $(TWAPI_SCRIPT_RESOURCE_PATH)
	$(LIBTOOL) /OUT:$@ $(OBJS)

$(OBJDIR)\tcl\$(MODULENAME)_version.tcl : $(SRCROOT)\include\version.inc $(SRCROOT)\include\rules.inc
	-$(MKDIR) "$(OBJDIR)\tcl"
        echo <<$@
# This file is automatically generated and will be overwritten
namespace eval twapi {
    variable $(MODULENAME)_version $(MODULEMAJOR).$(MODULEMINOR)
    variable $(MODULENAME)_patchlevel $(MODULEVERSION)
    variable $(MODULENAME)_package_name $(PACKAGE)
    if {$$::tcl_platform(machine) eq "amd64"} {
        variable dll_base_name $(PACKAGE)64
    } else {
        variable dll_base_name $(PACKAGE)
    }
}
<<KEEP

"$(OBJDIR)\tcl\$(MODULENAME)_buildid.tcl": $(SRCROOT)\include\rules.inc
	-$(MKDIR) "$(OBJDIR)\tcl"
	echo puts "namespace eval twapi {variable $(MODULENAME)_build_id $(BUILDID)}"
	echo puts "namespace eval twapi {variable $(MODULENAME)_build_id $(BUILDID)}" | $(TCLSH) >> $@


clean:
        -$(RMDIR) "$(OBJDIR)"
