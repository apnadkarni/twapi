#
# Copyright (c) 2010, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for commands from the services.tcl

package require tcltest

eval tcltest::configure $argv

# Note npecho loads testutil and twapi
source [file join [file dirname [info script]] npecho.tcl]

namespace eval twapi::pipe::test {
    namespace import ::tcltest::test

    proc start_server {fn script} {
        set fd [tclsh_slave_start]
        tclsh_slave_wait $fd 2000
        # We create a temp file and have the slave tclsh read it.
        # We do NOT write the commands to $fd as then the slave reads
        # from there a line at a time in async mode, causing sequential
        # code to become non-sequential in the presence of vwaits etc.
        puts $fd [list source [tcltest::makeFile $script $fn]]
        flush $fd
        return $fd
    }

   proc stop_server {fd} {
       tclsh_slave_stop $fd
    }

     ################################################################

    test pipe-server-1.0 {
        Test server using blocking I/O
    } -setup {
        if {1} {
            set control_channel [open "| [::tcltest::interpreter] npecho.tcl syncserver \\\\.\\pipe\\twapitest" r+]
            fconfigure $control_channel -blocking 0
        } else {
            set control_channel [start_server test_blocking_server {
                if {[catch {
                    source npecho.tcl
                    puts [np_echo_server_sync {\\.\pipe\twapitest}] }]} {
                    testlog $::errorInfo
                }
            }]
            
        }
        expect $control_channel READY 5000
        
    } -constraints {
        nt
    } -body {
        foreach {msgs total last} [np_echo_client -name {\\.\pipe\twapitest}] break
        foreach {msgs2 total2 last2} [gets_timeout $control_channel 5000] break
        set result ""
        if {$msgs != $msgs2} {
            append result "Mismatch in number of messages: $msgs != $msgs2"
        }
        if {$total != $total2} {
            append result "Mismatch in total chars: $total != $total2"
        }
        if {$last != $last2} {
            append result "Mismatch in total chars: $last != $last2"
        }
        set result
    } -cleanup {
        if {[info exists control_channel]} {
            close $control_channel
            #stop_server $control_channel
        }
    } -result ""


    ###

    test pipe-server-2.0 {
        Test server using non-blocking I/O
    } -setup {
        set control_channel [start_server test_nonblocking_server {
            source npecho.tcl
            puts [np_echo_server_async {\\.\pipe\twapitest}]
        }]

        expect $control_channel READY 5000
    } -constraints {
        nt
    } -body {
        foreach {msgs total last} [np_echo_client -name {\\.\pipe\twapitest}] break
        foreach {msgs2 total2 last2} [gets_timeout $control_channel 5000] break
        set result ""
        if {$msgs != $msgs2} {
            lappend result "Mismatch in number of messages: $msgs != $msgs2"
        }
        if {$total != $total2} {
            lappend result "Mismatch in total chars: $total != $total2"
        }
        if {$last != $last2} {
            lappend result "Mismatch in last message size: $last != $last2"
        }
        join $result \n
    } -cleanup {
        if {[info exists control_channel]} {
            stop_server $control_channel
        }
    } -result ""
    ################################################################


    ::tcltest::cleanupTests
}

namespace delete ::twapi::pipe::test
