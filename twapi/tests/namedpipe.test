#
# Copyright (c) 2010, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for commands from the services.tcl

package require tcltest

eval tcltest::configure $argv

# Note npecho loads testutil and twapi
source [file join [file dirname [info script]] npecho.tcl]

namespace eval twapi::pipe::test {
    namespace import ::tcltest::test

    proc start_npecho_server {name} {
        set control_channel [open "| [list [::tcltest::interpreter] npecho.tcl $name \\\\.\\pipe\\twapitest$name]" r+]
        fconfigure $control_channel -blocking 0
        expect $control_channel READY 5000
        return $control_channel
    }

     ################################################################

    test pipe_server-1.0 {
        Test server using blocking I/O
    } -setup {
        set control_channel [start_npecho_server syncserver]
    } -constraints {
        nt
    } -body {
        foreach {msgs total last} [np_echo_client -name {\\.\pipe\twapitestsyncserver}] break
        foreach {msgs2 total2 last2} [gets_timeout $control_channel 5000] break
        set result ""
        if {$msgs != $msgs2} {
            append result "Mismatch in number of messages: $msgs != $msgs2"
        }
        if {$total != $total2} {
            append result "Mismatch in total chars: $total != $total2"
        }
        if {$last != $last2} {
            append result "Mismatch in total chars: $last != $last2"
        }
        set result
    } -cleanup {
        if {[info exists control_channel]} {
            close $control_channel
            unset control_channel
        }
    } -result ""


    ###

    test pipe_server-2.0 {
        Test server using non-blocking I/O
    } -setup {
        set control_channel [start_npecho_server asyncserver]
    } -constraints {
        nt
    } -body {
        foreach {msgs total last} [np_echo_client -name {\\.\pipe\twapitestasyncserver}] break
        foreach {msgs2 total2 last2} [gets_timeout $control_channel 5000] break
        set result ""
        if {$msgs != $msgs2} {
            lappend result "Mismatch in number of messages: $msgs != $msgs2"
        }
        if {$total != $total2} {
            lappend result "Mismatch in total chars: $total != $total2"
        }
        if {$last != $last2} {
            lappend result "Mismatch in last message size: $last != $last2"
        }
        join $result \n
    } -cleanup {
        if {[info exists control_channel]} {
            close $control_channel
            unset control_channel
        }
    } -result ""

    ###

    test pipe_nonblocking-1.0 {
        Test non-blocking server utilization (Bug 3245925) - puts does not cause cpu loop on non-blocking pipe without file event handler
    } -setup {
        # Prime PDH
        twapi::get_process_info [pid] -processorutilization -interval 100

        # Set up client and server
        set pipes {server client} 
        set pipename "\\\\.\\pipe\\twapitest[pid]"
        foreach pipe $pipes { 
            set $pipe [ ::twapi::namedpipe_$pipe $pipename]
            chan configure [ set $pipe ] -blocking no -buffering line 
        } 
        # Wait for pipe to be connected with event loop running
        after 100 set ::pipewait 1
        vwait ::pipewait
    } -body {
        puts $server testmessage
        if {[chan gets $client] ne "testmessage"} {
            error "Message echo failed"
        }
        set usertime1 [lindex [twapi::get_process_info [pid] -usertime] 1]
        after 1000 set ::wait_over 1
        vwait ::wait_over
        set usertime2 [lindex [twapi::get_process_info [pid] -usertime] 1]
        expr {$usertime2 - $usertime1}
    } -cleanup {
        close $server
        close $client
    } -result {0 10000} -match inrange


    test pipe_nonblocking-1.1 {
        Test non-blocking server utilization (Bug 3245925) - gets on eof does not cause cpu loop
    } -setup {
        # Prime PDH
        twapi::get_process_info [pid] -processorutilization -interval 100

        # Set up client and server
        set pipes {server client} 
        set pipename "\\\\.\\pipe\\twapitest[pid]"
        foreach pipe $pipes { 
            set $pipe [ ::twapi::namedpipe_$pipe $pipename]
            chan configure [ set $pipe ] -blocking no -buffering line 
        } 
        # Wait for pipe to be connected with event loop running
        after 100 set ::pipewait 1
        vwait ::pipewait
    } -body {
        puts $server testmessage
        if {[chan gets $client] ne "testmessage"} {
            error "Message echo failed"
        }
        close $server
        if {[chan gets $client] ne "" || ![chan eof $client]} {
            error "Did not get expected EOF on client."
        }
        chan gets $client

        set usertime1 [lindex [twapi::get_process_info [pid] -usertime] 1]
        after 1000 set ::wait_over 1
        vwait ::wait_over
        set usertime2 [lindex [twapi::get_process_info [pid] -usertime] 1]
        expr {$usertime2 - $usertime1}
    } -cleanup {
        close $client
    } -result {0 10000} -match inrange


    ################################################################


    ::tcltest::cleanupTests
}

namespace delete ::twapi::pipe::test
