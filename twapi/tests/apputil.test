#
# Copyright (c) 2012, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for commands from the apputil.tcl

package require tcltest
eval tcltest::configure $argv

source [file join [file dirname [info script]] testutil.tcl]
load_twapi_package twapi_apputil
load_twapi_package twapi_security ;# TBD - for open_process_token

#
# Set up system-specific constants that are used to match test results
namespace eval twapi::apputil::test {
    namespace import ::tcltest::test

    test read_inifile_section-1.0 {
        Read an entire inifile section
    } -setup {
        catch {unset arr}
    } -body {
        array set arr [twapi::read_inifile_section Mail]
	expr {
	      [info exists arr(Mapi)] ||
	      [info exists arr(MAPI)] ||
	      [info exists arr(mapi)]
	  }
    } -result 1

    test read_inifile_section-2.0 {
        Read an entire inifile section from a non-default ini file
    } -setup {
        catch {unset arr}
    } -body {
        array set arr [twapi::read_inifile_section drivers -inifile system.ini]
	expr {
	      [info exists arr(timer)] ||
	      [info exists arr(Timer)] ||
	      [info exists arr(TIMER)]
	  }
    } -result 1



    ################################################################

    test read_inifile_section_names-1.0 {
        Read names of an inifile section
    } -body {
        set names [twapi::read_inifile_section_names]
        expr {[lsearch $names Windows] >= 0}
    } -result 1

    test read_inifile_section_names-2.0 {
        Read names of an inifile section from a non-default ini file
    } -body {
        set names [twapi::read_inifile_section_names -inifile control.ini ]
        expr {[lsearch $names "Color Schemes"] >= 0}
    } -result 1

    ################################################################

    test read_inifile_key-1.0 {
        Read an inifile entry
    } -body {
        string is boolean [twapi::read_inifile_key Windows Beep]
    } -result 1

    test read_inifile_key-1.1 {
        Verify inifile lookups are case-insensitive
    } -body {
        string is boolean [twapi::read_inifile_key wInDowS bEEp]
    } -result 1

    test read_inifile_key-2.0 {
        Read an inifile entry from a non-default ini file
    } -body {
        llength [twapi::read_inifile_key drivers timer -inifile system.ini]
    } -result 1

    test read_inifile_key-2.1 {
        Verify non-default inifile lookups are case-insensitive
    } -body {
        llength [twapi::read_inifile_key dRiVeRs tIMeR -inifile system.ini]
    } -result 1

    ################################################################

    test write_inifile_key-1.0 {
        Write an inifile key
    } -constraints {
        nt systemmodificationok
    } -body {
        twapi::write_inifile_key TwapiTestSection TwapiTestKey 12345
        twapi::read_inifile_key TwapiTestSection TwapiTestKey
    } -cleanup {
        twapi::delete_inifile_key TwapiTestSection TwapiTestKey
    } -result 12345

    test write_inifile_key-2.0 {
        Write an inifile key to a non-default file
    } -constraints {
        nt systemmodificationok
    } -body {
        twapi::write_inifile_key TwapiTestSection TwapiTestKey 98765 -inifile control.ini
        twapi::read_inifile_key TwapiTestSection TwapiTestKey -inifile control.ini
    } -cleanup {
        twapi::delete_inifile_key TwapiTestSection TwapiTestKey -inifile control.ini
    } -result 98765

    ################################################################

    test get_command_line-1.0 {
        Get the command line of the current process
    } -body {
        # trim is needed because extra batch file % params result
        # in extra blanks in teh command line
        set line [string trim [twapi::get_command_line]]
        regsub {\s+} $line { } line
        # Don't try to match more than first couple of args. QUoting etc.
        # makes it difficult
        lrange [split $line] 1 2
    } -result [list $argv0 [lindex $argv 0]] -match list

    ################################################################

    test get_command_line_args-1.0 {
        Get the command line of the current process
    } -body {
        lrange [twapi::get_command_line_args [string trim [twapi::get_command_line]]] 1 end
    } -result [linsert $argv 0 $argv0] -match list


    ################################################################

    test get_system_environment_vars-1.0 {
        Get system environment variables
    } -body {
        unset -nocomplain vars
        set vars [twapi::get_system_environment_vars]
        list [dict get $vars COMPUTERNAME] [llength [dict keys $vars HOME*]]
    } -result [list $::env(COMPUTERNAME) 0]

    test get_system_environment_vars-2.0 {
        Get system environment variables -normalize 0
    } -body {
        unset -nocomplain vars
        set vars [twapi::get_system_environment_vars -normalize 0]
        list [dict exists $vars SYSTEMROOT] [dict exists $vars SystemRoot] [llength [dict keys $vars HOME*]]
    } -result [list 0 1 0]

    test get_system_environment_vars-2.1 {
        Get system environment variables -normalize 1
    } -body {
        unset -nocomplain vars
        set vars [twapi::get_system_environment_vars -normalize 1]
        list [dict get $vars SYSTEMROOT] [llength [dict keys $vars HOME*]]
    } -result [list $::env(systemroot) 0]

    ################################################################

    test get_user_environment_vars-1.0 {
        Get user environment variables
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
    } -body { 
        unset -nocomplain vars
        set vars [twapi::get_user_environment_vars $tok]
        dict get $vars HOMEDRIVE
    } -cleanup {
        twapi::close_token $tok
    } -result $::env(HOMEDRIVE)

    test get_user_environment_vars-2.0 {
        Get user environment variables -normalize 0
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
    } -body {
        unset -nocomplain vars
        set vars [twapi::get_user_environment_vars $tok -normalize 0]
        list [dict exists $vars SYSTEMROOT] [dict exists $vars SystemRoot] [dict exists $vars HOMEDRIVE]
    } -cleanup {
        twapi::close_token $tok
    } -result [list 0 1 1]

    test get_user_environment_vars-2.1 {
        Get user environment variables -normalize 1
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
    } -body {
        unset -nocomplain vars
        set vars [twapi::get_user_environment_vars $tok -normalize 1]
        list [dict get $vars SYSTEMROOT] [dict get $vars HOMEDRIVE]
    } -cleanup {
        twapi::close_token $tok
    } -result [list $::env(systemroot) $::env(homedrive)]

    test get_user_environment_vars-3.0 {
        Get user environment variables -inherit
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
    } -body {
        unset -nocomplain vars
        unset -nocomplain vars2
        set ::env(TWAPIENVTEST) "XXX"
        set vars [twapi::get_user_environment_vars $tok -inherit 0]
        set vars2 [twapi::get_user_environment_vars $tok -inherit 1]
        list [dict exists $vars TWAPIENVTEST] [dict get $vars2 TWAPIENVTEST]
    } -cleanup {
        unset ::env(TWAPIENVTEST)
        twapi::close_token $tok
    } -result [list 0 XXX]

    ################################################################

    test expand_environment_vars-1.0 {
        Expand a single environment string
    } -body {
        twapi::expand_environment_vars "%USERNAME%"
    } -result $::env(USERNAME)

    test expand_environment_vars-1.1 {
        Expand a single embedded environment string
    } -body {
        twapi::expand_environment_vars "x%USERNAME%y"
    } -result x$::env(USERNAME)y

    test expand_environment_vars-1.2 {
        Expand multiple embedded environment strings
    } -body {
        twapi::expand_environment_vars "x%USERNAME%y%computername%"
    } -result x$::env(USERNAME)y$::env(COMPUTERNAME)

    test expand_environment_vars-1.3 {
        Expand long embedded environment strings
    } -body {
        twapi::expand_environment_vars [string repeat %PATH% 10]
    } -result [string repeat $env(PATH) 10]

    test expand_environment_vars-2.0 {
        Verify environment variables that are not defined are not modified
    } -body {
        twapi::expand_environment_vars "x%USERNAME%y%XXX%z"
    } -result x$::env(USERNAME)y%XXX%z

    test expand_environment_vars-2.1 {
        Expand empty string
    } -body {
        twapi::expand_environment_vars ""
    } -result ""

    test expand_environment_vars-2.2 {
        Expand a string matching env name but without %
    } -body {
        twapi::expand_environment_vars "USERNAME"
    } -result "USERNAME"

    ################################################################

    test expand_system_environment_vars-1.0 {
        Expand a single environment string
    } -body {
        twapi::expand_system_environment_vars "%USERNAME%"
    } -result SYSTEM

    test expand_system_environment_vars-1.1 {
        Expand a single embedded environment string
    } -body {
        twapi::expand_system_environment_vars "x%USERNAME%y"
    } -result xSYSTEMy

    test expand_system_environment_vars-1.2 {
        Expand multiple embedded environment strings
    } -body {
        twapi::expand_system_environment_vars "x%USERNAME%y%computername%"
    } -result xSYSTEMy$::env(COMPUTERNAME)

    test expand_system_environment_vars-1.3 {
        Expand long embedded environment strings
    } -body {
        set val [dict get [twapi::get_system_environment_vars -normalize 1] PATH]
        string equal [twapi::expand_system_environment_vars [string repeat %PATH% 50]] [string repeat $val 50]
    } -result 1

    test expand_system_environment_vars-2.0 {
        Verify environment variables that are not defined are not modified
    } -body {
        twapi::expand_system_environment_vars "x%USERNAME%y%XXX%z"
    } -result xSYSTEMy%XXX%z

    test expand_system_environment_vars-2.1 {
        Expand empty string
    } -body {
        twapi::expand_system_environment_vars ""
    } -result ""

    test expand_system_environment_vars-2.2 {
        Expand a string matching env name but without %
    } -body {
        twapi::expand_system_environment_vars "USERNAME"
    } -result "USERNAME"

    ################################################################

    test expand_user_environment_vars-1.0 {
        Expand a single environment string
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
    } -body {
        twapi::expand_user_environment_vars $tok "%USERNAME%"
    } -cleanup {
        twapi::close_token $tok
    } -result $::env(USERNAME)

    test expand_user_environment_vars-1.1 {
        Expand a single embedded environment string
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
    } -body {
        twapi::expand_user_environment_vars $tok "x%TEMP%y"
    } -cleanup {
        twapi::close_token $tok
    } -result x$::env(TEMP)y

    test expand_user_environment_vars-1.2 {
        Expand multiple embedded environment strings
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
    } -cleanup {
        twapi::close_token $tok
    } -body {
        twapi::expand_user_environment_vars $tok "x%username%y%computername%"
    } -result x$::env(USERNAME)y$::env(COMPUTERNAME)

    test expand_user_environment_vars-1.3 {
        Expand long embedded environment strings
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
    } -cleanup {
        twapi::close_token $tok
    } -body {
        set val [dict get [twapi::get_user_environment_vars $tok -normalize 1] PATH]
        string equal [twapi::expand_user_environment_vars $tok [string repeat %PATH% 50]] [string repeat $val 50]
    } -result 1

    test expand_user_environment_vars-1.4 {
        Verify current process environment not used
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
        set saved_temp $::env(TEMP)
        set ::env(TEMP) c:\\nosuchtemp
    } -cleanup {
        set ::env(TEMP) $saved_temp
        twapi::close_token $tok
    } -body {
        string equal [twapi::expand_user_environment_vars $tok "%TEMP%"] $saved_temp
    } -result 1

    test expand_user_environment_vars-2.0 {
        Verify environment variables that are not defined are not modified
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
    } -cleanup {
        twapi::close_token $tok
    } -body {
        twapi::expand_user_environment_vars $tok "x%USERNAME%y%XXX%z"
    } -result x$::env(USERNAME)y%XXX%z

    test expand_user_environment_vars-2.0 {
        Expand empty string
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
    } -cleanup {
        twapi::close_token $tok
    } -body {
        twapi::expand_user_environment_vars $tok ""
    } -result ""

    test expand_user_environment_vars-2.1 {
        Expand a string matching env name but without %
    } -setup {
        set tok [twapi::open_process_token -access {token_query token_duplicate token_impersonate}]
    } -cleanup {
        twapi::close_token $tok
    } -body {
        twapi::expand_user_environment_vars $tok "USERNAME"
    } -result "USERNAME"


    ################################################################

    ::tcltest::cleanupTests
}

namespace delete ::twapi::apputil::test
