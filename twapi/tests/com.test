#
# Copyright (c) 2006-2014, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for commands from the com.tcl

# TBD - test property and method calls with wrong number of parameters

package require tcltest
eval tcltest::configure $argv

source [file join [file dirname [info script]] testutil.tcl]
load_twapi_package twapi_com

namespace eval twapi::com::test {
    namespace import ::tcltest::test
    ::tcltest::testConstraint win2k [twapi::min_os_version 5]

    variable shell_clsid {{13709620-C279-11CE-A49E-444553540000}}
    variable shell_progid Shell.Application
    variable ie_clsid {{0002DF01-0000-0000-C000-000000000046}}
    variable ie_quit_delay 100;   # Ms Delay before calling IE Quit to avoid hang

    proc testobj {} {
        variable testobj
        if {![info exists testobj]} {
            if {[catch {
                if {$::tcl_platform(pointerSize) == 4} {
                    set testobj [twapi::comobj Twapi.Test -model inprocserver]
                } else {
                    set testobj [twapi::comobj Twapi.Test -model localserver]
                }
            }]} {
                error "Could create Twapi.Test object. See README in comtest directory about registering the object."
            }
        }
        return $testobj
    }

    ################################################################

    test clsid_to_progid-1.0 {
        Get the ProgId for a CLSID
    } -body {
        twapi::clsid_to_progid $shell_clsid
    } -result {^Shell\.Application\.\d*$} -match regexp

    ################################################################

    test progid_to_clsid-1.0 {
        Get the CLSID for a ProgId
    } -body {
        twapi::progid_to_clsid Shell.Application
    } -result $shell_clsid

    ################################################################

    test name_to_iid-1.0 {
        Get IID for a predefined interface
    } -body {
        twapi::name_to_iid IDispatch
    } -result {{00020400-0000-0000-C000-000000000046}}

    test name_to_iid-1.1 {
        Get IID for a interface
    } -body {
        if {[info exists twapi::_name_to_iid_cache(ishelldispatch4)]} {
            error "Badly defined test - ishelldispatch4 is a predefined interface"
        }
        twapi::name_to_iid IShellDispatch4
    } -result {{EFD84B2D-4BCF-4298-BE25-EB542A59FBDA}}

    ################################################################

    test iid_to_name-1.0 {
        Convert dispatch guid to name
    } -body {
        twapi::iid_to_name {{00020400-0000-0000-C000-000000000046}}
    } -result IDispatch

    test iid_to_name-1.1 {
        Convert dispatch guid to name
    } -body {
        twapi::iid_to_name {{EFD84B2D-4BCF-4298-BE25-EB542A59FBDA}}
    } -result IShellDispatch4


    ################################################################

    test comobj-1.0 {
        Create COM object using progid
    } -constraints {
        nt
    } -body {
        [twapi::comobj $shell_progid] -destroy
    } -result ""

    ###

    test comobj-1.1 {
        Create COM object using clsid
    } -constraints {
        nt
    } -body {
        [twapi::comobj $shell_clsid] -destroy
    } -result ""

    ###

    test comobj-2.0 {
        Create COM object with -disablelog true
    } -constraints {
        nt
    } -body {
        [twapi::comobj $shell_clsid -disablelog true] -destroy
    } -result ""

    ###

    test comobj-2.1 {
        Create COM object with -disablelog false
    } -constraints {
        nt
    } -body {
        [twapi::comobj $shell_clsid -disablelog false] -destroy
    } -result ""

    ###

    test comobj-3.0 {
        Create COM object with -download true
    } -constraints {
        nt
    } -body {
        [twapi::comobj $shell_clsid -download true] -destroy
    } -result ""

    ###

    test comobj-3.1 {
        Create COM object with -download false
    } -constraints {
        nt
    } -body {
        [twapi::comobj $shell_clsid -download false] -destroy
    } -result ""

    ###

    test comobj-4.0 {
        Create COM object with -enableaaa true
    } -constraints {
        nt
    } -body {
        [twapi::comobj $shell_clsid -enableaaa true] -destroy
    } -result ""

    ###

    test comobj-4.1 {
        Create COM object with -enableaaa false
    } -constraints {
        nt
    } -body {
        [twapi::comobj $shell_clsid -enableaaa false] -destroy
    } -result ""

    ###

    test comobj-5.0 {
        Create COM object with -model any
    } -constraints {
        nt
    } -body {
        [twapi::comobj $shell_clsid -model any] -destroy
    } -result ""

    ###

    test comobj-5.1 {
        Create COM object with -model inprocserver
    } -body {
        [twapi::comobj $shell_clsid -model inprocserver] -destroy
    } -result ""

    ###

    test comobj-5.2 {
        Create COM object with -model localserver
    } -body {
        set ie [twapi::comobj $ie_clsid -model localserver]
        after $ie_quit_delay;        # Delay before quitting else IE 8 hangs
        $ie Quit
        $ie -destroy
    } -result ""

    ###

    test comobj-5.3 {
        Create COM object with -model remoteserver
    } -constraints {
        nt TBD
    } -body {
    } -result ""

    ###

    test comobj-5.4 {
        Create COM object with -model inprochandler
    } -constraints {
        nt TBD
    } -body {
    } -result ""

    ###

    test comobj-6.0 {
        Create COM object with -nocustommarshal true
    } -constraints {
        TBD nt
    } -body {
        need to find a COM object that supports this
        [twapi::comobj PROGID -nocustommarshal true] -destroy
    } -result ""

    ###

    test comobj-6.1 {
        Create COM object with -nocustommarshal false
    } -constraints {
        nt
    } -body {
        [twapi::comobj $shell_clsid -nocustommarshal false] -destroy
    } -result ""


    test comobj-7.0 {
        Get default property value of a COM object
    } -constraints {
        nt
    } -setup {
        set ie [twapi::comobj InternetExplorer.Application]
    } -cleanup {
        after $ie_quit_delay;        # Delay before quitting else IE 8 hangs
        $ie Quit
        $ie -destroy
    } -body {
        $ie -default
    } -result "*Internet Explorer" -match glob 

    ###

    test comobj-8.0 {
        Get comobj implicit property
    } -constraints {
        nt
    } -setup {
        set wscript [twapi::comobj wscript.shell]
    } -cleanup {
        $wscript -destroy
    } -body {
        file normalize [$wscript CurrentDirectory]
    } -result [pwd]

    ###

    test comobj-8.1 {
        Put comobj implicit property
    } -constraints {
        nt
    } -setup {
        set prevdir [pwd]
        set wscript [twapi::comobj wscript.shell]
    } -cleanup {
        $wscript -destroy
        cd $prevdir
    } -body {
        $wscript CurrentDirectory c:/
        string tolower [pwd]
    } -result c:/

    ###

    test comobj-8.2 {
        Invoke comobj implicit method
    } -constraints {
        nt
    } -setup {
        set wscript [twapi::comobj wscript.shell]
    } -cleanup {
        $wscript -destroy
    } -body {
        $wscript ExpandEnvironmentStrings %username%
    } -result $::env(username)

    ###

    # Handler invoked when a process is started.
    proc process_start_handler {wmi_event args} {
        if {$wmi_event eq "OnObjectReady"} {
            # First arg is a IDispatch interface of the event object
            # Create a TWAPI COM object out of it
            set ifc [lindex $args 0]
            ::twapi::IUnknown_AddRef $ifc;   # Must hold ref before creating comobj
            set event_obj [::twapi::comobj_idispatch $ifc]

            set name [$event_obj ProcessName]
            if {[string equal -nocase $name notepad.exe]} {
                set ::comobj_process_starts_test \
                    [list [$event_obj ProcessID] $name]
            }

            # Get rid of the event object
            $event_obj -destroy

        }
    }

    test comobj-9.0 {
        Bind scripts to comobj events using -bind using raw interfaces
    } -setup {
        package require twapi_wmi
        set wmi [twapi::wmi_root]
    } -cleanup {
        $wmi -destroy
    } -body {
        # Create an WMI event sink
        set process_event_sink [twapi::comobj wbemscripting.swbemsink]

        # Attach our handler to it
        set process_event_sink_id [$process_event_sink -bind [namespace current]::process_start_handler]

        # Associate the sink with a query that polls every 1 sec for process
        # starts.
        set sink_ifc [$process_event_sink -interface]; # Does AddRef
        twapi::trap {
            $wmi ExecNotificationQueryAsync $sink_ifc "select * from Win32_ProcessStartTrace"
        } finally {
            # WMI will internally do a AddRef, so we can release our AddRef on sink_ifc
            twapi::IUnknown_Release $sink_ifc
        }

        # Wait for wmi
        after 1000
        set np_pid [notepad_exec]
        set after_id [after 5000 {set ::comobj_process_starts_test {}}]
        vwait ::comobj_process_starts_test
        after cancel $after_id
        
        # Cancel event notifications
        $process_event_sink Cancel

        # Unbind our callback
        $process_event_sink -unbind $process_event_sink_id

        # Get rid of all objects
        $process_event_sink -destroy

        kill $np_pid -force
        expr {
              [lindex $::comobj_process_starts_test 0] == $np_pid &&
              [string equal -nocase [lindex $::comobj_process_starts_test 1] notepad.exe]
          }
    } -result 1


    # Handler invoked when a process is started. Difference from process_start_handler
    # is that this does not do AddRef itself
    proc process_start_handler_2 {wmi_event args} {
        if {$wmi_event eq "OnObjectReady"} {
            # First arg is a IDispatch interface of the event object
            # Create a TWAPI COM object out of it
            set ifc [lindex $args 0]
            set event_obj [::twapi::comobj_idispatch $ifc true]
            set name [$event_obj ProcessName]
            if {[string equal -nocase $name notepad.exe]} {
                set ::comobj_process_starts_test \
                    [list [$event_obj ProcessID] $name]
            }

            # Get rid of the event object
            $event_obj -destroy
        }
    }

    test comobj-9.1 {
        Bind scripts to comobj events using -bind using comobj
    } -setup {
        package require twapi_wmi
        set wmi [twapi::wmi_root]
    } -cleanup {
        $wmi -destroy
    } -body {
        # Create an WMI event sink
        set process_event_sink [twapi::comobj wbemscripting.swbemsink]

        # Attach our handler to it
        set process_event_sink_id [$process_event_sink -bind [namespace current]::process_start_handler_2]
        $wmi ExecNotificationQueryAsync $process_event_sink "select * from Win32_ProcessStartTrace"

        # Wait for wmi
        after 1000
        set np_pid [notepad_exec]
        set after_id [after 5000 {set ::comobj_process_starts_test {}}]
        vwait ::comobj_process_starts_test
        after cancel $after_id
        
        # Cancel event notifications
        $process_event_sink Cancel

        # Unbind our callback
        $process_event_sink -unbind $process_event_sink_id

        # Get rid of all objects
        $process_event_sink -destroy

        kill $np_pid -force
        expr {
              [lindex $::comobj_process_starts_test 0] == $np_pid &&
              [string equal -nocase [lindex $::comobj_process_starts_test 1] notepad.exe]
          }
    } -result 1

    ###

    test comobj-10.0 {
        Invoke comobj method using -call
    } -constraints {
        nt
    } -setup {
        set wscript [twapi::comobj wscript.shell]
    } -cleanup {
        $wscript -destroy
    } -body {
        $wscript -call ExpandEnvironmentStrings %username%
    } -result $::env(username)

    
    test comobj-10.1 {
        Invoke comobj method using -call when no type information is available
    } -constraints {
        nt systemmodificationok TBD
    } -setup {
        # ADSI does not support ITypeInfo so use it for the test
        set adsi_user [twapi::comobj_object "WinNT://./$::env(USERNAME),user"]
        What method can we call?
    } -cleanup {
        $adsi_user -destroy
    } -body {
        $wscript -call ExpandEnvironmentStrings %username%
    } -result $::env(username)


    ###

    test comobj-11.0 {
        Destroy comobj
    } -body {
        set wscript [twapi::comobj wscript.shell]
        $wscript -destroy
        llength [info commands $wscript]
    } -result 0

    ###

    test comobj-12.0 {
        Get comobj property using -get
    } -constraints {
        nt
    } -setup {
        set wscript [twapi::comobj wscript.shell]
    } -cleanup {
        $wscript -destroy
    } -body {
        file normalize [$wscript -get CurrentDirectory]
    } -result [pwd]


    test comobj-12.1 {
        Get comobj property using explicit -get when no TypeInfo is available
    } -constraints {
        nt
    } -setup {
        # ADSI does not support ITypeInfo so use it for the test
        set adsi_user [twapi::comobj_object "WinNT://./Administrator,user"]
    } -cleanup {
        $adsi_user -destroy
    } -body {
        $adsi_user -get name
    } -result Administrator

    ###

    test comobj-13.0 {
        Get comobj interface using -proxy
    } -constraints {
        nt
    } -setup {
        set wscript [twapi::comobj wscript.shell]
    } -cleanup {
        $wscript -destroy
    } -body {
        # Interface should be an IDispatch so try calling one of its methods
        [$wscript -proxy] GetTypeInfoCount
    } -result 1

    ###

    test comobj-14.0 {
        Iterate over a comobj collection using -iterate
    } -setup {
        set nobjs [llength [twapi::comobj_instances]]
        set fso [twapi::comobj Scripting.FileSystemObject]
        set drive_coll [$fso Drives]
    } -body {
        set drives [list ]
        set result [$drive_coll -iterate drive_obj {
            lappend drives [$drive_obj DriveLetter]
            $drive_obj -destroy
        }]
        $drive_coll -destroy
        $fso -destroy
        puts after:[twapi::comobj_instances]
        # $result should be empty as -iterate returns ""
        # No objects should be left over
        list $result [llength $drives] [expr {[llength [twapi::comobj_instances]] == $nobjs}]
    } -result [list "" [llength [file volumes]] 1] -match list

    test comobj-14.1 {
        Iterate over a comobj collection using -iterate - Bug 3185933
    } -setup {
        set oCat  [::twapi::comobj ComAdmin.COMAdminCatalog]
        set oApps [$oCat GetCollection Applications]
        $oApps Populate
    } -cleanup {
        $oCat -destroy
        $oApps -destroy
    } -body {
        set names {}
        $oApps -iterate oApp {
            lappend names [$oApp Name]
            $oApp -destroy
        }
        expr {[lsearch -exact $names "COM+ Utilities"] >= 0}
    } -result 1

    test comobj-14.2.0 {
        Iterate over a comobj collection using -iterate -cleanup
    } -setup {
        set nobjs [llength [twapi::comobj_instances]]
        set fso [twapi::comobj Scripting.FileSystemObject]
        set drive_coll [$fso Drives]
    } -body {
        set drives [list ]
        set result [$drive_coll -iterate -cleanup drive_obj {
            lappend drives [$drive_obj DriveLetter]
        }]
        $drive_coll -destroy
        $fso -destroy
        # $result should be empty as -iterate returns ""
        # No objects should be left over
        list $result [llength $drives] [expr {[llength [twapi::comobj_instances]] == $nobjs}]
    } -result [list "" [llength [file volumes]] 1] -match list

    test comobj-14.2.1 {
        Ensure iteration object destroyed on a continue
    } -setup {
        set nobjs [llength [twapi::comobj_instances]]
        set fso [twapi::comobj Scripting.FileSystemObject]
        set drive_coll [$fso Drives]
    } -body {
        set result [$drive_coll -iterate -cleanup drive_obj {
            continue
        }]
        $drive_coll -destroy
        $fso -destroy
        # $result should be empty as -iterate returns ""
        # No objects should be left over
        list $result [expr {[llength [twapi::comobj_instances]] == $nobjs}]
    } -result [list "" 1] -match list

    test comobj-14.2.2 {
        Ensure iteration object destroyed on a break
    } -setup {
        set nobjs [llength [twapi::comobj_instances]]
        set fso [twapi::comobj Scripting.FileSystemObject]
        set drive_coll [$fso Drives]
    } -body {
        set drives {}
        set result [$drive_coll -iterate -cleanup drive_obj {
            lappend drives [$drive_obj DriveLetter]
            break
        }]
        $drive_coll -destroy
        $fso -destroy
        # $result should be empty as -iterate returns ""
        # No objects should be left over
        list $result [llength $drives] [expr {[llength [twapi::comobj_instances]] == $nobjs}]
    } -result [list "" 1 1] -match list
    ###

    test comobj-15.0 {
        Get a interface from a comobj using -interface
    } -constraints {
        nt
    } -setup {
        set wscript [twapi::comobj wscript.shell]
    } -cleanup {
        $wscript -destroy
    } -body {
        twapi::IUnknown_Release [$wscript -interface]
        # There is one ref left from the wscript.shell object itself
    } -result 1

    ###

    test comobj-16.0 {
        Put comobj property using -put
    } -setup {
        set prevdir [pwd]
        set wscript [twapi::comobj wscript.shell]
    } -cleanup {
        $wscript -destroy
        cd $prevdir
    } -body {
        $wscript -set CurrentDirectory c:/
        string tolower [pwd]
    } -result c:/

    test comobj-16.1 {
        Put comobj property using -put when no type information is available
    } -constraints {
        systemmodificationok TBD
    } -setup {
        # ADSI does not support ITypeInfo so use it for the test
        set adsi_user [twapi::comobj_object "WinNT://./$::env(USERNAME),user"]
    } -cleanup {
        $adsi_user -destroy
    } -body {
        What property can we set ?
    } -result $::env(username)


    ###

    test comobj-17.0 {
        Unbind from comobj events using -unbind
    } -setup {
        set wmi [twapi::_wmi]
        # Create an WMI event sink
        set process_event_sink [twapi::comobj wbemscripting.swbemsink]

        # Attach our handler to it
        set process_event_sink_id [$process_event_sink -bind [namespace current]::process_start_handler]

        # Associate the sink with a query that polls every 1 sec for process
        # starts.
        set sink_ifc [$process_event_sink -interface]; # Does AddRef
        twapi::trap {
            $wmi -call ExecNotificationQueryAsync $sink_ifc "select * from Win32_ProcessStartTrace"
        } finally {
            # WMI will internally do a AddRef, so we can release our AddRef on sink_ifc
            twapi::IUnknown_Release $sink_ifc
        }

        # Wait for wmi
        after 1000
        set np_pid [notepad_exec]
        set after_id [after 5000 {set ::comobj_process_starts_test {}}]
        vwait ::comobj_process_starts_test
        after cancel $after_id
        
        kill $np_pid -force

        if { [lindex $::comobj_process_starts_test 0] != $np_pid ||
             [string compare -nocase [lindex $::comobj_process_starts_test 1] notepad.exe] } {
            error "Could not set up bind for testing -unbind."
        }
    } -body {
        
        # Cancel event notifications
        $process_event_sink Cancel

        # Unbind our callback
        $process_event_sink -unbind $process_event_sink_id

        # Should no longer receive events
        set np_pid [notepad_exec]
        set after_id [after 5000 {set ::comobj_process_starts_test timeout}]
        vwait ::comobj_process_starts_test
        after cancel $after_id
        
        kill $np_pid -force

        set ::comobj_process_starts_test
    } -cleanup {

        # Get rid of all objects
        $process_event_sink -destroy

        $wmi -destroy
    } -result timeout

    ###

    test comobj-18.0 {
        Navigate comobj hierarchy using -with
    } -setup {
        set sh [twapi::comobj Shell.Application]
    } -cleanup {
        $sh -destroy
    } -body {
        $sh -with {
            {NameSpace 36}
            {ParseName system32}
        } Path
    } -result [file join $::env(WINDIR) system32] -match path

    ###

    test comobj-19.0 {
        Check is comobj is null
    } -body {
        set sh [twapi::comobj $shell_clsid]
        $sh -isnull
    } -cleanup {
        $sh -destroy
    } -result 0 -match boolean


    ###

    test comobj-20.0 {
        comobj -active
    } -constraints {
        TBD
    } -body {
        TBD - what can we use running object table ?
    } -result TBD

    ###

    test comobj-21.0 {
        comobj -callnamedargs
    } -constraints {
        TBD
    } -body {
        TBD - comobj -callnamedargs
    } -result TBD

    ###

    test comobj-21.0 {
        comobj -call with optional arguments
    } -constraints {
        TBD
    } -body {
        TBD - comobj methods with optional arguments
    } -result TBD


    ###

    test comobj-22.0 {
        comobj -securityblanket
    } -constraints {
        TBD
    } -body {
        TBD - comobj -securityblanket
    } -result TBD

    test comobj-23.0 {
        comobj -lcid
    } -constraints {
        TBD
    } -body {
        TBD - comobj -lcid
    } -result TBD

    ################################################################
    
    test comobj_idispatch-1.0 {
        Create a COM object from its interface
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    ################################################################

    test comobj_object-1.0 {
        Create a COM object based on a moniker display name
    } -body {
        set wmi [twapi::comobj_object "winmgmts:{impersonationLevel=impersonate}!//./root/cimv2"]
        set records [list ]
        $wmi -with {{ExecQuery "select * from Win32_ComputerSystem"}} -iterate elem {
            set record {}
            set propset [$elem Properties_]
            $propset -iterate itemobj {
                # Note how we get the default property. TBD - document
                lappend record [string tolower [$itemobj Name]] [$itemobj -default]
                $itemobj -destroy
            }
            $elem -destroy
            $propset -destroy
            lappend records $record
        }
        $wmi -destroy
        verify_kl_fields [lindex $records 0] {
            systemtype username status
        } 1
    } -result ""

    test comobj_object-1.1 {
        Create a COM object based on a moniker display name (IDispatch)
    } -body {
        set adsi_user [twapi::comobj_object "WinNT://./Administrator,user"]
        $adsi_user Name
    } -cleanup {
        $adsi_user -destroy
    } -result Administrator

    test comobj_object-1.2 {
        Create a COM object based on a moniker display name (IDispatchEx)
    } -body {
        set wmi [twapi::comobj_object "winmgmts:{impersonationLevel=impersonate}!//./root/cimv2" -interface IDispatchEx]
        set records [list ]
        $wmi -with {{ExecQuery "select * from Win32_ComputerSystem"}} -iterate elem {
            set record {}
            set propset [$elem Properties_]
            $propset -iterate itemobj {
                # Note how we get the default property
                lappend record [string tolower [$itemobj Name]] [$itemobj -default]
                $itemobj -destroy
            }
            $elem -destroy
            $propset -destroy
            lappend records $record
        }
        $wmi -destroy
        verify_kl_fields [lindex $records 0] {
            systemtype username status
        } 1
    } -result ""

    test comobj_object-1.3 {
        Create a COM object based on a moniker display name for a file
    } -constraints {
        TBD
    } -body {
        set workbook [twapi::comobj_object [file normalize sample.xlsx]]
        read and check first line
    } -cleanup {
        $workbook -destroy
    } -result TBD

    test comobj_object-2.0 {
        Create a COM object using a specific application
    } -constraints {
        TBD - need a test case of an app that supports IPersistFile interface
    } -body {
    } -cleanup {
    } -result TBD

    ################################################################

    test comobj_null-1.0 {
        NULL comobj -isnull
    } -body {
        twapi::comobj_null -isnull
    } -result 1

    test comobj_null-1.1 {
        NULL comobj -interface
    } -body {
        twapi::comobj_null -interface
    } -result {0 IDispatch}

    test comobj_null-1.2 {
        NULL comobj -destroy
    } -body {
        twapi::comobj_null -destroy; # Should have no effect
        twapi::comobj_null -isnull
    } -result 1

    test comobj_null-1.3 {
        NULL comobj destroy
    } -body {
        twapi::comobj_null destroy; # Should have no effect
        twapi::comobj_null -isnull
    } -result 1

    test comobj_null-2.0 {
        Verify that comobj_null is a comobj
    } -body {
        twapi::comobj? twapi::comobj_null
    } -result 1
    

    ################################################################

    test variant_time_to_timelist-1.0 {
        Convert variant time to a time list
    } -constraints {
        nt
    } -body {
        twapi::variant_time_to_timelist 2.0
    } -result "1900 1 1 0 0 0 0 1"

    ################################################################

    test timelist_to_variant_time-1.0 {
        Convert time list to a variant time
    } -constraints {
        nt
    } -body {
        twapi::timelist_to_variant_time  "1900 1 1 0 0 0 0"
    } -result 2.0

    ################################################################

    test variant_param_passing-int-1.0 {
        Test variant parameter of type int are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o LongProperty 2147483647
        $o LongProperty
    } -result 2147483647

    test variant_param_passing-int-1.1 {
        Test variant parameter of type int are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o LongProperty -2147483648
        $o LongProperty
    } -result -2147483648

    test variant_param_passing-int-1.2 {
        Test variant parameter of type int are passed correctly
    } -setup {
        set sh [twapi::comobj Shell.Application]
    } -body {
        # The param is a variant that may be a integer
        # corresponding to a special folder or a string path
        set fo [$sh NameSpace 36]
        string toupper [$fo Title]
    } -cleanup {
        $fo -destroy
        $sh -destroy
    } -result WINDOWS

    test variant_param_passing-int-2.0 {
        Test variant parameter of type int, overflow
    } -setup {
        set o [testobj]
    } -body {
        $o LongProperty 12344142432434
    } -result {integer value too large to represent} -returnCodes error

    test variant_param_passing-int-2.1 {
        Test variant parameter of type int, syntax
    } -setup {
        set o [testobj]
    } -body {
        $o LongProperty 123a
    } -result {expected integer but got "123a"} -returnCodes error


    test variant_param_passing-bool-1.0 {
        Test variant parameter of type bool are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o BoolProperty true
        lappend result [$o BoolProperty]
        $o BoolProperty 0
        lappend result [$o BoolProperty]
        $o BoolProperty 1
        lappend result [$o BoolProperty]
        $o BoolProperty false
        lappend result [$o BoolProperty]
    } -result {1 0 1 0}

    test variant_param_passing-bool-2.0 {
        Test variant parameter of type bool syntax error
    } -setup {
        set o [testobj]
    } -body {
        $o BoolProperty abc
    } -result {expected boolean value but got "abc"} -returnCodes error

    test variant_param_passing-bstr-1.0 {
        Test variant parameter of type bstr are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o BstrProperty abc\0\u0100def
        $o BstrProperty
    } -result abc\0\u0100def


    test variant_param_passing-bstr-1.1 {
        Test variant parameter of type string are passed correctly
    } -setup {
        set sh [twapi::comobj Shell.Application]
    } -body {
        set fo [$sh NameSpace [file nativename [pwd]]]
        $fo Title
    } -cleanup {
        $fo -destroy
        $sh -destroy
    } -result [file tail [pwd]]


    test variant_param_passing-short-1.0 {
        Test variant parameter of type short are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o ShortProperty 32767
        $o ShortProperty
    } -result 32767

    test variant_param_passing-short-1.1 {
        Test variant parameter of type short are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o ShortProperty -32768
        $o ShortProperty
    } -result -32768

    test variant_param_passing-short-2.0 {
        Test variant parameter of type short, overflow
    } -setup {
        set o [testobj]
    } -body {
        $o ShortProperty 32768
    } -result {Value is out of range.} -returnCodes error

    test variant_param_passing-short-2.1 {
        Test variant parameter of type short, overflow
    } -setup {
        set o [testobj]
    } -body {
        $o ShortProperty -32769
    } -result {Value is out of range.} -returnCodes error

    test variant_param_passing-short-2.2 {
        Test variant parameter of type short, syntax
    } -setup {
        set o [testobj]
    } -body {
        $o ShortProperty 123a
    } -result {expected integer but got "123a"} -returnCodes error

    test variant_param_passing-ui2-1.0 {
        Test variant parameter of type UI2 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o UI2Property 65535
        $o UI2Property
    } -result 65535

    test variant_param_passing-ui2-1.1 {
        Test variant parameter of type UI2 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o UI2Property 0
        $o UI2Property
    } -result 0

    test variant_param_passing-ui2-2.0 {
        Test variant parameter of type UI2, overflow
    } -setup {
        set o [testobj]
    } -body {
        $o UI2Property 65536
    } -result {Value is out of range.} -returnCodes error

    test variant_param_passing-ui2-2.1 {
        Test variant parameter of type UI2, overflow
    } -setup {
        set o [testobj]
    } -body {
        $o UI2Property -1
    } -result {Value is out of range.} -returnCodes error

    test variant_param_passing-ui2-2.2 {
        Test variant parameter of type UI2, syntax
    } -setup {
        set o [testobj]
    } -body {
        $o UI2Property 123a
    } -result {expected integer but got "123a"} -returnCodes error

    test variant_param_passing-ui1-1.0 {
        Test variant parameter of type UI1 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o UI1Property 255
        $o UI1Property
    } -result 255

    test variant_param_passing-ui1-1.1 {
        Test variant parameter of type UI1 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o UI1Property 0
        $o UI1Property
    } -result 0

    test variant_param_passing-ui1-2.0 {
        Test variant parameter of type UI1, overflow
    } -setup {
        set o [testobj]
    } -body {
        $o UI1Property 256
    } -result {Value is out of range.} -returnCodes error

    test variant_param_passing-ui1-2.1 {
        Test variant parameter of type UI1, overflow
    } -setup {
        set o [testobj]
    } -body {
        $o UI1Property -1
    } -result {Value is out of range.} -returnCodes error

    test variant_param_passing-ui1-2.2 {
        Test variant parameter of type UI1, syntax
    } -setup {
        set o [testobj]
    } -body {
        $o UI1Property 123a
    } -result {expected integer but got "123a"} -returnCodes error


    test variant_param_passing-dispatch-1.0 {
        TBD - Test variant parameter of type dispatch using comtest
    } -constraints {
        TBD
    } -body {
    } -result {}

    test variant_param_passing-dispatch-1.1 {
        Test variant parameter of type dispatch are passed correctly
    } -setup {
        set sh [twapi::comobj Shell.Application]
        set dir [tcltest::makeDirectory [clock clicks]-dir]
        set path [tcltest::makeFile "" [clock clicks]-file]; # Makes file in temp dir
        set source_folder_obj [$sh NameSpace [file nativename [tcltest::temporaryDirectory]]]
        set source_file_obj [$source_folder_obj ParseName [file tail $path]]
        set ifc [$source_file_obj -interface]
        set target_folder_obj [$sh NameSpace [file nativename $dir]]
    } -body {
        # The param is a variant that may be a integer
        # corresponding to a special folder or a string path
        # or (in this case) a folder object
        $target_folder_obj CopyHere $ifc
        file exists [file join $dir [file tail $path]]
    } -cleanup {
        twapi::IUnknown_Release $ifc
        $source_file_obj -destroy
        $source_folder_obj -destroy
        $target_folder_obj -destroy
        $sh -destroy
    } -result 1


    test variant_param_passing-r8-1.0 {
        Test variant parameter of type R8 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o DoubleProperty 0
        $o DoubleProperty
    } -result 0.0

    test variant_param_passing-r8-1.1 {
        Test variant parameter of type R8 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o DoubleProperty 1e0
        $o DoubleProperty
    } -result 1.0

    test variant_param_passing-r8-1.2 {
        Test variant parameter of type R8 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o DoubleProperty 1.0e-10
        $o DoubleProperty
    } -result 1e-10

    test variant_param_passing-r8-1.3 {
        Test variant parameter of type R8 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o DoubleProperty -100
        $o DoubleProperty
    } -result -100.0

    test variant_param_passing-r8-1.4 {
        Test variant parameter of type R8 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o DoubleProperty 100.0
        $o DoubleProperty
    } -result 100.0


    test variant_param_passing-r8-2.0 {
        Test variant parameter of type R8 - infinity
    } -setup {
        set o [testobj]
    } -body {
        $o DoubleProperty [string repeat 9 500]
        $o DoubleProperty
    } -result Inf

    test variant_param_passing-r8-2.1 {
        TBD Test variant parameter of type R8, underflow
    } -constraints {
        TBD
    } -setup {
        set o [testobj]
    } -body {
        $o DoubleProperty TBD
    } -result {Value is out of range.} -returnCodes error

    test variant_param_passing-r8-2.2 {
        Test variant parameter of type R8, syntax
    } -setup {
        set o [testobj]
    } -body {
        $o DoubleProperty 123.3.3
    } -result {expected floating-point number but got "123.3.3"} -returnCodes error


    test variant_param_passing-r4-1.0 {
        Test variant parameter of type R4 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o FloatProperty 0
        $o FloatProperty
    } -result 0.0

    test variant_param_passing-r4-1.1 {
        Test variant parameter of type R4 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o FloatProperty 1e0
        $o FloatProperty
    } -result 1.0

    test variant_param_passing-r4-1.2 {
        Test variant parameter of type R4 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o FloatProperty 1.0e-10
        $o FloatProperty
    } -result 1.000000013351432e-10

    test variant_param_passing-r4-1.3 {
        Test variant parameter of type R4 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o FloatProperty -100
        $o FloatProperty
    } -result -100.0

    test variant_param_passing-r4-1.4 {
        Test variant parameter of type R4 are passed correctly
    } -setup {
        set o [testobj]
    } -body {
        $o FloatProperty 100.0
        $o FloatProperty
    } -result 100.0


    test variant_param_passing-r4-2.0 {
        Test variant parameter of type R4, overflow
    } -setup {
        set o [testobj]
    } -body {
        list [catch {$o FloatProperty [string repeat 9 100]}] [lrange $::errorCode 0 1]
    } -result {1 {TWAPI_WIN32 -2147352566}}

    test variant_param_passing-r4-2.1 {
        TBD Test variant parameter of type R4, underflow
    } -constraints {
        TBD
    } -setup {
        set o [testobj]
    } -body {
        $o FloatProperty TBD
    } -result {Value is out of range.} -returnCodes error

    test variant_param_passing-r4-2.2 {
        Test variant parameter of type R4, syntax
    } -setup {
        set o [testobj]
    } -body {
        $o FloatProperty 123.3.3
    } -result {expected floating-point number but got "123.3.3"} -returnCodes error


    test variant_param_passing-currency-1.0 {
        TBD - Test variant parameter of type currency using comtest
    } -constraints {
        TBD
    } -body {
    } -result {}

    test variant_param_passing-date-1.0 {
        TBD - Test variant parameter of type date using comtest
    } -constraints {
        TBD
    } -body {
    } -result {}

    test variant_param_passing-scode-1.0 {
        TBD - Test variant parameter of type scode using comtest
    } -constraints {
        TBD
    } -body {
    } -result {}

    test variant_param_passing-safearray-1.0 {
        Basic safearray test - integer safe array return value
    } -body {
        [testobj] GetIntSA
    } -result {{{1000 1100 1200 1300} {1001 1101 1201 1301} {1002 1102 1202 1302}} {{1010 1110 1210 1310} {1011 1111 1211 1311} {1012 1112 1212 1312}}}

    test variant_param_passing-safearray-1.1 {
        Verify UI1 safearray interpreted as byte array
    } -body {
        [testobj] GetUI1SA
    } -result \000\001\002\003\004\005\006\007\010\011

    test variant_param_passing-safearray-1.2 {
        Basic safearray test - get integer safe array property
    } -body {
        [testobj] IntSAProperty
    } -result {{{1000 1100 1200 1300} {1001 1101 1201 1301} {1002 1102 1202 1302}} {{1010 1110 1210 1310} {1011 1111 1211 1311} {1012 1112 1212 1312}}}

    test variant_param_passing-safearray-1.3 {
        Basic safearray test - set integer safe array property
    } -body {
        [testobj] IntSAProperty [list [list 0 1 2] [list 3 4 5]]
        [testobj] IntSAProperty
    } -result {{0 1 2} {3 4 5}}

    test variant_param_passing-safearray-2.0 {
        Check type of safearray cast (int)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray int {1 2 3}]
    } -result 8195

    test variant_param_passing-safearray-2.1 {
        Check type of safearray cast (int)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray int {1.0 2 3}]
    } -result {expected integer but got "1.0"} -returnCodes error

    test variant_param_passing-safearray-2.2 {
        Check type of safearray cast (int)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray int {1 2.0 3}]
    } -result {expected integer but got "2.0"} -returnCodes error

    test variant_param_passing-safearray-2.3 {
        Check type of safearray cast (double)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray double {1.0 2.0 3.0}]
    } -result 8197

    test variant_param_passing-safearray-2.4 {
        Check type of safearray cast (double)
    } -body {
        set l [list [incr i] [incr i] [incr i]]
        [testobj] JMPSetDataVector [twapi::safearray double $l]
    } -result 8197

    test variant_param_passing-safearray-2.5 {
        Check type of safearray cast (double)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray double {-2e-10 3e11 1.0}]
    } -result 8197

    test variant_param_passing-safearray-2.6 {
        Check type of safearray cast (double)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray double [list [twapi::tclcast int 1] 2.0 3]]
    } -result 8197
                                              
    test variant_param_passing-safearray-2.7 {
        Check type of safearray cast (double)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray double {abc 1.0 2.0}]
    } -result {expected floating-point number but got "abc"} -returnCodes error

    test variant_param_passing-safearray-2.8 {
        Check type of safearray cast (double)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray double {0.0 abc 1.0 2.0}]
    } -result {expected floating-point number but got "abc"} -returnCodes error

    test variant_param_passing-safearray-2.9 {
        Check type of safearray cast (bstr)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray bstr {abc def ghi}]
    } -result 8200

    test variant_param_passing-safearray-2.10 {
        Check type of safearray cast (bstr)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray bstr [list [twapi::tclcast int 1] 2.0 3]]
    } -result 8200

    test variant_param_passing-safearray-2.11 {
        Check type of safearray cast (string)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray string [list [twapi::tclcast int 1] 2.0 3]]
    } -result 8200

    test variant_param_passing-safearray-2.12 {
        Check type of safearray cast (string)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray string {{} abc def}]
    } -result 8200

    test variant_param_passing-safearray-2.13 {
        Check type of safearray cast (i4)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray i4 {1 2 3}]
    } -result 8195

    test variant_param_passing-safearray-2.14 {
        Check type of safearray cast (r8)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray r8 {1.0 2.0 3.0}]
    } -result 8197

    test variant_param_passing-safearray-2.15 {
        Check type of safearray cast (bool)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray bool {1 false true 0}]
    } -result 8203

    test variant_param_passing-safearray-2.16 {
        Check type of safearray cast (bool)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray bool {false true 0 1}]
    } -result 8203

    test variant_param_passing-safearray-2.17 {
        Check type of safearray cast (boolean)
    } -body {
        [testobj] JMPSetDataVector [twapi::safearray boolean {1 false true 0}]
    } -result 8203

    test variant_param_passing-safearray-2.18 {
        Check type of safearray cast (variant)
    } -body {
        # Keep ival as a *variable* with value *0*.
        # We want to ensure "0" does not get shimmered back to int
        # as part of the lindex operation in the safearray proc
        set ival 0
        set l [list $ival [incr ival] [incr ival]]
        [testobj] JMPSetDataVector [twapi::safearray variant $l]
    } -result 8204


    test variant_param_passing-safearray-2.100 {
        Check type of safearray cast when list is empty
    } -constraints {
        expected_to_fail TBD
    } -body {
        # This is expected to fail in the current implementation because
        # there is no way to pass the type through if the safearray is
        # empty
        [testobj] JMPSetDataVector [twapi::safearray bstr {}]
    } -result 8197

    test variant_param_passing-safearray-2.x {
        TBD - Test variant parameter of type safearray using comtest
    } -constraints {
        TBD
    } -body {
    } -result {}

    test variant_param_passing-variant-2.x {
        TBD - Test variant parameter of type VARIANT using comtest
    } -constraints {
        TBD
    } -body {
    } -result {}


    test variant_param_passing-safearray_by_ref-1.0 {
        Pass a variant safearray by reference
    } -body {
        set sa [twapi::tclcast list ""]
        [testobj] GetApplicationNames sa
        twapi::variant_value $sa 0 0 0
    } -result {abc def ghi}


    test variant_param_passing-variant-3.0 {
        Test variant parameter of type variant*
    } -constraints {
        userInteraction
    } -setup {
        set ie [twapi::comobj InternetExplorer.Application]
    } -body {
        # The first parameter is passed as bstr variant*
        # The second parameter "1" is passed as int variant*
        $ie Visible 1
        $ie Navigate http://www.google.com 1
        after 100;              # Give it a chance
        yesno "Did you see two Internet Explorer windows, at least one to google (please close them manually) ?"
    } -cleanup {
        $ie Quit
        $ie -destroy
        # The second window remains so close it. Catch because find_windows
        # may not be available depending on test config
        catch {
            set iewin [lindex [twapi::find_windows -text "Google*" -match glob -toplevel 1] 0]
            if {$iewin ne ""} {
                twapi::close_window $iewin
            }
        }
    } -result 1





    ################################################################

    test com_exception-1.0 {
        Test catching of COM exception
    } -body {
        list [catch {[testobj] ThrowException "Test exception"} msg] $msg $::errorCode
    } -result {1 {Exception occurred. Test exception} {TWAPI_WIN32 -2147352567 {Exception occurred.} {bstrSource Twapi.Test.1 bstrDescription {Test exception} bstrHelpFile {} dwHelpContext 0 scode -2147352567 wCode 0}}}

    ################################################################
    
    test idispatchex-1.0 {
        Test expando members for IDispatchEx interfaces
    } -setup {
        set wmi [twapi::_wmi]
    } -body {
        set res [list ]
        $wmi -with {
        {ExecQuery "select * from Win32_NTLogEvent where LogFile='System' and SourceName='eventlog'"}
        } -iterate event {
            lappend res [$event SourceName]
        }
        # It is hoped there is more than one event since this test is also
        # supposed to verify a previous bug is fixed where the prototype
        # was cached (it should not be) resulting in failure when
        # retrieving the second event.
        list [expr {[llength $res] > 1}] [string tolower [lindex $res 0]]
    } -cleanup {
        $wmi -destroy
    } -result {1 eventlog}

    ################################################################

    test generate_code_from_typelib-1.0 {
        TBD
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test generate_code_from_typelib-2.0 {
        Verify generate_code_from_typelib from imports module constants
    } -setup {
        set dll [file join $::env(SYSTEMROOT) system32 msvbvm60.dll]
        if {![file exists $dll]} {
            set dll [file join $::env(SYSTEMROOT) SysWOW64 msvbvm60.dll]
            if {![file exists $dll]} {
                error "Could not find msvbvm60.dll"
            }
        }
    } -body {
        eval [ twapi::generate_code_from_typelib $dll -namespace [namespace current]::tempns -type module]
        list $tempns::Constants(vbVerticalTab) $tempns::Constants(vbObjectError)
    } -cleanup {
        namespace delete [namespace current]::tempns
    } -result [list \v -2147221504]

    test generate_code_from_typelib-3.0 {
        Verify generate_code_from_typelib from imports module constants
    } -constraints {
        OBSOLETE - file does not exist on all systems
    } -body {
        eval [ twapi::generate_code_from_typelib [file join $::env(SYSTEMROOT) system32/Speech/Common/sapi.dll] -namespace [namespace current]::tempns -type module]
        set tempns::SpeechStringConstants(SpeechRegistryUserRoot)
    } -cleanup {
        namespace delete [namespace current]::tempns
    } -result {HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech}


    ################################################################

    test comobj?-1.0 {
        Test whether a real comobj is a comobj
    } -setup {
        set cobj [twapi::comobj WScript.Shell]
    } -body {
        twapi::comobj? $cobj
    } -cleanup {
        $cobj destroy
    } -result 1

    test comobj?-2.0 {
        Test whether a arbitrary object is a comobj
    } -setup {
        twapi::class create C {}
        set cobj [C new]
    } -body {
        twapi::comobj? $cobj
    } -cleanup {
        C destroy
    } -result 0

    test comobj?-3.0 {
        Test whether a arbitrary command is a comobj
    } -body {
        twapi::comobj? "file"
    } -result 0

    test comobj?-4.0 {
        Test some random string is a comobj
    } -body {
        twapi::comobj? "affsdf"
    } -result 0

    ################################################################

    test comobj_instances-1.0 {
        Number of comobj objects
    } -setup {
        set wshell [twapi::comobj wscript.shell]
    } -body {
        set comobjs [twapi::comobj_instances]
        expr {("::twapi::comobj_null" in $comobjs) && ($wshell in $comobjs)}
    } -cleanup {
        $wshell -destroy
    } -result 1

    ################################################################
    
    test define_dispatch_prototype-1.0 {
        Basic test for define_dispatch_prototype
    } -setup {
        package require twapi_wmi
        set wmi [twapi::wmi_root]
        set pobjs [$wmi ExecQuery "select * from Win32_process where ProcessId='[pid]'"]
        $pobjs -iterate pobj {
            break
        }
        set prototype "func [$pobj -dispid GetOwner] ui4 GetOwner (\[out\] bstr user, \[out\] bstr domain )"
    } -cleanup {
        $wmi -destroy
        $pobjs -destroy
        $pobj -destroy
    } -body {
        twapi::define_dispatch_prototypes {{269AD56A-8A67-4129-BC8C-0506DCFE9880}} $prototype
        $pobj GetOwner user domain
        list [twapi::variant_value $user 0 0 0] [twapi::variant_value $domain 0 0 0]
    } -result [list $::env(USERNAME) $::env(USERDOMAIN)]

    test define_dispatch_prototype-2.0 {
        TBD - lower case guid, guid without {} etc.
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test outvar-1.0 {
        Verify outvar results in COM parameter passed as an out param
    } -setup {
        set regprov [twapi::comobj_object winmgmts://./root/default:StdRegProv]
    } -cleanup {
        $regprov -destroy
    } -body {
        list [$regprov GetStringValue 0x80000002 {SOFTWARE\Microsoft\Wbem\Scripting} "Default Namespace" [twapi::outvar x]] $x
    } -result {0 {8 {root\cimv2}}}

    ################################################################

    test comobj_destroy-1.0 {
        comobj_destroy - no args
    } -body {
        twapi::comobj_destroy
    } -result ""

    test comobj_destroy-2.0 {
        comobj_destroy - one arg
    } -setup {
        set wscript [twapi::comobj wscript.shell]
    } -body {
        list [twapi::comobj_destroy $wscript] [llength [info commands $wscript]]
    } -result [list "" 0]

    test comobj_destroy-2.1 {
        comobj_destroy - multiple arg
    } -setup {
        set wscript [twapi::comobj wscript.shell]
        set wscript2 [twapi::comobj wscript.shell]
    } -body {
        list [twapi::comobj_destroy $wscript $wscript2] [llength [info commands $wscript]] [llength [info commands $wscript]]
    } -result [list "" 0 0]

    test comobj_destroy-2.2 {
        comobj_destroy - bad arg
    } -setup {
        set wscript [twapi::comobj wscript.shell]
        set wscript2 [twapi::comobj wscript.shell]
    } -body {
        $wscript -destroy
        list [twapi::comobj_destroy $wscript $wscript2] [llength [info commands $wscript]] [llength [info commands $wscript]]
    } -result [list "" 0 0]

    ################################################################

    test com_security_blanket-1.0 {
        com_security_blanket-1.0
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test com_make_credentials-1.0 {
        com_make_credentials-1.0
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    ################################################################

    if {[info exists testobj]} {
        $testobj destroy
    }
    ::tcltest::cleanupTests
}

namespace delete ::twapi::com::test
