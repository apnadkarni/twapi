#
# Copyright (c) 2010, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for miscellaneous twapi commands

package require tcltest
eval tcltest::configure $argv

source [file join [file dirname [info script]] testutil.tcl]
load_twapi_package

#
# Set up system-specific constants that are used to match test results
namespace eval twapi::misc::test {
    namespace import ::tcltest::test
    ::tcltest::testConstraint win2k [twapi::min_os_version 5]

    ################################################################

    test get_version-1.0 {
        Get TWAPI version
    } -body {
        twapi::get_version
    } -result 3.0

    test get_version-1.1 {
        Get TWAPI version patchlevel
    } -body {
        twapi::get_version -patchlevel
    } -result 3.0.\\d+ -match regexp

    ################################################################

    test get_build_config-1.0 {
        Get the build configuration
    } -constraints {
        nt
    } -body {
        verify_kl_fields [twapi::get_build_config] {
            platform
            build_id
            embed_type
            opts
            compiler
            compiler_version
            tcl_header_version
        }
    } -result ""


    test get_build_config-1.1 {
        Get the build configuration (platform)
    } -constraints {
        nt
    } -body {
        twapi::get_build_config platform
    } -result {x86 x64} -match oneof

    test get_build_config-1.2 {
        Get the build configuration (build_id)
    } -constraints {
        nt
    } -body {
        string is integer -strict [twapi::get_build_config build_id]
    } -result 1

    test get_build_config-1.3 {
        Get the build configuration (embed_type)
    } -constraints {
        nt
    } -body {
        twapi::get_build_config embed_type
    } -result {plain lzma none} -match oneof

    test get_build_config-1.4 {
        Get the build configuration (opts)
    } -constraints {
        nt
    } -body {
        twapi::get_build_config opts
    } -result * -match glob

    test get_build_config-1.5 {
        Get the build configuration (compiler)
    } -constraints {
        nt
    } -body {
        twapi::get_build_config compiler
    } -result {vc++ gcc} -match oneof

    test get_build_config-1.6 {
        Get the build configuration (compiler_version)
    } -constraints {
        nt
    } -body {
        twapi::get_build_config compiler_version
    } -result {.+} -match regexp

    test get_build_config-1.7 {
        Get the build configuration (tcl_header_version)
    } -constraints {
        nt
    } -body {
        twapi::get_build_config tcl_header_version
    } -result {^8\.[4]\..+} -match regexp

    ################################################################

    test map_windows_error-1.0 {
        Map Windows error
    } -body {
        twapi::map_windows_error 2
    } -result "The system cannot find the file specified."

    test map_windows_error-2.0 {
        Map unmappable Windows error
    } -body {
        twapi::map_windows_error 2452345
    } -result "Windows error: 2452345"

    test map_windows_error-3.0 {
        Map TWAPI Windows error
    } -body {
        twapi::map_windows_error [expr {0xE0000000 | (0xABC << 16) | 1}]
    } -result "Invalid or badly formatted arguments specified."

    test map_windows_error-4.0 {
        Map LANMAN error
    } -body {
        twapi::map_windows_error [expr {2100+2}]
    } -result "The workstation driver is not installed."

    test map_windows_error-5.0 {
        Map NTSTATUS error
    } -body {
        twapi::map_windows_error 0x40010003
    } -result "Debugger terminated thread."

    ################################################################

    test win32_error-1.0 {
        Generate Windows error
    } -body {
        twapi::win32_error 2
    } -result "The system cannot find the file specified." -returnCodes [list error]

    test win32_error-2.0 {
        Map unmappable Windows error
    } -body {
        twapi::win32_error 2452345
    } -result "Windows error: 2452345" -returnCodes [list error]

    test win32_error-3.0 {
        Map TWAPI Windows error
    } -body {
        twapi::win32_error [expr {0xE0000000 | (0xABC << 16) | 1}]
    } -result "Invalid or badly formatted arguments specified." -returnCodes [list error]

    test win32_error-4.0 {
        Map LANMAN error
    } -body {
        twapi::win32_error [expr {2100+2}]
    } -result "The workstation driver is not installed." -returnCodes [list error]

    test win32_error-5.0 {
        Map NTSTATUS error
    } -body {
        twapi::win32_error 0x40010003
    } -result "Debugger terminated thread." -returnCodes [list error]

    test win32_error-6.0 {
        Generate Windows error with appended message
    } -body {
        twapi::win32_error 2 "Additional information:"
    } -result "Additional information: The system cannot find the file specified." -returnCodes [list error]

    ################################################################

    test twine-1.0 {
        Twine empty lists
    } -body {
        twapi::twine {} {}
    } -result {}

    test twine-1.1 {
        Twine one empty
    } -body {
        twapi::twine {a b} {}
    } -result {a {} b {}}

    test twine-1.2 {
        Twine equal lists
    } -body {
        twapi::twine {a b c} {1 2 3}
    } -result {a 1 b 2 c 3}

    test twine-1.3 {
        Twine unequal lists
    } -body {
        twapi::twine {a b} {1 2 3}
    } -result {a 1 b 2 {} 3}

    test twine-1.4 {
        Twine unequal lists
    } -body {
        twapi::twine {a b c} {1 2}
    } -result {a 1 b 2 c {}}

    ################################################################

    test kl_create-1.0 {
        Create a keyed list
    } -body {
        twapi::kl_create a 1 b 2 c 3
    } -result {a 1 b 2 c 3}

    test kl_create-1.1 {
        Create a badly formed keyed list
    } -body {
        twapi::kl_create a 1 b 2 c
    } -result * -match glob -returnCodes error

    test kl_create2-1.0 {
        Create a keyed list
    } -body {
        twapi::kl_create2 {a b c} {1 2 3}
    } -result {a 1 b 2 c 3}

    test kl_get-1.0 {
        Get a value from a keyed list (first)
    } -body {
        twapi::kl_get [twapi::kl_create a 1 b 2 c 3] a
    } -result 1

    test kl_get-1.1 {
        Get a value from a keyed list (last)
    } -body {
        twapi::kl_get [twapi::kl_create a 1 b 2 c 3] c
    } -result 3

    test kl_get-1.2 {
        Get a value from a keyed list (middle)
    } -body {
        twapi::kl_get [twapi::kl_create a 1 b 2 c 3] b
    } -result 2

    test kl_get-2.0 {
        Get a non-existent value from a keyed list with default
    } -body {
        twapi::kl_get [twapi::kl_create a 1 b 2 c 3] d 42
    } -result 42

    test kl_get-2.1 {
        Get a non-existent value from a keyed list
    } -body {
        twapi::kl_get [twapi::kl_create a 1 b 2 c 3] d
    } -result * -match glob -returnCodes error
    
    test kl_vget-1.0 {
        Store a value from a keyed list into a variable
    } -body {
        set status [twapi::kl_vget [twapi::kl_create a 1 b 2 c 3] c var]
        list $status $var
    } -result {1 3}

    test kl_vget-1.1 {
        Try to get a non-existing value from a keyed list 
    } -body {
        set var unchanged
        set status [twapi::kl_vget [twapi::kl_create a 1 b 2 c 3] d var]
        list $status $var
    } -result {0 unchanged}

    test kl_vget-1.2 {
        Try to get a non-existing value from a keyed list 
    } -body {
        catch {unset var}
        set status [twapi::kl_vget [twapi::kl_create a 1 b 2 c 3] d var]
        list $status [info exists var]
    } -result {0 0}

    test kl_equal-1.0 {
        Compare empty keyed lists
    } -body {
        twapi::kl_equal [twapi::kl_create] [twapi::kl_create2 {} {}]
    } -result 1

    test kl_equal-1.1 {
        Compare empty keyed list with non-empty
    } -body {
        twapi::kl_equal [twapi::kl_create a 1 b 2] [twapi::kl_create2 {} {}]
    } -result 0

    test kl_equal-1.2 {
        Compare keyed list (identical)
    } -body {
        twapi::kl_equal [twapi::kl_create a 1 b 2 c 3] [twapi::kl_create2 {a b c} {1 2 3}]
    } -result 1

    test kl_equal-1.3 {
        Compare keyed list (out of order)
    } -body {
        twapi::kl_equal [twapi::kl_create a 1 c 3 b 2] [twapi::kl_create2 {a b c} {1 2 3}]
    } -result 1

    test kl_equal-1.4 {
        Compare keyed list (keys in order, different values)
    } -body {
        twapi::kl_equal [twapi::kl_create a 1 c 3 b 2] [twapi::kl_create a 1 b 2 c 4]
    } -result 0

    test kl_equal-1.5 {
        Compare keyed list (different lengths)
    } -body {
        twapi::kl_equal [twapi::kl_create a 1 b 2 c 3] [twapi::kl_create a 1 b 2]
    } -result 0

    test kl_fields-1.0 {
        Get fields in a keyed list
    } -body {
        twapi::kl_fields [twapi::kl_create2 {a b c} {1 2 3}]
    } -result {a b c}

    test kl_flatten-1.0 {
        Flatten values in a list of keyed lists
    } -body {
        twapi::kl_flatten [list [twapi::kl_create a 1 b 2] [twapi::kl_create a 3 b 4]] a
    } -result {1 3}

    test kl_flatten-1.1 {
        Flatten values in a list of keyed lists (multiple fields, multiple lists)
    } -body {
        twapi::kl_flatten [list [twapi::kl_create a 1 b 2 c 3] [twapi::kl_create a 3 b 4 c 5] [twapi::kl_create a 6 b 7 c 8]] a c
    } -result {1 3 3 5 6 8}

    test kl_set-1.0 {
        Set a non-existing value in a keyed list
    } -body {
        twapi::kl_equal [twapi::kl_set [twapi::kl_create a 1 b 2] c 3] \
            [twapi::kl_create a 1 b 2 c 3]
    } -result 1

    test kl_set-1.1 {
        Set an existing value in a keyed list
    } -body {
        twapi::kl_equal [twapi::kl_set [twapi::kl_create a 1 b 2 c 4] c 3] \
            [twapi::kl_create a 1 b 2 c 3]
    } -result 1

    test kl_unset-1.0 {
        Unset an existing value in a keyed list
    } -body {
        twapi::kl_equal [twapi::kl_unset [twapi::kl_create a 1 b 2 c 3] b] \
            [twapi::kl_create a 1 c 3]
    } -result 1

    test kl_unset-1.1 {
        Unset a non-existing value in a keyed list
    } -body {
        twapi::kl_equal [twapi::kl_unset [twapi::kl_create a 1 b 2 c 3] d] \
            [twapi::kl_create a 1 c 3 b 2]
    } -result 1

    ################################################################

    test list_raw_api-1.0 {
        List the raw API
    } -body {
        expr {[llength [twapi::list_raw_api]] >= 500}
    } -result 1

    ################################################################

    test add_defines-1.0 {
        Verify add_defines adds a define to windefs
    } -body {
        twapi::add_defines {TWAPI_TEST_DEFINE 1234}
        set ::twapi::windefs(TWAPI_TEST_DEFINE)
    } -result 1234


    ################################################################

    #
    # Clean up
    ::tcltest::cleanupTests
}

namespace delete ::twapi::misc::test
