#
# Copyright (c) 2007, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for basic operation

package require tcltest
eval tcltest::configure $argv

source [file join [file dirname [info script]] testutil.tcl]
load_twapi_package twapi_base

#
# Set up system-specific constants that are used to match test results
namespace eval twapi::base::test {
    namespace import ::tcltest::test

    ################################################################

    test get_version-1.0 {
        Get TWAPI version
    } -body {
        twapi::get_version
    } -result 4.0

    test get_version-1.1 {
        Get TWAPI version patchlevel
    } -body {
        twapi::get_version -patchlevel
    } -result 4.0

    ################################################################

    test get_build_config-1.0 {
        Get the build configuration
    } -body {
        verify_kl_fields [twapi::get_build_config] {
            opts
            compiler
            compiler_version
            sdk_version
            tcl_header_version
            tea
        }
    } -result ""

    test get_build_config-1.1 {
        Get the build configuration (platform)
    } -constraints {
        OBSOLETE
    } -body {
        twapi::get_build_config platform
    } -result {x86 x64} -match oneof

    test get_build_config-1.2 {
        Get the build configuration (build_id)
    } -constraints {
        OBSOLETE
    } -body {
        string is integer -strict [twapi::get_build_config build_id]
    } -result 1

    test get_build_config-1.3 {
        Get the build configuration (embed_type)
    } -constraints {
        OBSOLETE
    } -body {
        twapi::get_build_config embed_type
    } -result {plain lzma none} -match oneof

    test get_build_config-1.4 {
        Get the build configuration (opts)
    } -body {
        twapi::get_build_config opts
    } -result * -match glob

    test get_build_config-1.5 {
        Get the build configuration (compiler)
    } -body {
        twapi::get_build_config compiler
    } -result {vc++ gcc} -match oneof

    test get_build_config-1.6 {
        Get the build configuration (compiler_version)
    } -body {
        twapi::get_build_config compiler_version
    } -result {.+} -match regexp

    test get_build_config-1.7 {
        Get the build configuration (tcl_header_version)
    } -body {
        twapi::get_build_config tcl_header_version
    } -result {^8\.[5]\..+} -match regexp

    test get_build_config-1.8 {
        Get the build configuration (tea)
    } -body {
        twapi::get_build_config tea
    } -result {^0|1$} -match regexp

    ################################################################

    test create_file-1.0 {
        create_file new with default options
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn]
        file exists $fn
    } -cleanup {
        file delete $fn
    } -result 1

    test create_file-1.1 {
        create_file existing with default options
    } -constraints {
        nt
    } -setup {
        set fn [tcltest::makeFile "create_file-1.1" [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn]
        # Content should not be modified/truncated
        read_file $fn
    } -result "create_file-1.1\n"

    
    test create_file-2.0 {
        Create a file with a specific integrity value
    } -constraints {
        win6
    } -body {
        set fn [file join [tcltest::temporaryDirectory] [clock seconds]]
        set secd [twapi::set_security_descriptor_integrity [twapi::new_security_descriptor] low 1]
        twapi::close_handle [twapi::create_file $fn -secd $secd]
        twapi::get_resource_integrity file $fn -label
    } -result {low system_mandatory_label_no_write_up}

    test create_file-3.0 {
        create_file new with -createdisposition create_always
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -createdisposition create_always]
        read_file $fn
    } -cleanup {
        file delete $fn
    } -result ""

    test create_file-3.1 {
        create_file existing with -createdisposition create_always
    } -constraints {
        nt
    } -setup {
        set fn [tcltest::makeFile "create_file-3.1" [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -createdisposition create_always]
        # Content should be truncated
        read_file $fn
    } -result ""

    test create_file-3.2 {
        create_file new with -createdisposition create_new
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -createdisposition create_new]
        read_file $fn
    } -cleanup {
        file delete $fn
    } -result ""

    test create_file-3.3 {
        create_file existing with -createdisposition create_new
    } -constraints {
        nt
    } -setup {
        set fn [tcltest::makeFile "create_file-3.3" [clock clicks]]
    } -body {
        list [catch {twapi::create_file $fn -createdisposition create_new}] \
            [lindex $::errorCode 0] [lindex $::errorCode 1] \
            [string trimright [read_file $fn]]
    } -result {1 TWAPI_WIN32 80 create_file-3.3}

    test create_file-3.4 {
        create_file new with -createdisposition open_always
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -createdisposition open_always]
        read_file $fn
    } -cleanup {
        file delete $fn
    } -result ""

    test create_file-3.5 {
        create_file existing with -createdisposition open_always
    } -constraints {
        nt
    } -setup {
        set fn [tcltest::makeFile "create_file-3.5" [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -createdisposition open_always]
        # Content should not be truncated
        read_file $fn
    } -result "create_file-3.5\n"

    test create_file-3.6 {
        create_file new with -createdisposition open_existing
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        list [catch {twapi::create_file $fn -createdisposition open_existing}] \
            [lindex $::errorCode 0] [lindex $::errorCode 1]
    } -result {1 TWAPI_WIN32 2}

    test create_file-3.7 {
        create_file existing with -createdisposition open_existing
    } -constraints {
        nt
    } -setup {
        set fn [tcltest::makeFile "create_file-3.7" [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -createdisposition open_existing]
        read_file $fn
    } -result "create_file-3.7\n"

    test create_file-3.8 {
        create_file new with -createdisposition truncate_existing
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        list [catch {twapi::create_file $fn -createdisposition truncate_existing -access generic_write}] \
            [lindex $::errorCode 0] [lindex $::errorCode 1]
    } -result {1 TWAPI_WIN32 2}

    test create_file-3.9 {
        create_file existing with -createdisposition truncate_existing
    } -constraints {
        nt
    } -setup {
        set fn [tcltest::makeFile "create_file-3.7" [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -createdisposition truncate_existing -access generic_write]
        read_file $fn
    } -result ""

    test create_file-4.0 {
        create_file new file with -secd
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
        # We do not want to pull in the security package so manually
        # construct the security descriptor
        set sid [name2sid $::env(USERNAME)]
        # twapi::new_restricted_dacl $::env(USERNAME) generic_all
        set dacl [list 2 [list [list 0 0 268435456 $sid]]]
        # twapi::new_security_descriptor -dacl $dacl
        set secd [list 0 {} {} $dacl null]
    } -body {
        twapi::close_handle [twapi::create_file $fn -secd $secd]
        string equal -nocase "[file nativename $fn] $::env(COMPUTERNAME)\\$::env(USERNAME):F" [string trim [exec [auto_execok cacls.exe] $fn]]
    } -cleanup {
        file delete $fn
    } -result 1

    test create_file-5.0 {
        create_file new file with -flags 0x20 (archive)
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
        set fn2 [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -flags 0x0]
        twapi::close_handle [twapi::create_file $fn2 -flags 0x20]
        list [file attributes $fn -archive] [file attributes $fn2 -archive]
    } -cleanup {
        file delete $fn
        file delete $fn2
    } -result [list 1 1]

    test create_file-5.1 {
        create_file new file with -flags 0x1 (readonly)
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
        set fn2 [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -flags 0x0]
        twapi::close_handle [twapi::create_file $fn2 -flags 0x1]
        list [file attributes $fn -readonly] [file attributes $fn2 -readonly]
    } -cleanup {
        file delete $fn
        file delete $fn2
    } -result [list 0 1]

    test create_file-5.2 {
        create_file new file with -flags 0x4 (system)
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
        set fn2 [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -flags 0x0]
        twapi::close_handle [twapi::create_file $fn2 -flags 0x4]
        list [file attributes $fn -system] [file attributes $fn2 -system]
    } -cleanup {
        file delete $fn
        file delete $fn2
    } -result [list 0 1]

    test create_file-5.3 {
        create_file new file with -flags 0x2 (hidden)
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
        set fn2 [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -flags 0x0]
        twapi::close_handle [twapi::create_file $fn2 -flags 0x2]
        list [file attributes $fn -hidden] [file attributes $fn2 -hidden]
    } -cleanup {
        file delete $fn
        file delete $fn2
    } -result [list 0 1]

    test create_file-5.4 {
        create_file new file with -flags 0x80 (normal)
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -flags 0x80]
        list [file attributes $fn -hidden] [file attributes $fn -system] [file attributes $fn -readonly]
    } -cleanup {
        file delete $fn
    } -result [list 0 0 0]

    test create_file-5.5 {
        create_file new file with -flags 0x04000000 (delete on close)
    } -constraints {
        nt
    } -setup {
        set fn [file join [tcltest::temporaryDirectory] [clock clicks]]
    } -body {
        twapi::close_handle [twapi::create_file $fn -flags 0x04000000]
        file exists $fn
    } -result 0


    set testnum 5
    foreach opt {-access -inherit -share -templatefile} {
        test create_file-$testnum.0 "create_file with $opt" -constraints {TBD} -body {} -result ""
    }

    ################################################################

    test lookup_account_name-1.0 {
        Look up the SID for a user name
    } -constraints {
        nt
    } -body {
        twapi::is_valid_sid_syntax [twapi::lookup_account_name $::env(USERNAME)]
    } -result 1

    ###

    test lookup_account_name-1.1 {
        Look up the SID for a group name
    } -constraints {
        nt
    } -body {
        twapi::lookup_account_name administrators
    } -result S-1-5-32-544

    ###

    test lookup_account_name-2.0 {
        Look up all attributes for a user name
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_name $::env(USERNAME) -all]
        if {[indomain]} {
            set dom [testconfig domain_name]
        } else {
            set dom $::env(COMPUTERNAME)
        }

        list [setops::symdiff [array names unameinfo] {-domain -type -sid}] \
            [twapi::is_valid_sid_syntax $unameinfo(-sid)] \
            $unameinfo(-type) \
            [string equal -nocase $unameinfo(-domain) $dom]
    } -result {{} 1 user 1} -match list

    ###

    test lookup_account_name-2.1 {
        Look up all attributes for a group name
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_name administrators -all]
        list \
            [setops::symdiff [array names unameinfo] {-domain -type -sid}] \
            $unameinfo(-sid)  \
            $unameinfo(-type)
    } -result {{} S-1-5-32-544 alias} -match list

    ###

    test lookup_account_name-3.0 {
        Look up the domain for a user name
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_name $::env(USERNAME) -domain]
        expr {
              [array size unameinfo] == 1 &&
              [info exists unameinfo(-domain)]
          }
    } -result 1

    ###

    test lookup_account_name-3.1 {
        Look up the domain for a user name (local computer)
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_name $guest_account_name -domain]
        expr {
              [array size unameinfo] == 1 &&
              [string equal -nocase $unameinfo(-domain) $::env(COMPUTERNAME)]
          }
    } -result 1

    ###

    test lookup_account_name-3.2 {
        Look up the domain for a group name
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_name administrators -domain]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-domain) == "BUILTIN"
          }
    } -result 1

    test lookup_account_name-4.0 {
        Look up the type for a user name
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_name $::env(USERNAME) -type]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-type) == "user"
          }
    } -result 1

    ###

    test lookup_account_name-4.1 {
        Look up the type for an alias
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_name administrators -type]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-type) == "alias"
          }
    } -result 1

    ###

    test lookup_account_name-4.2 {
        Look up the type for a well known group
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_name everyone -type]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-type) == "wellknowngroup"
          }
    } -result 1

    ###

    test lookup_account_name-5.0 {
        Look up SID for a user name
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_name $::env(USERNAME) -sid]
        expr {
              [array size unameinfo] == 1 &&
              [twapi::is_valid_sid_syntax $unameinfo(-sid)]
          }
    } -result 1

    ###

    test lookup_account_name-5.1 {
        Look up SID for a group alias name
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_name administrators -sid]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-sid) ==  "S-1-5-32-544"
          }
    } -result 1

    ###

    test lookup_account_name-5.2 {
        Look up SID for a well known group name
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_name everyone -sid]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-sid) ==  "S-1-1-0"
          }
    } -result 1

    ################################################################

    test lookup_account_sid-1.0 {
        Look up the name for a user SID
    } -constraints {
        nt
    } -body {
        twapi::lookup_account_sid $my_sid
    } -result $::env(USERNAME)

    ###

    test lookup_account_sid-1.1 {
        Look up the name for a group alias
    } -constraints {
        nt
    } -body {
        twapi::lookup_account_sid S-1-5-32-544
    } -result $administrators_account_name

    ###

    test lookup_account_sid-2.0 {
        Look up all attributes for a user SID
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_sid $my_sid -all]
        expr {
              [llength [setops::symdiff [array names unameinfo] {-domain -type -name}]] == 0 &&
              $unameinfo(-name) == "$::env(USERNAME)" &&
              $unameinfo(-type) == "user"
          }
    } -result 1

    ###

    test lookup_account_sid-2.1 {
        Look up all attributes for a group alias
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_sid S-1-5-32-544 -all]
        expr {
              [llength [setops::symdiff [array names unameinfo] {-domain -type -name}]] == 0 &&
              $unameinfo(-name) == "$administrators_account_name" &&
              $unameinfo(-type) == "alias"
          }
    } -result 1

    ###

    test lookup_account_sid-3.0 {
        Look up the domain for a user sid
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_sid $my_sid -domain]
        expr {
              [array size unameinfo] == 1 &&
              [info exists unameinfo(-domain)]
          }
    } -result 1

    ###

    test lookup_account_sid-3.1 {
        Look up the domain for a user sid (local computer)
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_sid $guest_sid -domain]
        expr {
              [array size unameinfo] == 1 &&
              [string equal -nocase $unameinfo(-domain) $::env(COMPUTERNAME)]
          }
    } -result 1

    ###

    test lookup_account_sid-3.2 {
        Look up the domain for a group alias sid
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_sid S-1-5-32-544 -domain]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-domain) == "BUILTIN"
          }
    } -result 1

    test lookup_account_sid-4.0 {
        Look up the type for a user sid
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_sid $my_sid -type]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-type) == "user"
          }
    } -result 1

    ###

    test lookup_account_sid-4.1 {
        Look up the type for an alias
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_sid S-1-5-32-544 -type]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-type) == "alias"
          }
    } -result 1

    ###

    test lookup_account_sid-4.2 {
        Look up the type for a well known group sid
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_sid S-1-1-0 -type]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-type) == "wellknowngroup"
          }
    } -result 1

    ###

    test lookup_account_sid-5.0 {
        Look up name for a user sid
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_sid $my_sid -name]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-name) == "$::env(USERNAME)"
          }
    } -result 1

    ###

    test lookup_account_sid-5.1 {
        Look up name for a group alias SID
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_sid S-1-5-32-544 -name]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-name) ==  "$administrators_account_name"
          }
    } -result 1

    ###

    test lookup_account_sid-5.2 {
        Look up name SID for a well known group SID
    } -constraints {
        nt
    } -body {
        array unset unameinfo
        array set unameinfo [twapi::lookup_account_sid S-1-1-0 -name]
        expr {
              [array size unameinfo] == 1 &&
              $unameinfo(-name) ==  "Everyone"
          }
    } -result 1

    ################################################################

    test map_account_to_sid-1.0 {
        Map a account name to a SID
    } -constraints {
        nt
    } -body {
        twapi::map_account_to_sid $guest_account_name
    } -result $guest_sid

    ###

    test map_account_to_sid-1.1 {
        Verify mapping account SID returns the same SID
    } -constraints {
        nt
    } -body {
        twapi::map_account_to_sid $guest_sid
    } -result $guest_sid

    ###

    test map_account_to_sid-2.0 {
        Map account to SID on another system (UNC)
    } -constraints {
        nt
    } -body {
        twapi::map_account_to_sid $::env(USERNAME) -system \\\\127.0.0.1
    } -result $my_sid

    ###

    test map_account_to_sid-2.1 {
        Map account to SID on another system (non-UNC)
    } -constraints {
        nt
    } -body {
        twapi::map_account_to_sid $::env(USERNAME) -system 127.0.0.1
    } -result $my_sid

    ################################################################

    test map_account_to_name-1.0 {
        Map a account SID to a name
    } -constraints {
        nt
    } -body {
        twapi::map_account_to_name $guest_sid
    } -result $guest_account_name

    ###

    test map_account_to_name-1.1 {
        Verify mapping account name returns the same name
    } -constraints {
        nt
    } -body {
        twapi::map_account_to_name $guest_account_name
    } -result $guest_account_name

    ###

    test map_account_to_name-2.0 {
        Map account to name on another system (UNC)
    } -constraints {
        nt
    } -body {
        twapi::map_account_to_name $guest_sid -system \\\\127.0.0.1
    } -result $guest_account_name

    ###

    test map_account_to_name-2.1 {
        Map account to name on another system (non-UNC)
    } -constraints {
        nt
    } -body {
        twapi::map_account_to_name $guest_sid -system 127.0.0.1
    } -result $guest_account_name

    ################################################################

    test get_current_user-1.0 {
        Get current user name
    } -constraints {
        nt
    } -body {
        set uname [string tolower [twapi::get_current_user]]
    } -result [string tolower [expr {[indomain] ? [testconfig domain_name] : $::env(COMPUTERNAME)}]\\$::env(USERNAME)]

    ###

    test get_current_user-2.0 {
        Get current user SID
    } -constraints {
        nt
    } -body {
        twapi::get_current_user -sid
    } -result $my_sid


    ################################################################

    #
    # Clean up
    ::tcltest::cleanupTests
}

namespace delete ::twapi::base::test
