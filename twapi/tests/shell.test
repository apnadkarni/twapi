#
# Copyright (c) 2004, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for commands from the shell.tcl

package require tcltest
eval tcltest::configure $argv

source [file join [file dirname [info script]] testutil.tcl]
load_twapi_package

namespace eval twapi::shell::test {
    namespace import ::tcltest::test ::tcltest::makeFile

    ::tcltest::testConstraint win2k [twapi::min_os_version 5]

    proc check_csidl {csidl {allow_empty 0}} {
        set path [twapi::get_shell_folder $csidl]

        if {$path == ""} {
            return $allow_empty
        }

        return [file isdirectory [twapi::get_shell_folder $csidl]]
    }

    ################################################################

    test get_shell_folder-1.0 {
        Get path to CSIDL_ADMINTOOLS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_ADMINTOOLS 1
    } -result 1

    ###

    test get_shell_folder-1.1 {
        Get path to CSIDL_COMMON_ADMINTOOLS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_ADMINTOOLS 1
    } -result 1

    ###

    test get_shell_folder-1.2 {
        Get path to CSIDL_APPDATA
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_APPDATA
    } -result 1

    ###

    test get_shell_folder-1.3 {
        Get path to CSIDL_COMMON_APPDATA
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_APPDATA
    } -result 1

    ###

    test get_shell_folder-1.4 {
        Get path to CSIDL_COMMON_DESKTOPDIRECTORY
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_DESKTOPDIRECTORY
    } -result 1

    ###

    test get_shell_folder-1.5 {
        Get path to CSIDL_COMMON_DOCUMENTS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_DOCUMENTS
    } -result 1

    ###

    test get_shell_folder-1.6 {
        Get path to CSIDL_COMMON_FAVORITES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_FAVORITES
    } -result 1

    ###

    test get_shell_folder-1.7 {
        Get path to CSIDL_COMMON_MUSIC
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_MUSIC 1
    } -result 1

    ###

    test get_shell_folder-1.8 {
        Get path to CSIDL_COMMON_PICTURES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_PICTURES 1
    } -result 1

    ###

    test get_shell_folder-1.9 {
        Get path to CSIDL_COMMON_PROGRAMS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_PROGRAMS
    } -result 1

    ###

    test get_shell_folder-1.10 {
        Get path to CSIDL_COMMON_STARTMENU
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_STARTMENU
    } -result 1

    ###

    test get_shell_folder-1.11 {
        Get path to CSIDL_COMMON_TEMPLATES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_TEMPLATES
    } -result 1

    ###

    test get_shell_folder-1.12 {
        Get path to CSIDL_COMMON_VIDEO
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_VIDEO 1
    } -result 1


    ###

    test get_shell_folder-1.13 {
        Get path to CSIDL_COOKIES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COOKIES
    } -result 1

    ###

    test get_shell_folder-1.14 {
        Get path to CSIDL_DESKTOPDIRECTORY
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_DESKTOPDIRECTORY
    } -result 1

    ###

    test get_shell_folder-1.15 {
        Get path to CSIDL_FAVORITES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_FAVORITES
    } -result 1

    ###

    test get_shell_folder-1.16 {
        Get path to CSIDL_HISTORY
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_HISTORY
    } -result 1

    ###

    test get_shell_folder-1.17 {
        Get path to CSIDL_INTERNET_CACHE
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_INTERNET_CACHE
    } -result 1


    ###

    test get_shell_folder-1.18 {
        Get path to CSIDL_LOCAL_APPDATA
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_LOCAL_APPDATA
    } -result 1

    ###

    test get_shell_folder-1.19 {
        Get path to CSIDL_MYMUSIC
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_MYMUSIC 1
    } -result 1

    ###

    test get_shell_folder-1.20 {
        Get path to CSIDL_MYVIDEO
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_MYVIDEO 1
    } -result 1

    ###

    test get_shell_folder-1.21 {
        Get path to CSIDL_NETHOOD
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_NETHOOD
    } -result 1

    ###

    test get_shell_folder-1.22 {
        Get path to CSIDL_PRINTHOOD
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PRINTHOOD
    } -result 1

    ###

    test get_shell_folder-1.23 {
        Get path to CSIDL_PROFILE
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PROFILE
    } -result 1

    ###

    test get_shell_folder-1.24 {
        Get path to CSIDL_PROFILES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PROFILES 1
    } -result 1

    ###

    test get_shell_folder-1.25 {
        Get path to CSIDL_PROGRAMS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PROGRAMS
    } -result 1

    ###

    test get_shell_folder-1.26 {
        Get path to CSIDL_PROGRAM_FILES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PROGRAM_FILES
    } -result 1

    ###

    test get_shell_folder-1.27 {
        Get path to CSIDL_PROGRAM_FILES_COMMON
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PROGRAM_FILES_COMMON
    } -result 1

    ###

    test get_shell_folder-1.28 {
        Get path to CSIDL_RECENT
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_RECENT
    } -result 1

    ###

    test get_shell_folder-1.30 {
        Get path to CSIDL_SENDTO
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_SENDTO
    } -result 1

    ###

    test get_shell_folder-1.31 {
        Get path to CSIDL_STARTMENU
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_STARTMENU
    } -result 1

    ###

    test get_shell_folder-1.32 {
        Get path to CSIDL_STARTUP
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_STARTUP
    } -result 1

    ###

    test get_shell_folder-1.33 {
        Get path to CSIDL_SYSTEM
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_SYSTEM
    } -result 1

    ###

    test get_shell_folder-1.34 {
        Get path to CSIDL_TEMPLATES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_TEMPLATES
    } -result 1

    ###

    test get_shell_folder-1.35 {
        Get path to CSIDL_WINDOWS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_WINDOWS
    } -result 1

    ###

    test get_shell_folder-2.0 {
        Verify lower case CSIDL values
    } -constraints {
        nt
    } -body {
        check_csidl csidl_windows
    } -result 1

    ###

    test get_shell_folder-2.1 {
        Verify integer CSIDL values
    } -constraints {
        nt
    } -body {
        check_csidl 36
    } -result 1

    ###

    test get_shell_folder-2.2 {
        Verify CSIDL suffixes
    } -constraints {
        nt
    } -body {
        check_csidl windows
    } -result 1

    ###

    test get_shell_folder-3.0 {
        Verify -create option
    } -constraints {
        nt TBD
    } -body {
        TBD
    } -result 1

    ################################################################

    test read_shortcut-1.0 {
        Verify all fields are present in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        verify_kl_fields [twapi::read_shortcut $path] {-args -desc -hotkey -iconindex -iconpath -idl -path -showcmd -workdir}
    } -result ""

    ###

    test read_shortcut-2.0 {
        Verify -path field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        string match -nocase *system32*services.msc $data(-path)
    } -result 1

    ###

    test read_shortcut-2.1 {
        Verify -args field in shortcut information
    } -constraints {
        nt
    } -body {
        # We choose event viewer here as that has an argument even on Vista
        set path [file join [twapi::get_shell_folder common_admintools] "event viewer.lnk"]
        array set data [twapi::read_shortcut $path]
        set data(-args)
    } -result /s

    ###

    test read_shortcut-2.2 {
        Verify -desc field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-desc)
    } -match glob -result *services*

    ###

    test read_shortcut-2.3 {
        Verify -hotkey field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-hotkey)
    } -result 0

    ###

    test read_shortcut-2.4 {
        Verify -iconindex field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-iconindex)
    } -result 0

    ###

    test read_shortcut-2.5 {
        Verify -iconpath field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        string match -nocase *system32*.dll $data(-iconpath)
    } -result 1

    ###

    test read_shortcut-2.6 {
        Verify -showcmd field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-showcmd)
    } -match regexp -result {normal|minimized|maximized}

    ###

    test read_shortcut-2.7 {
        Verify -workdir field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-workdir)
    } -result "%HOMEDRIVE%%HOMEPATH%"

    ###

    test read_shortcut-2.8 {
        Verify -idl field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-idl)
        # TBD - need better validation of pidl
    } -match regexp -result .*

    ###

    test read_shortcut-3.0 {
        Verify -rawpath option
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path -rawpath]
        string match -nocase *%systemroot%* $data(-path)
    } -result 1

    test read_shortcut-3.1 {
        Verify -shortnames option
    } -setup {
        set shortcut [file join [tcltest::temporaryDirectory] [clock clicks]]
        set path [tcltest::makeFile "" "This is a long file name with spaces.tmp"]
        twapi::write_shortcut $shortcut -path $path
    } -body {
        array set data [twapi::read_shortcut $shortcut -shortnames]
        expr {
              [string first $data(-path) " "] < 0 &&
              [equal_paths $data(-path) [file attributes $path -shortname]]
           }
    } -cleanup {
        file delete $shortcut
    } -result 1

    test read_shortcut-3.2 {
        Verify -noui option
    } -constraints {
        userInteraction
    } -setup {
        set shortcut [file join [tcltest::temporaryDirectory] [clock clicks]]
        # File must not exist
        set path [file join [tcltest::temporaryDirectory] nosuchfile]
        twapi::write_shortcut $shortcut -path $path
    } -body {
        array set data [twapi::read_shortcut $shortcut -noui]
        list [equal_paths $data(-path) $path] \
            [yesno "read_shortcut-3.2: Did you see any shell prompt for searching for a path?"]
    } -cleanup {
        file delete $shortcut
    } -result {1 0}

    test read_shortcut-3.3 {
        Verify -noui option with -timeout
    } -constraints {
        userInteraction
    } -setup {
        set shortcut [file join [tcltest::temporaryDirectory] [clock clicks]]
        # File must not exist
        set path [file join [tcltest::temporaryDirectory] nosuchfile]
        twapi::write_shortcut $shortcut -path $path
    } -body {
        array set data [twapi::read_shortcut $shortcut -noui -timeout 10]
        list [equal_paths $data(-path) $path] \
            [yesno "read_shortcut-3.3: Did you see any shell prompt for searching for a path?"]
    } -cleanup {
        file delete $shortcut
    } -result {1 0}

    test read_shortcut-3.4 {
        Verify -nosearch option
    } -constraints {
        userInteraction
    } -setup {
        set shortcut [file join [tcltest::temporaryDirectory] [clock clicks]]
        # File must not exist
        set path [file join [tcltest::temporaryDirectory] nosuchfile]
        twapi::write_shortcut $shortcut -path $path
    } -body {
        array set data [twapi::read_shortcut $shortcut -nosearch]
        list [equal_paths $data(-path) $path] \
            [yesno "read_shortcut-3.4: Did you see a shell prompt stating file was not found and ASKING IF FILE SHOULD BE DELETED?"]
    } -cleanup {
        file delete $shortcut
    } -result {1 1}

    ###

    test read_shortcut-4.0 {
        Verify options -hwin -install -nolinkinfo -notrack -uncpath
    } -constraints {
        TBD nt
    } -body {
    } -result 1


    ################################################################

    test write_shortcut-1.0 {
        Write a shortcut
    } -constraints {
        userInteraction
    } -body {
        set path [file join [tcltest::temporaryDirectory] [clock clicks].lnk]
        set np_path [auto_execok notepad.exe]
        set fn "twapi test file.txt"
        twapi::write_shortcut $path -args $fn -desc "Invokes notepad" -iconpath $np_path -path $np_path -workdir [pwd] -showcmd normal
        twapi::shell_execute -path $path
        set pid [window_to_pid -text "Untitled*Notepad" -match glob]
        yesno "Was a notepad window created prompting for file $fn ?"
    } -cleanup {
        twapi::end_process $pid -force
        file delete $path
    } -result 1

    test write_shortcut-2.0 {
        Write a shortcut using a PIDL
    } -constraints {
        TBD
    } -body {
    } -result ""

    ################################################################

    test read_url_shortcut-1.0 {
        Read url shortcut
    } -constraints {
        nt
    } -body {
        set path [lindex [glob [file join [twapi::get_shell_folder favorites] *.url]] 0]
        string match -nocase http://* [twapi::read_url_shortcut $path]
    } -result 1

    ################################################################

    test write_url_shortcut-1.0 {
        Write a URL shortcut
    } -constraints {
        nt
    } -body {
        set path [get_temp_path write_url_shortcut-1_0.url]
        twapi::write_url_shortcut $path http://twapi.sf.net
        twapi::read_url_shortcut $path
    } -cleanup {
        file delete $path
    } -result http://twapi.sf.net/

    ###

    test write_url_shortcut-2.0 {
        Write a URL ftp shortcut with guessed protocol
    } -constraints {
        nt
    } -body {
        set path [get_temp_path write_url_shortcut-1_0.url]
        twapi::write_url_shortcut $path ftp.sf.net -missingprotocol guess
        twapi::read_url_shortcut $path
    } -cleanup {
        file delete $path
    } -result ftp://ftp.sf.net/

    ###

    test write_url_shortcut-2.1 {
        Write a URL shortcut to file with guessed protocol
    } -constraints {
        nt
    } -body {
        set path [get_temp_path write_url_shortcut-1_0.url]
        twapi::write_url_shortcut $path c:\\file.txt -missingprotocol guess
        twapi::read_url_shortcut $path
    } -cleanup {
        file delete $path
    } -result file:///c:/file.txt


    ###

    test write_url_shortcut-3.0 {
        Write a URL shortcut with default protocol
    } -constraints {
        nt
    } -body {
        set path [get_temp_path write_url_shortcut-1_0.url]
        twapi::write_url_shortcut $path xyz.sf.net -missingprotocol usedefault
        twapi::read_url_shortcut $path
    } -cleanup {
        file delete $path
    } -result http://xyz.sf.net/

    ################################################################

    test invoke_url_shortcut-1.0 {
        Invoke a URL shortcut
    } -setup {
        set urlpath [file join [tcltest::temporaryDirectory] [clock clicks].url]
        twapi::write_url_shortcut $urlpath http://www.google.com
    } -body {
        twapi::invoke_url_shortcut $urlpath
        set win [wait_for_window -text Google* -match glob]
        expr {$win ne ""}
    } -cleanup {
        twapi::close_window $win
        file delete $urlpath
    } -result 1

    test invoke_url_shortcut-1.1 {
        Invoke a URL shortcut with -verb
    } -setup {
        set urlpath [file join [tcltest::temporaryDirectory] [clock clicks].url]
        set path [tcltest::makeFile "" [clock clicks].txt]
        twapi::write_url_shortcut $urlpath file:///[file join $path]
    } -body {
        twapi::invoke_url_shortcut $urlpath -verb edit
        set pid [window_to_pid -text "[file tail $path]*Notepad" -match glob]
        twapi::process_exists $pid
    } -cleanup {
        twapi::end_process $pid -force
        file delete $urlpath
    } -result 1

    ################################################################

    test recycle_file-1.0 {
        Recycle a file
    } -setup {
        set path [makeFile "" [clock clicks]]
    } -body {
        twapi::recycle_file $path
        file exists $path
    } -result 0

    test recycle_file-2.0 {
        Recycle a file with -confirm true
    } -constraints {
        userInteraction
    } -setup {
        set path [makeFile "" [clock clicks]]
    } -body {
        twapi::recycle_file $path -confirm true
        yesno "Did you see a prompt for confirmation of file deletion ?"
    } -result 1

    test recycle_file-2.1 {
        Recycle a file with -confirm false
    } -setup {
        set path [makeFile "" [clock clicks]]
    } -body {
        twapi::recycle_file $path -confirm false
        file exists $path
    } -result 0

    test recycle_file-3.0 {
        Recycle a file with -showerror true
    } -constraints {
        userInteraction
    } -body {
        list [catch {twapi::recycle_file nosuchfile.noexist -showerror true}] \
            [yesno "recycle_file-3.0: Did you see a ERROR dialog pertaining to file deletion ?"]
    } -result {1 1}

    test recycle_file-3.1 {
        Recycle a file with -showerror false
    } -constraints {
        userInteraction
    } -body {
        list [catch {twapi::recycle_file nosuchfile.noexist -showerror false}] \
            [yesno "recycle_file-3.1: Did you see a ERROR dialog pertaining to file deletion ?"]
    } -result {1 0}


    ################################################################

    test file_properties_dialog-1.0 {
        Show the file properties dialog
    } -constraints {
        userInteraction
    } -body {
        twapi::file_properties_dialog [info nameofexecutable]
        set win [wait_for_window -text [file tail [info nameofexecutable]]* -match glob -toplevel true]
        yesno "Did you see a file properties dialog for the tclsh executable?"
    } -cleanup {
        twapi::close_window $win
    } -result 1

    test file_properties_dialog-1.1 {
        Show the file properties dialog on a specific tab
    } -constraints {
        userInteraction
    } -body {
        twapi::file_properties_dialog [info nameofexecutable] -page version
        set win [wait_for_window -text [file tail [info nameofexecutable]]* -match glob -toplevel true]
        yesno "Did you see THE VERSION TAB of the file properties dialog for the tclsh executable?"
    } -cleanup {
        twapi::close_window $win
    } -result 1


    ################################################################

    test shell_execute-1.0 {
        Call shell_execute with no arguments
    } -body {
        twapi::shell_execute 
        set w [wait_for_window -text [file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-2.0 {
        Call shell_execute with -path
    } -body {
        twapi::shell_execute -path [pwd]
        set w [wait_for_window -text [file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-2.1 {
        Call shell_execute with -path and -verb
    } -constraints {
        userInteraction
    } -body {
        twapi::shell_execute -path [pwd] -verb explore
        set w [wait_for_window -text [file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        yesno "Did you see an Explorer window for [file tail [pwd]] displaying AN EXPLORE view (file tree in left pane)?"
    } -cleanup {
        twapi::close_window $w
    } -result 1

    test shell_execute-2.2 {
        Call shell_execute with -path for a URL
    } -body {
        twapi::shell_execute -path http://www.google.com
        set w [wait_for_window -text Google* -match glob -toplevel true]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-3.0 {
        Call shell_execute with PIDL
    } -constraints {
        TBD
    } -body {
    } -result ""

    test shell_execute-4.0 {
        Call shell_execute with -dir
    } -body {
        set dir [file dirname [pwd]]
        twapi::shell_execute -path cmd.exe -dir $dir -params "/k title $dir"
        set w [wait_for_window -text $dir]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-5.0 {
        Call shell_execute with -getprocesshandle
    } -body {
        set dir [file dirname [pwd]]
        set hproc [twapi::shell_execute -path cmd.exe -dir $dir -getprocesshandle true]
        set pid [twapi::get_pid_from_handle $hproc]
        twapi::close_handle $hproc
        twapi::get_process_info $pid -name
    } -cleanup {
        twapi::end_process $pid
    } -result {-name cmd.exe}
        
    test shell_execute-6.0 {
        Call shell_execute with -invokeidlist for dynamic actions
    } -body {
        twapi::shell_execute -path notepad.exe -verb properties -invokeidlist true
        set w [wait_for_window -text "notepad.exe Properties"]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-6.1 {
        Call shell_execute with -invokeidlist false for dynamic actions
    } -body {
        twapi::shell_execute -path notepad.exe -verb properties -invokeidlist false -noui true
    } -result [twapi::map_windows_error 1155] -returnCodes error

    test shell_execute-7.0 {
        Call shell_execute with -show not specified
    } -body {
        twapi::shell_execute 
        set w [wait_for_window -text [file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        # Note "normal" remembers the last position and so may be maximized
        # or minimized
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {\d+ HWND} -match regexp

    test shell_execute-7.1 {
        Call shell_execute with -show normal
    } -body {
        twapi::shell_execute -show normal
        set w [wait_for_window -text [file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        # Note "normal" remembers the last position and so may be maximized
        # or minimized
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {\d+ HWND} -match regexp

    test shell_execute-7.2 {
        Call shell_execute with -show minimize
    } -body {
        twapi::shell_execute -show minimize
        set w [wait_for_window -text [file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        after 10; # Needed because it takes a bit after creation to be min/maxed
        twapi::window_minimized $w
    } -cleanup {
        twapi::close_window $w
    } -result 1

    test shell_execute-7.3 {
        Call shell_execute with -show showminimized
    } -body {
        twapi::shell_execute -show showminimized
        set w [wait_for_window -text [file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        after 10; # Needed because it takes a bit after creation to be min/maxed
        twapi::window_minimized $w
    } -cleanup {
        twapi::close_window $w
    } -result 1

    test shell_execute-7.4 {
        Call shell_execute with -show showminnoactive
    } -body {
        twapi::shell_execute -show showminnoactive
        set w [wait_for_window -text [file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        after 10; # Needed because it takes a bit after creation to be min/maxed
        twapi::window_minimized $w
    } -cleanup {
        twapi::close_window $w
    } -result 1

    test shell_execute-7.5 {
        Call shell_execute with -show maximize
    } -body {
        twapi::shell_execute -show maximize
        set w [wait_for_window -text [file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        after 10; # Needed because it takes a bit after creation to be min/maxed
        twapi::window_maximized $w
    } -cleanup {
        twapi::close_window $w
    } -result 1

    test shell_execute-7.6 {
        Call shell_execute with -show showmaximized
    } -body {
        twapi::shell_execute -show showmaximized
        set w [wait_for_window -text [file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        after 10; # Needed because it takes a bit after creation to be min/maxed
        twapi::window_maximized $w
    } -cleanup {
        twapi::close_window $w
    } -result 1

    test shell_execute-7.7 {
        Call shell_execute with -show show
    } -body {
        twapi::shell_execute -show show
        set w [wait_for_window -text [file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        after 10; # Needed because it takes a bit after creation to be min/maxed
        expr {
              [twapi::window_maximized $w] ||
              [twapi::window_minimized $w]
          }
    } -cleanup {
        twapi::close_window $w
    } -result 0

    test shell_execute-8.0 {
        Call shell_execute with -params
    } -body {
        set dir [file dirname [pwd]]
        twapi::shell_execute -path cmd.exe -dir $dir -params "/k title $dir"
        set w [wait_for_window -text $dir]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-9.0 {
        Call shell_execute with -noui false
    } -constraints {
        userInteraction
    } -body {
        pause "You should see an error dialog saying file 'nosuchfile' was not found. Please click OK on it."
        list [catch {twapi::shell_execute -path nosuchfile -noui false}] \
            [yesno "Did you see such a dialog?"]
    } -result {1 1}

    test shell_execute-9.1 {
        Call shell_execute with -noui true
    } -body {
        twapi::shell_execute -path nosuchfile -noui true
    } -returnCodes error -result [twapi::map_windows_error 2]

    test shell_execute-10.0 {
        Call shell_execute with -substenv not specified
    } -body {
        twapi::shell_execute -path %HOMEDRIVE%\\%HOMEPATH% -noui true
    } -returnCodes error -result [twapi::map_windows_error 2]

    test shell_execute-10.1 {
        Call shell_execute with -substenv false
    } -body {
        twapi::shell_execute -path %HOMEDRIVE%\\%HOMEPATH% -noui true -substenv false
    } -returnCodes error -result [twapi::map_windows_error 2]

    test shell_execute-10.2 {
        Call shell_execute with -substenv true
    } -body {
        twapi::shell_execute -path %HOMEDRIVE%\\%HOMEPATH% -noui true -substenv true
        set w [wait_for_window -text [file tail $::env(HOMEPATH)]]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-11.0 {
        Call shell_execute with -waitforinputidle false
    } -body {
        set np_path [auto_execok notepad.exe]
        twapi::shell_execute -path $np_path -waitforinputidle false
        set w [wait_for_window -text "Untitled - Notepad" -toplevel true]
    } -cleanup {
        twapi::close_window $w
    } -result {\d+ HWND} -match regexp


    test shell_execute-11.1 {
        Call shell_execute with -waitforinputidle true
    } -body {
        set np_path [auto_execok notepad.exe]
        twapi::shell_execute -path $np_path -waitforinputidle true
        set w [wait_for_window -text "Untitled - Notepad" -toplevel true]
    } -cleanup {
        twapi::close_window $w
    } -result {\d+ HWND} -match regexp
    

    set testnum 11
    foreach opt {-asyncok class connect hicon hkeyclass hmonitor hotkey hwin idl logusage noconsole nozonechecks unicode wait} {
        test shell_execute-[incr testnum].0 "Call shell_execute with -$opt" -constraints "TBD" -body {} -result {}
    }


    ################################################################

    ::tcltest::cleanupTests
}

namespace delete ::twapi::shell::test
