#
# Copyright (c) 2004, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for commands from the shell.tcl

package require tcltest
eval tcltest::configure $argv

source [file join [file dirname [info script]] testutil.tcl]
load_twapi_package

namespace eval twapi::shell::test {
    namespace import ::tcltest::test ::tcltest::makeFile

    ::tcltest::testConstraint win2k [twapi::min_os_version 5]

    ::tcltest::testConstraint haveprinter [llength [twapi::enumerate_printers]]

    proc check_csidl {csidl {allow_empty 0}} {
        set path [twapi::get_shell_folder $csidl]

        if {$path == ""} {
            return $allow_empty
        }

        return [file isdirectory [twapi::get_shell_folder $csidl]]
    }

    ################################################################

    test get_shell_folder-1.0 {
        Get path to CSIDL_ADMINTOOLS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_ADMINTOOLS 1
    } -result 1

    ###

    test get_shell_folder-1.1 {
        Get path to CSIDL_COMMON_ADMINTOOLS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_ADMINTOOLS 1
    } -result 1

    ###

    test get_shell_folder-1.2 {
        Get path to CSIDL_APPDATA
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_APPDATA
    } -result 1

    ###

    test get_shell_folder-1.3 {
        Get path to CSIDL_COMMON_APPDATA
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_APPDATA
    } -result 1

    ###

    test get_shell_folder-1.4 {
        Get path to CSIDL_COMMON_DESKTOPDIRECTORY
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_DESKTOPDIRECTORY
    } -result 1

    ###

    test get_shell_folder-1.5 {
        Get path to CSIDL_COMMON_DOCUMENTS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_DOCUMENTS
    } -result 1

    ###

    test get_shell_folder-1.6 {
        Get path to CSIDL_COMMON_FAVORITES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_FAVORITES
    } -result 1

    ###

    test get_shell_folder-1.7 {
        Get path to CSIDL_COMMON_MUSIC
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_MUSIC 1
    } -result 1

    ###

    test get_shell_folder-1.8 {
        Get path to CSIDL_COMMON_PICTURES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_PICTURES 1
    } -result 1

    ###

    test get_shell_folder-1.9 {
        Get path to CSIDL_COMMON_PROGRAMS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_PROGRAMS
    } -result 1

    ###

    test get_shell_folder-1.10 {
        Get path to CSIDL_COMMON_STARTMENU
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_STARTMENU
    } -result 1

    ###

    test get_shell_folder-1.11 {
        Get path to CSIDL_COMMON_TEMPLATES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_TEMPLATES
    } -result 1

    ###

    test get_shell_folder-1.12 {
        Get path to CSIDL_COMMON_VIDEO
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COMMON_VIDEO 1
    } -result 1


    ###

    test get_shell_folder-1.13 {
        Get path to CSIDL_COOKIES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_COOKIES
    } -result 1

    ###

    test get_shell_folder-1.14 {
        Get path to CSIDL_DESKTOPDIRECTORY
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_DESKTOPDIRECTORY
    } -result 1

    ###

    test get_shell_folder-1.15 {
        Get path to CSIDL_FAVORITES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_FAVORITES
    } -result 1

    ###

    test get_shell_folder-1.16 {
        Get path to CSIDL_HISTORY
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_HISTORY
    } -result 1

    ###

    test get_shell_folder-1.17 {
        Get path to CSIDL_INTERNET_CACHE
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_INTERNET_CACHE
    } -result 1


    ###

    test get_shell_folder-1.18 {
        Get path to CSIDL_LOCAL_APPDATA
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_LOCAL_APPDATA
    } -result 1

    ###

    test get_shell_folder-1.19 {
        Get path to CSIDL_MYMUSIC
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_MYMUSIC 1
    } -result 1

    ###

    test get_shell_folder-1.20 {
        Get path to CSIDL_MYVIDEO
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_MYVIDEO 1
    } -result 1

    ###

    test get_shell_folder-1.21 {
        Get path to CSIDL_NETHOOD
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_NETHOOD
    } -result 1

    ###

    test get_shell_folder-1.22 {
        Get path to CSIDL_PRINTHOOD
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PRINTHOOD
    } -result 1

    ###

    test get_shell_folder-1.23 {
        Get path to CSIDL_PROFILE
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PROFILE
    } -result 1

    ###

    test get_shell_folder-1.24 {
        Get path to CSIDL_PROFILES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PROFILES 1
    } -result 1

    ###

    test get_shell_folder-1.25 {
        Get path to CSIDL_PROGRAMS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PROGRAMS
    } -result 1

    ###

    test get_shell_folder-1.26 {
        Get path to CSIDL_PROGRAM_FILES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PROGRAM_FILES
    } -result 1

    ###

    test get_shell_folder-1.27 {
        Get path to CSIDL_PROGRAM_FILES_COMMON
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_PROGRAM_FILES_COMMON
    } -result 1

    ###

    test get_shell_folder-1.28 {
        Get path to CSIDL_RECENT
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_RECENT
    } -result 1

    ###

    test get_shell_folder-1.30 {
        Get path to CSIDL_SENDTO
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_SENDTO
    } -result 1

    ###

    test get_shell_folder-1.31 {
        Get path to CSIDL_STARTMENU
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_STARTMENU
    } -result 1

    ###

    test get_shell_folder-1.32 {
        Get path to CSIDL_STARTUP
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_STARTUP
    } -result 1

    ###

    test get_shell_folder-1.33 {
        Get path to CSIDL_SYSTEM
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_SYSTEM
    } -result 1

    ###

    test get_shell_folder-1.34 {
        Get path to CSIDL_TEMPLATES
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_TEMPLATES
    } -result 1

    ###

    test get_shell_folder-1.35 {
        Get path to CSIDL_WINDOWS
    } -constraints {
        nt
    } -body {
        check_csidl CSIDL_WINDOWS
    } -result 1

    ###

    test get_shell_folder-2.0 {
        Verify lower case CSIDL values
    } -constraints {
        nt
    } -body {
        check_csidl csidl_windows
    } -result 1

    ###

    test get_shell_folder-2.1 {
        Verify integer CSIDL values
    } -constraints {
        nt
    } -body {
        check_csidl 36
    } -result 1

    ###

    test get_shell_folder-2.2 {
        Verify CSIDL suffixes
    } -constraints {
        nt
    } -body {
        check_csidl windows
    } -result 1

    ###

    test get_shell_folder-3.0 {
        Verify -create option
    } -constraints {
        nt TBD
    } -body {
        TBD
    } -result 1

    ################################################################

    test read_shortcut-1.0 {
        Verify all fields are present in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        verify_kl_fields [twapi::read_shortcut $path] {-args -desc -hotkey -iconindex -iconpath -idl -path -showcmd -workdir}
    } -result ""

    ###

    test read_shortcut-2.0 {
        Verify -path field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        string match -nocase *system32*services.msc $data(-path)
    } -result 1

    ###

    test read_shortcut-2.1 {
        Verify -args field in shortcut information
    } -constraints {
        nt
    } -body {
        # We choose event viewer here as that has an argument even on Vista
        set path [file join [twapi::get_shell_folder common_admintools] "event viewer.lnk"]
        array set data [twapi::read_shortcut $path]
        set data(-args)
    } -result /s

    ###

    test read_shortcut-2.2 {
        Verify -desc field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-desc)
    } -match glob -result *services*

    ###

    test read_shortcut-2.3 {
        Verify -hotkey field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-hotkey)
    } -result 0

    ###

    test read_shortcut-2.4 {
        Verify -iconindex field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-iconindex)
    } -result 0

    ###

    test read_shortcut-2.5 {
        Verify -iconpath field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        string match -nocase *system32*.dll $data(-iconpath)
    } -result 1

    ###

    test read_shortcut-2.6 {
        Verify -showcmd field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-showcmd)
    } -match regexp -result {normal|minimized|maximized}

    ###

    test read_shortcut-2.7 {
        Verify -workdir field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-workdir)
    } -result "%HOMEDRIVE%%HOMEPATH%"

    ###

    test read_shortcut-2.8 {
        Verify -idl field in shortcut information
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path]
        set data(-idl)
        # TBD - need better validation of pidl
    } -match regexp -result .*

    ###

    test read_shortcut-3.0 {
        Verify -rawpath option
    } -constraints {
        nt
    } -body {
        set path [file join [twapi::get_shell_folder common_admintools] services.lnk]
        array set data [twapi::read_shortcut $path -rawpath]
        string match -nocase *%systemroot%* $data(-path)
    } -result 1

    test read_shortcut-3.1 {
        Verify -shortnames option
    } -setup {
        set shortcut [file join [tcltest::temporaryDirectory] [clock clicks]]
        set path [tcltest::makeFile "" "This is a long file name with spaces.tmp"]
        twapi::write_shortcut $shortcut -path $path
    } -body {
        array set data [twapi::read_shortcut $shortcut -shortnames]
        expr {
              [string first $data(-path) " "] < 0 &&
              [equal_paths $data(-path) [file attributes $path -shortname]]
           }
    } -cleanup {
        file delete $shortcut
    } -result 1

    test read_shortcut-3.2 {
        Verify -noui option
    } -constraints {
        userInteraction
    } -setup {
        set shortcut [file join [tcltest::temporaryDirectory] [clock clicks]]
        # File must not exist
        set path [file join [tcltest::temporaryDirectory] nosuchfile]
        twapi::write_shortcut $shortcut -path $path
    } -body {
	pause "read_shortcut-3.2: If you see a shell dialog prompt after hitting Return, please dismiss it"
        array set data [twapi::read_shortcut $shortcut -noui]
        list [equal_paths $data(-path) $path] \
            [yesno "read_shortcut-3.2: Did you see any shell prompt for searching for a path?"]
    } -cleanup {
        file delete $shortcut
    } -result {1 0}

    test read_shortcut-3.3 {
        Verify -noui option with -timeout
    } -constraints {
        userInteraction
    } -setup {
        set shortcut [file join [tcltest::temporaryDirectory] [clock clicks]]
        # File must not exist
        set path [file join [tcltest::temporaryDirectory] nosuchfile]
        twapi::write_shortcut $shortcut -path $path
    } -body {
        pause "read_shortcut-3.3: If you see a shell dialog prompt after hitting Return, please dismiss it"
        array set data [twapi::read_shortcut $shortcut -noui -timeout 10]
        list [equal_paths $data(-path) $path] \
            [yesno "read_shortcut-3.3: Did you see any shell prompt for searching for a path?"]
    } -cleanup {
        file delete $shortcut
    } -result {1 0}

    test read_shortcut-3.4 {
        Verify -nosearch option
    } -constraints {
        userInteraction
    } -setup {
        set shortcut [file join [tcltest::temporaryDirectory] [clock clicks]]
        # File must not exist
        set path [file join [tcltest::temporaryDirectory] nosuchfile]
        twapi::write_shortcut $shortcut -path $path
    } -body {
        pause "read_shortcut-3.4: If you see a shell dialog prompt after hitting Return, please dismiss it BY CLICKING NO"
        array set data [twapi::read_shortcut $shortcut -nosearch]
        list [equal_paths $data(-path) $path] \
            [yesno "read_shortcut-3.4: Did you see a shell prompt stating file was not found and ASKING IF FILE SHOULD BE DELETED?"]
    } -cleanup {
        file delete $shortcut
    } -result {1 1}

    ###

    test read_shortcut-4.0 {
        Verify options -hwin -install -nolinkinfo -notrack -uncpath
    } -constraints {
        TBD nt
    } -body {
    } -result 1


    ################################################################

    test write_shortcut-1.0 {
        Write a shortcut
    } -constraints {
        userInteraction
    } -body {
        set path [file join [tcltest::temporaryDirectory] [clock clicks].lnk]
        set np_path [auto_execok notepad.exe]
        set fn "twapi test file.txt"
        twapi::write_shortcut $path -args $fn -desc "Invokes notepad" -iconpath $np_path -path $np_path -workdir [pwd] -showcmd normal
        twapi::shell_execute -path $path
        set pid [window_to_pid -text "Untitled*Notepad" -match glob]
        yesno "Was a notepad window created prompting for file $fn ?"
    } -cleanup {
        twapi::end_process $pid -force
        file delete $path
    } -result 1

    test write_shortcut-2.0 {
        Write a shortcut using a PIDL
    } -constraints {
        TBD
    } -body {
    } -result ""

    ################################################################

    test read_url_shortcut-1.0 {
        Read url shortcut
    } -constraints {
        nt
    } -setup {
        set path [lindex [glob -nocomplain [file join [twapi::get_shell_folder favorites] *.url]] 0]
        if {$path eq ""} {
            set path [lindex [glob [file join [twapi::get_shell_folder favorites] links *.url]] 0]
        }
    } -body {
        string match -nocase http*://* [twapi::read_url_shortcut $path]
    } -result 1

    ################################################################

    test write_url_shortcut-1.0 {
        Write a URL shortcut
    } -constraints {
        nt
    } -body {
        set path [get_temp_path write_url_shortcut-1_0.url]
        twapi::write_url_shortcut $path http://twapi.sf.net
        twapi::read_url_shortcut $path
    } -cleanup {
        file delete $path
    } -result http://twapi.sf.net/

    ###

    test write_url_shortcut-2.0 {
        Write a URL ftp shortcut with guessed protocol
    } -constraints {
        nt
    } -body {
        set path [get_temp_path write_url_shortcut-1_0.url]
        twapi::write_url_shortcut $path ftp.sf.net -missingprotocol guess
        twapi::read_url_shortcut $path
    } -cleanup {
        file delete $path
    } -result ftp://ftp.sf.net/

    ###

    test write_url_shortcut-2.1 {
        Write a URL shortcut to file with guessed protocol
    } -constraints {
        nt
    } -body {
        set path [get_temp_path write_url_shortcut-1_0.url]
        twapi::write_url_shortcut $path c:\\file.txt -missingprotocol guess
        twapi::read_url_shortcut $path
    } -cleanup {
        file delete $path
    } -result file:///c:/file.txt


    ###

    test write_url_shortcut-3.0 {
        Write a URL shortcut with default protocol
    } -constraints {
        nt
    } -body {
        set path [get_temp_path write_url_shortcut-1_0.url]
        twapi::write_url_shortcut $path xyz.sf.net -missingprotocol usedefault
        twapi::read_url_shortcut $path
    } -cleanup {
        file delete $path
    } -result http://xyz.sf.net/

    ################################################################

    test invoke_url_shortcut-1.0 {
        Invoke a URL shortcut
    } -setup {
        set urlpath [file join [tcltest::temporaryDirectory] [clock clicks].url]
        twapi::write_url_shortcut $urlpath http://www.google.com
    } -body {
        twapi::invoke_url_shortcut $urlpath
        set win [wait_for_visible_toplevel -text Google* -match glob]
        expr {$win ne ""}
    } -cleanup {
        file delete $urlpath
        twapi::close_window $win
    } -result 1

    test invoke_url_shortcut-1.1 {
        Invoke a URL shortcut with -verb
    } -setup {
        set urlpath [file join [tcltest::temporaryDirectory] [clock clicks].url]
        set path [tcltest::makeFile "" [clock clicks].txt]
        twapi::write_url_shortcut $urlpath file:///[file join $path]
    } -body {
        twapi::invoke_url_shortcut $urlpath -verb edit
        set pid [window_to_pid -text "[file rootname [file tail $path]]*Notepad" -match glob]
        twapi::process_exists $pid
    } -cleanup {
        twapi::end_process $pid -force
        file delete $urlpath
    } -result 1

    ################################################################

    test recycle_file-1.0 {
        Recycle a file
    } -setup {
        set path [makeFile "" [clock clicks]]
    } -body {
        twapi::recycle_file $path
        file exists $path
    } -result 0

    test recycle_file-2.0 {
        Recycle a file with -confirm true
    } -constraints {
        userInteraction
    } -setup {
        set path [makeFile "" [clock clicks]]
    } -body {
        pause "After hitting Return, you MAY see a shell dialog prompt for recycle confirmation. Please Select YES."
        twapi::recycle_file $path -confirm true
        yesno "Did you see a prompt for confirmation of file deletion ?"
    } -result 1

    test recycle_file-2.1 {
        Recycle a file with -confirm false
    } -setup {
        set path [makeFile "" [clock clicks]]
    } -body {
        twapi::recycle_file $path -confirm false
        file exists $path
    } -result 0

    test recycle_file-3.0 {
        Recycle a file with -showerror true
    } -constraints {
        userInteraction
    } -body {
        pause "After hitting Return, you MAY see a shell ERROR dialog for deletion error."
        list [catch {twapi::recycle_file nosuchfile.noexist -showerror true}] \
            [yesno "recycle_file-3.0: Did you see a ERROR dialog pertaining to file deletion error?"]
    } -result {1 1}

    test recycle_file-3.1 {
        Recycle a file with -showerror false
    } -constraints {
        userInteraction
    } -body {
        pause "After hitting Return, you MAY see a shell ERROR dialog for deletion error."
        list [catch {twapi::recycle_file nosuchfile.noexist -showerror false}] \
            [yesno "recycle_file-3.1: Did you see a ERROR dialog pertaining to file deletion ?"]
    } -result {1 0}


    ################################################################

    test file_properties_dialog-1.0 {
        Show the file properties dialog
    } -constraints {
        userInteraction
    } -body {
        # Property dialogs can block the caller
        pause "After hitting Return, you should see a shell properties dialog. Please Cancel it."
        after 100
        twapi::file_properties_dialog [info nameofexecutable]
        yesno "Did you see a file properties dialog for the tclsh executable?"
    } -result 1

    test file_properties_dialog-1.1 {
        Show the file properties dialog on a specific TAB
    } -constraints {
        userInteraction
    } -body {
        # Property dialogs can block the caller
        pause "After hitting Return, you should see a shell properties dialog. Please Cancel it AFTER NOTING THE PROPERTY PAGE DISPLAYED."
        after 100
        twapi::file_properties_dialog [info nameofexecutable] -page version
        yesno "Did you see THE VERSION TAB of the file properties dialog for the tclsh executable?"
    } -result 1


    ################################################################

    test volume_properties_dialog-1.0 {
        Show the volume properties dialog
    } -constraints {
        userInteraction
    } -body {
        # Volume propety dialog block the caller
        pause "After hitting Return, you should see a volume properties dialog for $::env(SYSTEMDRIVE). Please CANCEL it."
        twapi::volume_properties_dialog $::env(SYSTEMDRIVE)
        yesno "Did you see a volume properties dialog for $::env(SYSTEMDRIVE)?"
    } -result 1

    test volume_properties_dialog-1.1 {
        Show the volume properties dialog on a specific tab
    } -constraints {
        userInteraction
    } -body {
        # Volume propety dialog block the caller
        pause "After hitting Return, you should see a volume properties dialog for $::env(SYSTEMDRIVE). MAKE A NOTE OF THE PROPERTY PAGE TITLE and then Cancel it."
        twapi::volume_properties_dialog $::env(SYSTEMDRIVE) -page Tools
        yesno "Did you see a volume properties dialog for $::env(SYSTEMDRIVE) opened on the Tools page?"
    } -result 1

    ################################################################

    test printer_properties_dialog-1.0 {
        Show the printer properties dialog
    } -constraints {
        userInteraction haveprinter
    } -setup {
        set printer [twapi::kl_get [lindex [twapi::enumerate_printers] 0] name]
    } -body {
        # Property dialogs can block the caller
        pause "After hitting Return, you should see a shell properties dialog. Please Cancel it."
        after 100
        twapi::printer_properties_dialog $printer
        yesno "Did you see a printer properties dialog for $printer?"
    } -result 1

    test printer_properties_dialog-1.1 {
        Show the printer properties dialog on a specific tab
    } -constraints {
        userInteraction haveprinter
    } -setup {
        set printer [twapi::kl_get [lindex [twapi::enumerate_printers] 0] name]
    } -body {
        # Property dialogs can block the caller
        pause "After hitting Return, you should see a shell properties dialog. MAKE A NOTE OF THE PROPERTY PAGE TITLE and then Cancel it."
        after 100
        twapi::printer_properties_dialog $printer -page Sharing
        yesno "Did you see the Sharing TAB of the printer properties dialog for $printer?"
    } -result 1

    ################################################################

    test shell_object_properties_dialog-1.0 {
        Show the shell object (file) dialog without type
    } -constraints {
        userInteraction
    } -body {
        # Property dialogs can block the caller
        pause "After hitting Return, you should see a shell properties dialog. Please Cancel it."
        after 100
        twapi::shell_object_properties_dialog [info nameofexecutable]
        yesno "Did you see a file properties dialog for the tclsh executable?"
    } -result 1

    test shell_object_properties_dialog-1.1 {
        Show the shell object dialog -type file
    } -constraints {
        userInteraction
    } -body {
        # Property dialogs can block the caller
        pause "After hitting Return, you should see a shell properties dialog. Please Cancel it."
        after 100
        twapi::shell_object_properties_dialog [info nameofexecutable] -type file
        yesno "Did you see a file properties dialog for the tclsh executable?"
    } -result 1

    test shell_object_properties_dialog-2.0 {
        Show the shell object (printer) properties dialog
    } -constraints {
        userInteraction haveprinter
    } -setup {
        set printer [twapi::kl_get [lindex [twapi::enumerate_printers] 0] name]
    } -body {
        # Property dialogs can block the caller
        pause "After hitting Return, you should see a shell properties dialog. Please Cancel it."
        after 100
        twapi::shell_object_properties_dialog $printer
        yesno "Did you see a printer properties dialog for $printer?"
    } -result 1

    test shell_object_properties_dialog-2.1 {
        Show the shell object (printer) properties dialog -type printer
    } -constraints {
        userInteraction haveprinter
    } -setup {
        set printer [twapi::kl_get [lindex [twapi::enumerate_printers] 0] name]
    } -body {
        # Property dialogs can block the caller
        pause "After hitting Return, you should see a shell properties dialog. Please Cancel it."
        after 100
        twapi::shell_object_properties_dialog $printer -type printer
        yesno "Did you see a printer properties dialog for $printer?"
    } -result 1

    test shell_object_properties_dialog-3.0 {
        Show the shell object properties dialog on a specific tab
    } -constraints {
        userInteraction
    } -body {
        # Property dialogs can block the caller
        pause "After hitting Return, you should see a shell properties dialog. Make a note of the page and then Cancel it."
        after 100
        twapi::shell_object_properties_dialog [info nameofexecutable] -page version -type file
        yesno "Did you see THE VERSION TAB of the file properties dialog for the tclsh executable?"
    } -result 1


    ################################################################

    test shell_execute-1.0 {
        Call shell_execute with no arguments
    } -body {
        twapi::shell_execute
	# Depending on platform, either current dir or My Documents is opened
	set r "[file tail [pwd]]|My Documents"
        set w [wait_for_window -text $r -match regexp -toplevel true -pids [list [get_explorer_pid]]]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-2.0 {
        Call shell_execute with -path
    } -body {
        twapi::shell_execute -path [pwd]
        set w [wait_for_window -match glob -text *[file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-2.1 {
        Call shell_execute with -path and -verb
    } -constraints {
        userInteraction
    } -body {
        pause "After hitting Return, you MAY see an Explorer window. Note the view and the path and then close it."
        twapi::shell_execute -path [pwd] -verb explore
        set w [wait_for_window -match glob -text *[file tail [pwd]] -toplevel true -pids [list [get_explorer_pid]]]
        yesno "Did you see an Explorer window for [file tail [pwd]] displaying AN EXPLORE view (file tree in left pane)?"
    } -cleanup {
        if {[twapi::window_exists $w]} {twapi::close_window $w}
    } -result 1

    test shell_execute-2.2 {
        Call shell_execute with -path for a URL
    } -body {
        twapi::shell_execute -path http://www.google.com
        set w [wait_for_visible_toplevel -text Google* -match glob]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-3.0 {
        Call shell_execute with PIDL
    } -constraints {
        TBD
    } -body {
    } -result ""

    test shell_execute-4.0 {
        Call shell_execute with -dir
    } -body {
        set dir [file dirname [pwd]]
        twapi::shell_execute -path cmd.exe -dir $dir -params "/k title $dir"
        set w [wait_for_window -text *$dir -match glob]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-5.0 {
        Call shell_execute with -getprocesshandle
    } -body {
        set dir [file dirname [pwd]]
        set hproc [twapi::shell_execute -path cmd.exe -dir $dir -getprocesshandle true]
        set pid [twapi::get_pid_from_handle $hproc]
        twapi::close_handle $hproc
        twapi::get_process_info $pid -name
    } -cleanup {
        twapi::end_process $pid
    } -result {-name cmd.exe}
        
    test shell_execute-6.0 {
        Call shell_execute with -invokeidlist for dynamic actions
    } -body {
        twapi::shell_execute -path [auto_execok notepad.exe] -verb properties -invokeidlist true
        set w [wait_for_window -text "notepad* Properties" -match glob]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-6.1 {
        Call shell_execute with -invokeidlist false for dynamic actions
    } -body {
        twapi::shell_execute -path notepad.exe -verb properties -invokeidlist false -noui true
    } -result [twapi::map_windows_error 1155] -returnCodes error

    test shell_execute-7.0 {
        Call shell_execute with -show not specified
    } -body {
	# Make a separate path so as to not interfere with previous
	# and later tests that bring up a window
	set dir [tcltest::makeDirectory TWAPI_SHELL_EXECUTE_[clock clicks]]
        twapi::shell_execute -path $dir
        set w [wait_for_window -match glob -text *[file tail $dir] -toplevel true -pids [list [get_explorer_pid]]]
        # Note "normal" remembers the last position and so may be maximized
        # or minimized
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {\d+ HWND} -match regexp

    test shell_execute-7.1 {
        Call shell_execute with -show normal
    } -body {
	# Make a separate path so as to not interfere with previous
	# and later tests that bring up a window
	set dir [tcltest::makeDirectory TWAPI_SHELL_EXECUTE_[clock clicks]]
        twapi::shell_execute -show normal -path $dir
        set w [wait_for_window -match glob -text *[file tail $dir] -toplevel true -pids [list [get_explorer_pid]]]
        # Note "normal" remembers the last position and so may be maximized
        # or minimized
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {\d+ HWND} -match regexp

    test shell_execute-7.2 {
        Call shell_execute with -show minimize
    } -body {
	# Make a separate path so as to not interfere with previous
	# and later tests that bring up a window
	set dir [tcltest::makeDirectory TWAPI_SHELL_EXECUTE_[clock clicks]]
        twapi::shell_execute -show minimize -path $dir
        set w [wait_for_window -match glob -text *[file tail $dir] -toplevel true -pids [list [get_explorer_pid]]]
        after 50; # Needed because it takes a bit after creation to be min/maxed
        twapi::window_minimized $w
    } -cleanup {
        twapi::close_window $w
    } -result 1

    test shell_execute-7.3 {
        Call shell_execute with -show showminimized
    } -body {
	# Make a separate path so as to not interfere with previous
	# and later tests that bring up a window
	set dir [tcltest::makeDirectory TWAPI_SHELL_EXECUTE_[clock clicks]]
        twapi::shell_execute -show showminimized -path $dir
        set w [wait_for_window -match glob -text *[file tail $dir] -toplevel true -pids [list [get_explorer_pid]]]
        after 50; # Needed because it takes a bit after creation to be min/maxed
        twapi::window_minimized $w
    } -cleanup {
        twapi::close_window $w
    } -result 1

    test shell_execute-7.4 {
        Call shell_execute with -show showminnoactive
    } -body {
	# Make a separate path so as to not interfere with previous
	# and later tests that bring up a window
	set dir [tcltest::makeDirectory TWAPI_SHELL_EXECUTE_[clock clicks]]
        twapi::shell_execute -show showminnoactive -path $dir
        set w [wait_for_window -match glob -text *[file tail $dir] -toplevel true -pids [list [get_explorer_pid]]]
        after 50; # Needed because it takes a bit after creation to be min/maxed
        twapi::window_minimized $w
    } -cleanup {
        twapi::close_window $w
    } -result 1

    test shell_execute-7.5 {
        Call shell_execute with -show maximize
    } -body {
	# Make a separate path so as to not interfere with previous
	# and later tests that bring up a window
	set dir [tcltest::makeDirectory TWAPI_SHELL_EXECUTE_[clock clicks]]
        twapi::shell_execute -show maximize -path $dir
        set w [wait_for_window -match glob -text *[file tail $dir] -toplevel true -pids [list [get_explorer_pid]]]
        after 50; # Needed because it takes a bit after creation to be min/maxed
        twapi::window_maximized $w
    } -cleanup {
        twapi::close_window $w
    } -result 1

    test shell_execute-7.6 {
        Call shell_execute with -show showmaximized
    } -body {
	# Make a separate path so as to not interfere with previous
	# and later tests that bring up a window
	set dir [tcltest::makeDirectory TWAPI_SHELL_EXECUTE_[clock clicks]]
        twapi::shell_execute -show showmaximized -path $dir
        set w [wait_for_window -match glob -text *[file tail $dir] -toplevel true -pids [list [get_explorer_pid]]]
        after 50; # Needed because it takes a bit after creation to be min/maxed
        twapi::window_maximized $w
    } -cleanup {
        twapi::close_window $w
    } -result 1

    test shell_execute-7.7 {
        Call shell_execute with -show show
    } -body {
	# Make a separate path so as to not interfere with previous
	# and later tests that bring up a window
	set dir [tcltest::makeDirectory TWAPI_SHELL_EXECUTE_[clock clicks]]
        twapi::shell_execute -show show -path $dir
        set w [wait_for_window -match glob -text *[file tail $dir] -toplevel true -pids [list [get_explorer_pid]]]
    } -cleanup {
        twapi::close_window $w
    } -result HWND -match handle

    test shell_execute-8.0 {
        Call shell_execute with -params
    } -body {
	# Make a separate path so as to not interfere with previous
	# and later tests that bring up a window
	set dir [tcltest::makeDirectory TWAPI_SHELL_EXECUTE_[clock clicks]]
        twapi::shell_execute -path cmd.exe -dir $dir -params "/k title [file tail $dir]"
        set w [wait_for_window -text *[file tail $dir] -match glob]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-9.0 {
        Call shell_execute with -noui false
    } -constraints {
        userInteraction
    } -body {
        pause "You should see an error dialog saying file 'nosuchfile' was not found. Please click OK on it."
        list [catch {twapi::shell_execute -path nosuchfile -noui false}] \
            [yesno "Did you see such a dialog?"]
    } -result {1 1}

    test shell_execute-9.1 {
        Call shell_execute with -noui true
    } -body {
        twapi::shell_execute -path nosuchfile -noui true
    } -returnCodes error -result [twapi::map_windows_error 2]

    test shell_execute-10.0 {
        Call shell_execute with -substenv not specified
    } -body {
        twapi::shell_execute -path %HOMEDRIVE%\\%HOMEPATH% -noui true
    } -returnCodes error -result [twapi::map_windows_error 2]

    test shell_execute-10.1 {
        Call shell_execute with -substenv false
    } -body {
        twapi::shell_execute -path %HOMEDRIVE%\\%HOMEPATH% -noui true -substenv false
    } -returnCodes error -result [twapi::map_windows_error 2]

    test shell_execute-10.2 {
        Call shell_execute with -substenv true
    } -body {
        twapi::shell_execute -path %HOMEDRIVE%\\%HOMEPATH% -noui true -substenv true
        set w [wait_for_window -text [file tail $::env(HOMEPATH)]]
        set w
    } -cleanup {
        twapi::close_window $w
    } -result {* HWND} -match glob

    test shell_execute-11.0 {
        Call shell_execute with -waitforinputidle false
    } -body {
        set np_path [auto_execok notepad.exe]
        twapi::shell_execute -path $np_path -waitforinputidle false
        set w [wait_for_window -text "Untitled - Notepad" -toplevel true]
    } -cleanup {
        twapi::close_window $w
    } -result {\d+ HWND} -match regexp


    test shell_execute-11.1 {
        Call shell_execute with -waitforinputidle true
    } -body {
        set np_path [auto_execok notepad.exe]
        twapi::shell_execute -path $np_path -waitforinputidle true
        set w [wait_for_window -text "Untitled - Notepad" -toplevel true]
    } -cleanup {
        twapi::close_window $w
    } -result {\d+ HWND} -match regexp
    

    set testnum 11
    foreach opt {-asyncok class connect hicon hkeyclass hmonitor hotkey hwin idl logusage noconsole nozonechecks unicode wait} {
        test shell_execute-[incr testnum].0 "Call shell_execute with -$opt" -constraints "TBD" -body {} -result {}
    }

    ################################################################

    test systemtray-1.0 {
        Display icon in system tray
    } -constraints {
        userInteraction
    } -setup {
        set ico [twapi::load_icon_from_system information -width 16 -height 16]
        set ::systray_test_events {}
        proc systray_test_handler {args} {
            lappend ::systray_test_events $args
        }
    } -body {
        set errors {}
        set id [twapi::systemtray addicon $ico [namespace current]::systray_test_handler]
        if {![yesno "systemtray-1.0: Do you see an Info icon in the system tray?"]} {
            lappend errors "No icon in system tray."
        } else {
            set tip "TWAPI Test Tip"
            twapi::systemtray modifyicon $id -tip $tip
            if {![yesno "Hover over the mouse over the icon without clicking. Do you see a tooltip ?"]} {
                lappend errors "No tooltip seen."
            }
            set balloon "TWAPI Test balloon. Do not click until asked to do so."
            set balloontitle "TWAPI Test"
            twapi::systemtray modifyicon $id -balloon $balloon -balloontitle $balloontitle -balloonicon warning
            if {![yesno "Do you see a balloon with a WARNING icon and title (Do NOT click on it) ?"]} {
                lappend errors "No balloon seen."
            } else {
                if {![yesno "Please click on the balloon. Did it disappear?"]} {
                    lappend errors "Balloon did not disappear on user click."
                }
            }

            set balloon "TWAPI Test balloon. Do not click! Balloon should disappear by itself."
            set balloontitle "TWAPI Test"
            twapi::systemtray modifyicon $id -balloon $balloon -balloontitle $balloontitle -balloonicon info
            if {![yesno "Do you see a balloon with a WARNING icon and title (Do NOT click on it) ?"]} {
                lappend errors "No balloon seen."
            } else {
                if {![yesno "Do NOT click on balloon. Wait for it to disappear (about 30 secs). Did it disappear?"]} {
                    lappend errors "Balloon did not disappear by itself."
                }
            }

            pause "Please left click on the icon."
            pause "Please right click on the icon."
            pause "Please select the icon with the KEYBOARD"
            
            # Let all event handlers run
            after 1000 set ::wait_over 1
            vwait ::wait_over

            # Now verify events
            set bad [lsearch -exact -index 0 -all -inline -not $::systray_test_events $id]
            if {[llength $bad]} {
                lappend errors "Unknown icon identifier in events - $bad."
            }

            foreach ev {mousemove lbuttondown lbuttonup rbuttondown rbuttonup select keyselect contextmenu balloonshow balloonuserclick balloontimeout} {
                if {[lsearch -exact -index 1 $::systray_test_events $ev] < 0} {
                    lappend errors "Event code $ev not found in event list."
                }
            }

            # Validate every event
            foreach event $::systray_test_events {
                lassign $event evid evcode loc ticks
                lassign $loc x y
                if {(![string is integer -strict $x]) ||
                    (![string is integer -strict $y])} {
                    lappend errors "Non-integer location coordinates '$loc'"
                }
                if {![string is integer -strict $ticks]} {
                    lappend errors "Non-integer tick count '$ticks'"
                }
            }

            twapi::systemtray removeicon $id

            if {[yesno "Is the icon in system tray still visible?"]} {
                lappend errors "Icon could not be removed from system tray."
            }
            
            set errors
        }

    } -result ""




    ################################################################

    ::tcltest::cleanupTests
}

namespace delete ::twapi::shell::test
