#
# Copyright (c) 2004-2012, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for commands from the eventlog.tcl

package require tcltest
eval tcltest::configure $argv

source [file join [file dirname [info script]] testutil.tcl]
load_twapi_package twapi_eventlog

#
# Set up system-specific constants that are used to match test results
namespace eval twapi::eventlog::test {
    namespace import ::tcltest::test
    ::tcltest::testConstraint win2k [twapi::min_os_version 5]

    # Read the last entry from the specified event log
    proc get_last_event {source} {
        set hevl [twapi::eventlog_open -source $source]
        set event [lindex [twapi::eventlog_read $hevl -direction back] 0]
        twapi::eventlog_close $hevl
        return $event
    }

    proc verify_event {eventrec} {
        # TBD
        return
    }

    ################################################################

    # Monitoring test first !! Else Windows event log
    test eventlog_monitor-1.0 {
        Verify asynchronous monitoring of event log
    } -constraints {
        nt
    } -setup {
        patience eventlog_monitor-1.0
        set hevl [twapi::eventlog_open]
    } -body {
        # Note this test may sometimes fail because event log service
        # restricts frequency of notifications to 5 sec intervals
        # For this reason, we also test start and stop in a single test
        set hevm [twapi::eventlog_monitor_start $hevl {append ::_vwait_result}]
        after 1000;             # Let monitoring take effect
        twapi::eventlog_log "eventlog_monitor test message"
        set after_id [after 2000 {set ::_vwait_result timeout}]
        vwait ::_vwait_result
        after cancel $after_id
        if {$::_vwait_result ne "timeout"} {
            twapi::eventlog_monitor_stop $hevm
            twapi::eventlog_log "eventlog_monitor test message"
            # Wait at least 5 secs before logging one more message else
            # event monitor will not generate event for it anyway
            set after_if [after 6000 {set ::_vwait_result stopped}]
            vwait ::_vwait_result
            after cancel $after_id
        }
        set ::_vwait_result
    } -cleanup {
        twapi::eventlog_close $hevl
    } -result stopped

    ################################################################

    test eventlog_open-1.0 {
        Open the eventlog for reading using defaults
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open]
        twapi::eventlog_close $hevl
    } -result ""
    
    test eventlog_open-1.1 {
        Open the eventlog of a specific source for reading
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open -source system]
        twapi::eventlog_close $hevl
    } -result ""

    test eventlog_open-1.2 {
        Open a backup eventlog
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open -source application]
        set backup [file join $::env(TEMP) twapi_events.bak]
        catch {file delete $backup}
        twapi::eventlog_backup $hevl $backup
        twapi::eventlog_close $hevl
        set hevl [twapi::eventlog_open -file $backup]
        twapi::eventlog_close $hevl
    } -result ""

    ################################################################

    test eventlog_backup-1.0 {
        Back up the eventlog
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open -source application]
        set backup [file join $::env(TEMP) twapi_events.bak]
        catch {file delete $backup}
        twapi::eventlog_backup $hevl $backup
        twapi::eventlog_close $hevl
        file exists $backup
    } -result 1
    
    ################################################################

    test eventlog_clear-1.0 {
        Clear the event log
    } -constraints {
        nt systemmodificationok
    } -body {
        set hevl [twapi::eventlog_open -source application]
        twapi::eventlog_clear $hevl
        set count [twapi::eventlog_count $hevl]
        twapi::eventlog_close $hevl
        set count
    } -result 0

    test eventlog_clear-1.1 {
        Backup and clear the event log
    } -constraints {
        nt systemmodificationok
    } -body {
        set hevl [twapi::eventlog_open -source application]
        set backup [file join $::env(TEMP) twapi_events.bak]
        catch {file delete $backup}
        twapi::eventlog_clear $hevl -backup $backup
        set count [twapi::eventlog_count $hevl]
        twapi::eventlog_close $hevl
        expr {[file exists $backup] && ($count == 0)}
    } -result 1

    ################################################################

    test eventlog_is_full-1.0 {
        Test if the eventlog is full using a read handle
    } -constraints {
        nt win2k
    } -body {
        set hevl [twapi::eventlog_open -source application]
        set full [twapi::eventlog_is_full $hevl]
        twapi::eventlog_close $hevl
        expr {$full == 0 || $full == 1}
    } -result 1

    test eventlog_is_full-1.1 {
        Test if the eventlog is full using a write handle
    } -constraints {
        nt win2k
    } -body {
        set hevl [twapi::eventlog_open -write]
        set full [twapi::eventlog_is_full $hevl]
        twapi::eventlog_close $hevl
        expr {$full == 0 || $full == 1}
    } -result 1

    ################################################################

    test eventlog_oldest-1.0 {
        Get the oldest record number in the event log
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open]
        set oldest [twapi::eventlog_oldest $hevl]
        twapi::eventlog_close $hevl
        string is integer -strict $oldest
    } -result 1

    ################################################################

    test eventlog_count-1.0 {
        Get the count of records in the event log
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open]
        set count [twapi::eventlog_count $hevl]
        twapi::eventlog_close $hevl
        string is integer -strict $count
    } -result 1

    ################################################################

    test eventlog_close-1.0 {
        Close a read event log handle
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open]
        twapi::eventlog_close $hevl
        # Should generate error when closing
        catch {twapi::eventlog_close $hevl}
    } -result 1


    ################################################################

    set testnum 0
    foreach source {application system security} {
        test eventlog_read-1.[incr testnum] "Read event log records from the $source log" -constraints {
            nt
        } -body {
            set hevl [twapi::eventlog_open -source $source]
            while {[llength [set events [twapi::eventlog_read $hevl]]]} {
                foreach eventrec $events {
                    lappend msgs [verify_event $eventrec]
                }
            }
            twapi::eventlog_close $hevl
            concat [join $msgs \n]
        } -result ""
    }

    test eventlog_read-2.0 {
        Verify eventlog is read in forward direction by default
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open]
        set recs [twapi::eventlog_read $hevl]
        twapi::eventlog_close $hevl
        expr {[twapi::kl_get [lindex $recs 0] -recordnum] < [twapi::kl_get [lindex $recs 1] -recordnum]}
    } -result 1

    #

    test eventlog_read-2.1 {
        Verify eventlog reading in forward direction
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open]
        set recs [twapi::eventlog_read $hevl -direction forward]
        twapi::eventlog_close $hevl
        expr {[twapi::kl_get [lindex $recs 0] -recordnum] < [twapi::kl_get [lindex $recs 1] -recordnum]}
    } -result 1

    #

    test eventlog_read-2.2 {
        Verify eventlog reading in backward direction
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open]
        set recs [twapi::eventlog_read $hevl -direction backward]
        twapi::eventlog_close $hevl
        expr {[twapi::kl_get [lindex $recs 0] -recordnum] > [twapi::kl_get [lindex $recs 1] -recordnum]}
    } -result 1

    #

    test eventlog_read-3.0 {
        Verify eventlog read from a record position in forward direction
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open]
        set oldest [twapi::eventlog_oldest $hevl]
        set count  [twapi::eventlog_count $hevl]
        set seekpos [expr {$oldest + ($count/2)}]
        set recs [twapi::eventlog_read $hevl -seek $seekpos -direction forward]
        twapi::eventlog_close $hevl
        set first [twapi::kl_get [lindex $recs 0] -recordnum]
        set next  [twapi::kl_get [lindex $recs 1] -recordnum]
        expr {$first == $seekpos && $seekpos == [expr {$next - 1}]}
    } -result 1

    #

    test eventlog_read-3.1 {
        Verify eventlog read from a record position in backward direction
    } -constraints {
        nt
    } -body {
        set hevl [twapi::eventlog_open]
        set oldest [twapi::eventlog_oldest $hevl]
        set count  [twapi::eventlog_count $hevl]
        set seekpos [expr {$oldest + ($count/2)}]
        set recs [twapi::eventlog_read $hevl -seek $seekpos -direction backward]
        twapi::eventlog_close $hevl
        set first [twapi::kl_get [lindex $recs 0] -recordnum]
        set next  [twapi::kl_get [lindex $recs 1] -recordnum]
        expr {$first == $seekpos && $seekpos == [expr {$next + 1}]}
    } -result 1

    ################################################################

    set testnum 0
    foreach source {application system security} {
        test eventlog_format_message-1.[incr testnum] "Format event messages from the $source log" -constraints {
            nt
        } -body {
            set hevl [twapi::eventlog_open -source $source]
            while {[llength [set events [twapi::eventlog_read $hevl]]]} {
                foreach eventrec $events {
                    twapi::eventlog_format_message $eventrec
                }
            }
            twapi::eventlog_close $hevl
        } -result ""
    }

    ################################################################

    set testnum 0
    foreach source {application system} {
        test eventlog_format_category-1.[incr testnum] "Format event category from the $source log" -constraints {
            nt
        } -body {
            set hevl [twapi::eventlog_open -source $source]
            while {[llength [set events [twapi::eventlog_read $hevl]]]} {
                foreach eventrec $events {
                    twapi::eventlog_format_category $eventrec
                }
            }
            twapi::eventlog_close $hevl
        } -result ""
    }

    ################################################################

    #
    # Clean up
    ::tcltest::cleanupTests
}

namespace delete ::twapi::eventlog::test
