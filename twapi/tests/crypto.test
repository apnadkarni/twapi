#
# Copyright (c) 2010-2013, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for commands from crypto.tcl

if {0} {
    TBD - associating private key with cert
    from http://stackoverflow.com/questions/749654/associate-private-key-to-certificate-for-pfxexportcertstoreex:

Apparently, CertSetCertificateContextProperty(p, CERT_KEY_PROV_HANDLE_PROP_ID ...)

is not good. Need to do this instead:

CRYPT_KEY_PROV_INFO kpi;
ZeroMemory( & kpi, sizeof(kpi) );
kpi.pwszContainerName = "my-container-name";
kpi.dwProvType = PROV_RSA_FULL;
kpi.dwKeySpec = AT_KEYEXCHANGE;
kpi.dwFlags = CRYPT_MACHINE_KEYSET;
CertSetCertificateContextProperty( pCert, CERT_KEY_PROV_INFO_PROP_ID, 0, & kpi);
It's critical that provider name and other crap match the information that was used to generate actual key. It's not needed to set provider handle or any of that stuff. It also must be done before CertAddCertificateContextToStore.

This is the only way that I found to attach private key to a certificate.
}

package require tcltest
eval tcltest::configure $argv

source [file join [file dirname [info script]] testutil.tcl]
load_twapi_package twapi_crypto

package require md5
package require sha1
package require sha256

namespace eval twapi::crypto::test {
    namespace import ::tcltest::test

    variable hash_bin_operand
    variable hash_str_operand
    set hash_bin_operand [string repeat "\001abc\u0100" 100]
    set hash_str_operand "0123456789abcdefghijklmnopqrstuvwxyz"

    # Return a binary. hex can be a continuos string or a list
    proc hexbin {hex} {
        return [binary format H* [join $hex {}]]
    }
    
    # TBD - add tests, including SSL, were data is passed in fragmented

    proc setup_contexts {package} {
        set ccred [twapi::sspi_acquire_credentials -role client -package $package]
        set scred [twapi::sspi_acquire_credentials -role server -package $package]
        set cctx [twapi::sspi_client_context $ccred -target LUNA -confidentiality true -connection true]
        lassign [twapi::sspi_step $cctx] step data extra
        set sctx [twapi::sspi_server_context $scred $data]
        lassign [twapi::sspi_step $sctx] step data extra
        lassign [twapi::sspi_step $cctx $data] step data extra
        lassign [twapi::sspi_step $sctx $data] step data extra
        twapi::sspi_free_credentials $scred
        twapi::sspi_free_credentials $ccred
        return [list $cctx $sctx]
    }

    proc encrypt_test {cctx sctx} {
        lassign [twapi::sspi_encrypt $cctx abc] sig data padding
        set data1 [twapi::sspi_decrypt $sctx $sig $data $padding]
        lassign [twapi::sspi_encrypt $cctx 123 -seqnum 1] sig data padding
        set data2 [twapi::sspi_decrypt $sctx $sig $data $padding]
        lassign [twapi::sspi_encrypt $cctx \001\002\003 -seqnum 2] sig data padding
        set data3 [twapi::sspi_decrypt $sctx $sig $data $padding]
        return [equal_lists [list $data1 $data2 $data3] [list abc 123 \001\002\003]]
    }

    proc encrypt_test_noseq {cctx sctx} {
        lassign [twapi::sspi_encrypt $cctx abc] sig data padding
        set data1 [twapi::sspi_decrypt $sctx $sig $data $padding]
        lassign [twapi::sspi_encrypt $cctx 123] sig data padding
        set data2 [twapi::sspi_decrypt $sctx $sig $data $padding]
        lassign [twapi::sspi_encrypt $cctx \001\002\003] sig data padding
        set data3 [twapi::sspi_decrypt $sctx $sig $data $padding]
        return [equal_lists [list $data1 $data2 $data3] [list abc 123 \001\002\003]]
    }

    proc keyc_rsa {nbits} {
        variable keyc_rsa
        if {[info exists keyc_rsa($nbits)]} {
            return $keyc_rsa($nbits)
        }
        set keyc_rsa($nbits) twapitest_rsa_$nbits
        set c [twapi::crypt_acquire -keycontainer $keyc_rsa($nbits) -create 1]
        twapi::capi_key_free [twapi::crypt_generate_key $c keyexchange -size $nbits]
        twapi::capi_key_free [twapi::crypt_generate_key $c signature -size $nbits]
        twapi::crypt_free $c
        return $keyc_rsa($nbits)
    }
    proc crypt_rsa {nbits args} {
        return [twapi::crypt_acquire -keycontainer [keyc_rsa $nbits] {*}$args]
    }
        
    foreach pkg {NTLM Negotiate Kerberos} {
        test encrypt-${pkg}-1.0 "Verify basic encryption and decryption - $pkg" -setup "lassign \[setup_contexts $pkg\] cctx sctx" -constraints [expr {$pkg eq "Kerberos" ? "domain" : ""}]  -body {
            encrypt_test $cctx $sctx
        } -cleanup {
            twapi::sspi_delete_context $sctx
            twapi::sspi_delete_context $cctx
        } -result 1

        test encrypt-${pkg}-1.1 "Verify basic encryption and decryption without seq num - $pkg" -setup "lassign \[setup_contexts $pkg\] cctx sctx" -constraints [expr {$pkg eq "Kerberos" ? "domain" : ""}] -body {
            encrypt_test_noseq $cctx $sctx
        } -cleanup {
            twapi::sspi_delete_context $sctx
            twapi::sspi_delete_context $cctx
        } -result 1
    }

    test asn1_encode_string-1.0 {asn1_encode/decode_string} -body {
        twapi::asn1_decode_string [twapi::asn1_encode_string 1.256.32768.65000]
    } -result 1.256.32768.65000

    test encrypt-WDigest-1.0 {
        TBD - Verify basic encryption and decryption - WDigest
    } -constraints {
        TBD
    } -body {
        TBD - add to loop above once WDigest is supported
    } -result TBD

    test sign-1.0 {
        Verify basic signing and verification
    } -setup {
        foreach {cctx sctx} [setup_contexts NTLM] break
    } -body {
        foreach {sig data} [twapi::sspi_sign $cctx abcd] break
        set flags1 [twapi::sspi_verify_signature $sctx $sig $data]
        foreach {sig data} [twapi::sspi_sign $cctx 1234] break
        set flags2 [twapi::sspi_verify_signature $sctx $sig $data]
        list [string is integer -strict $flags1] [string is integer -strict $flags2]
    } -cleanup {
        twapi::sspi_delete_context $sctx
        twapi::sspi_delete_context $cctx
    } -result [list 1 1]
        
    test sspi_enumerate_packages-1.0 {
        Enumerate SSPI providers
    } -body {
        set packages [twapi::sspi_enumerate_packages]
        expr {
              [lsearch -exact $packages NTLM] >= 0 &&
              [lsearch -exact $packages Kerberos] >= 0 &&
              [lsearch -exact $packages Schannel] >= 0 &&
              [lsearch -exact $packages Negotiate] >= 0
          }
    } -result 1

    test sspi_enumerate_packages-2.0 {
        Enumerate SSPI providers -all
    } -body {
        set packages [twapi::sspi_enumerate_packages -all]
        set missing {}
        foreach pkgname {NTLM Kerberos Schannel Negotiate} {
            foreach field {-capabilities -version -rpcid -name -maxtokensize -comment} {
                if {![dict exists $packages $pkgname $field]} {
                    lappend missing $pkgname.$field
                }
            }
        }
        set missing
    } -result {}

    test sspi_enumerate_packages-2.1 {
        Enumerate SSPI providers -all extra args
    } -body {
        set packages [twapi::sspi_enumerate_packages -all somearg]
    } -returnCodes error -result "Command has extra arguments specified: somearg"

    test sspi_enumerate_packages-3.0 {
        Enumerate SSPI providers -capabilities
    } -body {
        set packages [twapi::sspi_enumerate_packages -capabilities]
        set errors {}
        # Just some random sanity checks
        foreach {name cap} {
            Schannel stream
            Schannel mutualauth
            Negotiate connection
            Negotiate gsscompatible
            NTLM multirequired
            Kerberos datagram
        } {
            if {[lsearch -exact [dict get $packages $name -capabilities] $cap] < 0} {
                lappend errors "Capability $cap missing in $name"
            }
        }
        foreach {name cap} {
            Schannel logon
            Schannel datagram
            Negotiate stream
            Negotiate mutualauth
            NTLM gsscompatible
            NTLM datagram
            NTLM stream
            Kerberos stream
        } {
            if {[lsearch -exact [dict get $packages $name -capabilities] $cap] >= 0} {
                lappend errors "Capability $cap should not be present in $name"
            }
        }

        set errors
    } -result {}

    test sspi_enumerate_packages-4.0 {
        Enumerate SSPI providers -version
    } -body {
        set packages [twapi::sspi_enumerate_packages -version]
        set errors {}
        if {[dict size $packages] == 0} {
            lappend errors "No security packages listed"
        } else {
            dict for {pkgname pkg} $packages {
                if {[dict get $pkg -version] != 1} {
                    lappend errors "$pkgname version is not 1"
                }
            }
        }
        set errors
    } -result {}

    test sspi_enumerate_packages-5.0 {
        Enumerate SSPI providers -rpcid
    } -body {
        set packages [twapi::sspi_enumerate_packages -rpcid]
        set errors {}
        if {[dict size $packages] == 0} {
            lappend errors "No security packages listed"
        } else {
            dict for {pkgname pkg} $packages {
                if {![string is integer -strict [dict get $pkg -rpcid]]} {
                    lappend errors "$pkgname rpcid is not an integer"
                }
            }
        }
        set errors
    } -result {}

    test sspi_enumerate_packages-6.0 {
        Enumerate SSPI providers -maxtokensize
    } -body {
        set packages [twapi::sspi_enumerate_packages -maxtokensize]
        set errors {}
        if {[dict size $packages] == 0} {
            lappend errors "No security packages listed"
        } else {
            dict for {pkgname pkg} $packages {
                if {![string is integer -strict [dict get $pkg -maxtokensize]]} {
                    lappend errors "$pkgname maxtokensize is not an integer"
                }
                if {[dict get $pkg -maxtokensize] < 0} {
                    lappend errors "$pkgname maxtokensize is less than 0"
                }
            }
        }
        set errors
    } -result {}

    test sspi_enumerate_packages-7.0 {
        Enumerate SSPI providers -name
    } -body {
        set packages [twapi::sspi_enumerate_packages -name]
        set errors {}
        if {[dict size $packages] == 0} {
            lappend errors "No security packages listed"
        } else {
            dict for {pkgname pkg} $packages {
                if {$pkgname ne [dict get $pkg -name]} {
                    lappend errors "$pkgname name does not match"
                }
            }
        }
        set errors
    } -result {}

    test sspi_enumerate_packages-8.0 {
        Enumerate SSPI providers -comment
    } -body {
        set packages [twapi::sspi_enumerate_packages -comment]
        set errors {}
        if {[dict size $packages] == 0} {
            lappend errors "No security packages listed"
        } else {
            dict for {pkgname pkg} $packages {
                # Nothing to check except that the field exists
                dict get $pkg -comment
            }
        }
        set errors
    } -result {}

    # Certificate Stores

    test cert_store_release-1.0 {
        Release a store
    } -body {
        twapi::cert_store_release [twapi::cert_temporary_store]
    } -result {}

    test cert_temporary_store-1.0 {
        Open a memory store
    } -body {
        twapi::cert_store_release [twapi::cert_temporary_store]
    } -result ""

    test cert_temporary_store-1.1 {
        Open a memory store and add a certificate to it
    } -body {
        set hstore [twapi::cert_temporary_store]
        set cer [sampleencodedcert]
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result twapitestfull

    test cert_temporary_store-2.0 {
        Verify cert memory stores protected against double frees
    } -body {
        set store [twapi::cert_temporary_store]
        twapi::cert_store_release $store
        twapi::cert_store_release $store
    } -result "*Pointer is not registered*" -returnCodes error -match glob

    test cert_temporary_store-pfx-1.0 {
        Open a PFX certificate store with empty password, no private keys
    } -body {
        set hstore [twapi::cert_temporary_store -pfx [twapi::cert_store_export_pfx [samplestore] ""]]
        set count 0
        twapi::cert_store_iterate $hstore hcert {
            incr count [catch {twapi::cert_property $hcert key_prov_info}]
        }
        set count
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result 7

    test cert_temporary_store-pfx-1.1 {
        Open a PFX certificate store with non empty password, no private keys
    } -body {
        set hstore [twapi::cert_temporary_store -pfx [twapi::cert_store_export_pfx [samplestore] [twapi::conceal somerandompass]] -password [twapi::conceal somerandompass]]
        set count 0
        twapi::cert_store_iterate $hstore hcert {
            incr count [catch {twapi::cert_property $hcert key_prov_info}]
        }
        set count
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result 7

    test cert_temporary_store-pfx-2.0 {
        Import a certificate store with password and private keys
    } -body {
        set hstore [twapi::cert_temporary_store -pfx [twapi::cert_store_export_pfx [storewithkeys] [twapi::conceal pkcspass] -exportprivatekeys 1] -password [twapi::conceal pkcspass]]
        set count 0
        twapi::cert_store_iterate $hstore hcert {
            twapi::cert_property $hcert key_prov_info
            incr count
        }
        set count
    } -result 7

    test cert_temporary_store-pfx-3.0 {
        Import a certificate store -exportableprivatekeys
    } -constraints {
        TBD
    } -body {
    } -result TBD

    test cert_temporary_store-pfx-4.0 {
        Import a certificate store -userprotected
    } -constraints {
        TBD
    } -body {
    } -result TBD

    test cert_temporary_store-pfx-5.0 {
        Import a certificate store -keysettype
    } -constraints {
        TBD
    } -body {
    } -result TBD

    test cert_temporary_store-pkcs12-1.0 {
        Open a PKCS12 certificate store with password and private keys
    } -body {
        set hstore [twapi::cert_temporary_store -pkcs12 [twapi::cert_store_export_pfx [storewithkeys] [twapi::conceal pkcspass] -exportprivatekeys 1] -password [twapi::conceal pkcspass]]
        set count 0
        twapi::cert_store_iterate $hstore hcert {
            twapi::cert_property $hcert key_prov_info
            incr count
        }
        set count
    } -result 7

    test cert_temporary_store-serialized-1.0 {
        Open a serialized certificate store
    } -body {
        set hstore [twapi::cert_temporary_store -serialized [twapi::cert_store_serialize [samplestore]]]
        set count 0
        twapi::cert_store_iterate $hstore hcert {
            incr count
        }
        set count
    } -result 7

    test cert_temporary_store-pkcs7-1.0 {
        Open a PKCS7 certificate store (der default)
    } -body {
        set hstore [twapi::cert_temporary_store -pkcs7 [twapi::cert_store_export_pkcs7 [samplestore] -encoding der]]
        set count 0
        twapi::cert_store_iterate $hstore hcert { incr count }
        set count
    } -result 7

    test cert_temporary_store-pkcs7-1.1 {
        Open a PKCS7 certificate store (pem default)
    } -body {
        set hstore [twapi::cert_temporary_store -pkcs7 [twapi::cert_store_export_pkcs7 [samplestore] -encoding pem]]
        set count 0
        twapi::cert_store_iterate $hstore hcert { incr count }
        set count
    } -result 7

    test cert_temporary_store-pkcs7-1.2 {
        Open a PKCS7 certificate store (der)
    } -body {
        set hstore [twapi::cert_temporary_store -pkcs7 [twapi::cert_store_export_pkcs7 [samplestore] -encoding der] -encoding der]
        set count 0
        twapi::cert_store_iterate $hstore hcert { incr count }
        set count
    } -result 7

    test cert_temporary_store-pkcs7-1.3 {
        Open a PKCS7 certificate store (pem)
    } -body {
        set hstore [twapi::cert_temporary_store -pkcs7 [twapi::cert_store_export_pkcs7 [samplestore] -encoding pem] -encoding pem]
        set count 0
        twapi::cert_store_iterate $hstore hcert { incr count }
        set count
    } -result 7


    ################################################################

    test cert_file_store_open-1.0 {
        Open a non-existing file store
    } -setup {
        set storepath [file join [tcltest::temporaryDirectory] [new_name].store]
    } -body {
        set hstore [twapi::cert_file_store_open $storepath]
        set cer [sampleencodedcert]
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
        file delete $storepath
    } -result twapitestfull

    test cert_file_store_open-1.1 {
        Open a non-existing file store -readonly 0
    } -setup {
        set storepath [file join [tcltest::temporaryDirectory] [new_name].store]
    } -body {
        set hstore [twapi::cert_file_store_open $storepath -readonly 0]
        set cer [sampleencodedcert]
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
        file delete $storepath
    } -result twapitestfull

    test cert_file_store_open-1.2 {
        Open a non-existing file store -readonly 1
    } -setup {
        set storepath [file join [tcltest::temporaryDirectory] [new_name].store]
    } -body {
        list [catch {twapi::cert_file_store_open $storepath -readonly 1} msg] [errorcode]
    } -result {1 {TWAPI_WIN32 2}}

    test cert_file_store_open-1.3 {
        Open a non-existing file store -existing 1
    } -setup {
        set storepath [file join [tcltest::temporaryDirectory] [new_name].store]
    } -body {
        list [catch {twapi::cert_file_store_open $storepath -existing 1}] [errorcode]
    } -result {1 {TWAPI_WIN32 2}}

    test cert_file_store_open-2.0 {
        Open an existing file store
    } -setup {
        set storepath [temp_file_store_path]
    } -body {
        set hstore [twapi::cert_file_store_open $storepath]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result twapitestfull

    test cert_file_store_open-2.1 {
        Open an existing file store -create 0
    } -setup {
        set storepath [temp_file_store_path]
    } -body {
        set hstore [twapi::cert_file_store_open $storepath -create 0]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result twapitestfull

    test cert_file_store_open-2.2 {
        Open an existing file store -create 1
    } -setup {
        set storepath [temp_file_store_path]
    } -body {
        list [catch {twapi::cert_file_store_open $storepath -create 1}] [errorcode]
    } -result {1 {TWAPI_WIN32 80}}

    test cert_file_store_open-3.0 {
        Verify changes to cert contexts persisted after store closed -deferclose 1
    } -setup {
        # Create temporary store to modify
        set storepath [file join [tcltest::temporaryDirectory] [new_name].store]
        set hstore [twapi::cert_file_store_open $storepath]
        set cer [sampleencodedcert]
        set hcert [twapi::cert_store_add_encoded_certificate $hstore $cer]
        twapi::cert_property_set $hcert description "original"
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -body {
        set hstore [twapi::cert_file_store_open $storepath]
        set hcert [twapi::cert_store_enum_contents $hstore]
        set desc1 [twapi::cert_property $hcert description]
        twapi::cert_store_release $hstore; # Close store first
        twapi::cert_property_set $hcert description "new"; # Should NOT be saved
        twapi::cert_release $hcert

        set hstore [twapi::cert_file_store_open $storepath -deferclose 1]
        set hcert [twapi::cert_store_enum_contents $hstore]
        set desc2 [twapi::cert_property $hcert description]
        twapi::cert_store_release $hstore; # Close store first
        twapi::cert_property_set $hcert description "new"; # SHOULD be saved
        twapi::cert_release $hcert

        set hstore [twapi::cert_file_store_open $storepath -readonly 1]
        set hcert [twapi::cert_store_enum_contents $hstore]
        set desc3 [twapi::cert_property $hcert description]

        list $desc1 $desc2 $desc3
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
        file delete $storepath
    } -result [list original original new]

    test cert_file_store_open-4.0 {
        Open an existing file store -readonly
    } -setup {
        set storepath [temp_file_store_path]
    } -body {
        file attributes $storepath -readonly 1
        catch {twapi::cert_store_release [twapi::cert_file_store_open $storepath]} msg
        catch {twapi::cert_store_release [twapi::cert_file_store_open $storepath -readonly 0]} msg2
        list $msg $msg2 [twapi::cert_store_release [twapi::cert_file_store_open $storepath -readonly 1]]
    } -cleanup {
        file attributes $storepath -readonly 0
    } -result {{Access is denied.} {Access is denied.} {}}

    test cert_file_store_open-5.0 {
        TBD - cert_file_store_open -includearchived
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    test cert_file_store_open-6.0 {
        TBD - cert_file_store_open -maxpermissions
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    test cert_file_store_open-4.0 {
        TBD - cert_file_store_open -backupprivilege
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    test cert_physical_store_open {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    test cert_physical_store_delete {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    test cert_system_store_open-1.0 {
        Open a non-existing system store
    } -setup {
        set storepath [new_name]
    } -body {
        set hstore [twapi::cert_system_store_open $storepath user]
        set cer [sampleencodedcert]
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result twapitestfull

    test cert_system_store_open-1.1 {
        Open a non-existing system store -readonly 0
    } -setup {
        set storepath [new_name]
    } -body {
        set hstore [twapi::cert_system_store_open $storepath user -readonly 0]
        set cer [sampleencodedcert]
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result twapitestfull

    test cert_system_store_open-1.2 {
        Open a non-existing system store 1 -existing 1
    } -setup {
        set storepath [new_name]
    } -body {
        list [catch {twapi::cert_system_store_open $storepath user -existing 1}] [errorcode]
    } -result {1 {TWAPI_WIN32 2}}

    test cert_system_store_open-2.0 {
        Open an existing system store
    } -setup {
        set storepath [temp_system_store_path]
    } -body {
        set hstore [twapi::cert_system_store_open $storepath user]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result twapitestfull

    test cert_system_store_open-2.1 {
        Open an existing system store -readonly 1
    } -setup {
        set storepath [temp_system_store_path]
    } -body {
        set hstore [twapi::cert_system_store_open $storepath user -readonly 1]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result twapitestfull

    test cert_system_store_open-2.2 {
        Open an existing system store -create 0
    } -setup {
        set storepath [temp_system_store_path]
    } -body {
        set hstore [twapi::cert_system_store_open $storepath user -create 0]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result twapitestfull

    test cert_system_store_open-2.3 {
        Open an existing system store -create 1
    } -setup {
        set storepath [temp_system_store_path]
    } -body {
        list [catch {twapi::cert_system_store_open $storepath user -create 1}] [errorcode]
    } -result {1 {TWAPI_WIN32 80}}

    test cert_system_store_open-3.0 {
        Verify changes to cert contexts persisted after store closed -deferclose 1
    } -setup {
        # Create temporary store to modify
        set storepath [new_name]
        set hstore [twapi::cert_system_store_open $storepath user]
        set cer [sampleencodedcert]
        set hcert [twapi::cert_store_add_encoded_certificate $hstore $cer]
        twapi::cert_property_set $hcert description "original"
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -body {
        set hstore [twapi::cert_system_store_open $storepath user]
        set hcert [twapi::cert_store_enum_contents $hstore]
        set desc1 [twapi::cert_property $hcert description]
        twapi::cert_store_release $hstore; # Close store first
        twapi::cert_property_set $hcert description "shouldnotbesaved"; 
        twapi::cert_release $hcert

        set hstore [twapi::cert_system_store_open $storepath user -deferclose 1]
        set hcert [twapi::cert_store_enum_contents $hstore]
        set desc2 [twapi::cert_property $hcert description]
        twapi::cert_store_release $hstore; # Close store first
        twapi::cert_property_set $hcert description "shouldbesaved"
        twapi::cert_release $hcert

        set hstore [twapi::cert_system_store_open $storepath user]
        set hcert [twapi::cert_store_enum_contents $hstore]
        set desc3 [twapi::cert_property $hcert description]

        # TBD - do not understand why this test fails
        list $desc1 $desc2 $desc3
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
        file delete $storepath
    } -result [list original original shouldbesaved]

    foreach loc [concat {user users service services localmachine localmachineenterprise localmachinegrouppolicy usergrouppolicy} [twapi::cert_system_store_locations]] {
        test "cert_system_store_open-$loc-1.0"  {
            Open system store at location
        } -constraints [expr {$loc in {users services Users Services} ? "TBD" : ""}] -body [format {
            twapi::cert_store_release [twapi::cert_system_store_open My $loc -readonly [expr {$loc ne "user"}]]
            } $loc] -result ""
    }

    ################################################################

    test cert_system_store_delete-1.0 {
        Delete system store
    } -setup {
        # Create temporary store to modify
        set storepath [new_name]
        twapi::cert_store_release [twapi::cert_system_store_open $storepath user]
    } -body {
        twapi::cert_system_store_delete $storepath user
        list [catch {twapi::cert_system_store_open $storepath user -existing 1}] [errorcode]
    } -result {1 {TWAPI_WIN32 2}}

    ################################################################

    foreach loc [concat {user users service localmachine localmachineenterprise localmachinegrouppolicy usergrouppolicy} [twapi::cert_system_store_locations]] {
        test "cert_system_stores-$loc-1.0" {
            Get system store list
        } -body [format {
            if {[catch {
                set stores [twapi::cert_system_stores %s]
            }]} {
                expr {[lindex $::errorCode 0] eq "TWAPI_WIN32" &&
                      [lindex $::errorCode 1] == 2}
            } else {
                # For Users store, list is SID/My etc.
                expr {[lsearch $stores *My] >= 0 &&
                      [lsearch $stores *CA] >= 0 &&
                      [lsearch $stores *Root] >= 0}
            }
        } $loc] -result 1
    }

    ################################################################

    test cert_system_store_locations-1.0 {
        Get system store locations
    } -body {
        set locs [twapi::cert_system_store_locations]
        expr {
              "CurrentUser" in $locs &&
              "LocalMachine" in $locs &&
              "CurrentService" in $locs
          }
    } -result 1

    ################################################################

    test cert_store_find_certificate-1.0 {
        Find certificate any, system store
    } -setup {
        set hstore [twapi::cert_system_store_open CA]
    } -body {
        set hcert NULL
        set count 0
        while {1} {
            set hcert2 [twapi::cert_store_find_certificate $hstore any "" $hcert]
            if {[llength $hcert2] == 0} break; # Iteration over
            incr count
            # Verify it is a cert
            twapi::cert_subject_name $hcert2
            # Verify previous cert was released but skip if first iter or if
            # the new pointer is same as old (the call might have reused same memory)
            if {$hcert ne "NULL" && $hcert ne $hcert2} {
                if {! [catch {twapi::cert_release $hcert}]} {
                    error "Previous cert was not released"
                }
            }
            set hcert $hcert2
        }
        expr {$count > 5}
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result 1

    test cert_store_find_certificate-1.1 {
        Find certificate any - single cert, file store
    } -setup {
        set hstore [twapi::cert_file_store_open [temp_file_store_path]]
    } -body {
        set hcert NULL
        set count 0
        while {1} {
            set hcert2 [twapi::cert_store_find_certificate $hstore any "" $hcert]
            if {[llength $hcert2] == 0} break; # Iteration over
            incr count
            # Verify it is a cert
            set subj [twapi::cert_subject_name $hcert2]
            # Verify previous cert was released but skip if first iter or if
            # the new pointer is same as old (the call might have reused same memory)
            if {$hcert ne "NULL" && $hcert ne $hcert2} {
                if {! [catch {twapi::cert_release $hcert}]} {
                    error "Previous cert was not released"
                }
            }
            set hcert $hcert2
        }
        list $subj $count
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result {twapitestfull 1}

    test cert_store_find_certificate-1.2 {
        Find certificate any - no cert, memory store
    } -setup {
        set hstore [twapi::cert_temporary_store]
    } -body {
        twapi::cert_store_find_certificate $hstore any ""
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result {}

    test cert_store_find_certificate-2.0 {
        Find certificate -existing
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
        set cert [pick_cert $hstore]
    } -body {
        # Assumes exactly one cert with that pub key
        set cert2 [twapi::cert_store_find_certificate $hstore existing $cert]
        equal_certs $cert $cert2
    } -cleanup {
        twapi::cert_store_release $hstore
        twapi::cert_release $cert
        twapi::cert_release $cert2
    } -result 1

    test cert_store_find_certificate-2.1 {
        Find certificate - existing (fail)
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
        set cert [pick_cert $hstore 0]
        set hstore2 [twapi::cert_file_store_open [temp_file_store_path]]
    } -body {
        twapi::cert_store_find_certificate $hstore2 existing $cert
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
        twapi::cert_store_release $hstore2
    } -result ""

    test cert_store_find_certificate-3.0 {
        Find certificate - issuer_name
    } -setup {
        # Choose CA (Intermediate Auth) so issuer not same as subject
        set hstore [twapi::cert_system_store_open CA]
        set cert [pick_cert $hstore]
        set issuer_name [twapi::cert_issuer_name $cert -name rdn]
    } -body {
        # Assumes exactly one cert with that pub key
        set cert2 [twapi::cert_store_find_certificate $hstore issuer_name [twapi::cert_name_to_blob $issuer_name]]
        string equal $issuer_name [twapi::cert_issuer_name $cert2 -name rdn]
    } -cleanup {
        twapi::cert_store_release $hstore
        twapi::cert_release $cert
        twapi::cert_release $cert2
    } -result 1

    test cert_store_find_certificate-3.1 {
        Find certificate - issuer_name (fail)
    } -setup {
        set hstore [twapi::cert_system_store_open CA]
        set cert [pick_cert $hstore 0]
        set hstore2 [twapi::cert_file_store_open [temp_file_store_path]]
        set issuer_name [twapi::cert_issuer_name $cert -name rdn]
    } -body {
        twapi::cert_store_find_certificate $hstore2 issuer_name [twapi::cert_name_to_blob $issuer_name]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
        twapi::cert_store_release $hstore2
    } -result ""

    test cert_store_find_certificate-3.2 {
        Find certificate - issuer_name (multiple)
    } -setup {
        # Choose CA (Intermediate Auth) so issuer not same as subject
        set hstore [twapi::cert_system_store_open CA]
        # Try to find a issuer with more than one cert
        if {$::tcl_platform(osVersion) eq "5.1"} {
            set issuer_name {OU=Copyright (c) 1997 Microsoft Corp., OU=Microsoft Corporation, CN=Microsoft Root Authority}
        } else {
            set issuer_name {C=US, O="VeriSign, Inc.", OU=VeriSign Trust Network, OU="(c) 2006 VeriSign, Inc. - For authorized use only", CN=VeriSign Class 3 Public Primary Certification Authority - G5}
        }
        set issuer_blob [twapi::cert_name_to_blob $issuer_name]
    } -body {
        set count 0
        set matches 0
        set cert NULL
        while {1} {
            set cert [twapi::cert_store_find_certificate $hstore issuer_name $issuer_blob $cert]
            if {$cert eq ""} break
            incr count
            incr matches [string equal $issuer_name [twapi::cert_issuer_name $cert -name rdn]]
        }
        list [expr {$count > 0}] [expr {$count == $matches}]
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result {1 1}


    test cert_store_find_certificate-4.0 {
        Find certificate - issuer_substring
    } -setup {
        # Choose CA (Intermediate Auth) so issuer not same as subject
        set hstore [twapi::cert_system_store_open CA]
    } -body {
        set cert [twapi::cert_store_find_certificate $hstore issuer_substring microsoft]
        string match -nocase *microsoft* [twapi::cert_issuer_name $cert -name rdn -format simple]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result 1

    test cert_store_find_certificate-4.1 {
        Find certificate - issuer_substring (fail)
    } -setup {
        # Choose CA (Intermediate Auth) so issuer not same as subject
        set hstore [twapi::cert_system_store_open CA]
    } -body {
        twapi::cert_store_find_certificate $hstore issuer_substring XmicrosoftX
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result ""

    test cert_store_find_certificate-4.2 {
        Find certificate - issuer_substring (multiple)
    } -setup {
        # Choose CA (Intermediate Auth) so issuer not same as subject
        set hstore [twapi::cert_system_store_open CA]
    } -body {
        set count 0
        set matches 0
        set cert NULL
        while {1} {
            set cert [twapi::cert_store_find_certificate $hstore issuer_substring geotrust $cert]
            if {$cert eq ""} break
            incr count
            incr matches [string match -nocase *geotrust* [twapi::cert_issuer_name $cert -name rdn]]
        }
        list [expr {$count > 1}] [expr {$count == $matches}]
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result {1 1}

    test cert_store_find_certificate-5.0 {
        Find certificate - key_identifier
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
        set cert [pick_cert $hstore]
        set ki [twapi::cert_property $cert key_identifier]
    } -body {
        # Assumes exactly one cert with that pub key
        set cert2 [twapi::cert_store_find_certificate $hstore key_identifier $ki]
        list [equal_certs $cert $cert2] [string equal $ki [twapi::cert_property $cert2 key_identifier]]
    } -cleanup {
        twapi::cert_store_release $hstore
        twapi::cert_release $cert2
        twapi::cert_release $cert
    } -result {1 1}

    test cert_store_find_certificate-6.0 {
        Find certificate - md5_hash
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
        set cert [pick_cert $hstore]
        set hash [twapi::cert_property $cert md5_hash]
    } -body {
        set cert2 [twapi::cert_store_find_certificate $hstore md5_hash $hash]
        set hash2 [twapi::cert_property $cert2 md5_hash]; # since cert2 will be freed 
        set cert3 [twapi::cert_store_find_certificate $hstore md5_hash $hash $cert2]; # Frees cert2
        list [string equal $hash $hash2] $cert3
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {1 {}}

    test cert_store_find_certificate-6.1 {
        Find certificate - md5_hash (fail)
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
        set cert [pick_cert $hstore]
        set hash [twapi::cert_property $cert md5_hash]
        set hash "[string range $hash 0 end-1]\0"
    } -body {
        twapi::cert_store_find_certificate $hstore md5_hash $hash
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {}

    foreach prop {access_state archived auto_enroll date_stamp description enhkey_usage extended_error_info friendly_name issuer_public_key_md5_hash issuer_serial_number_md5_hash key_context key_identifier key_prov_handle key_prov_info key_spec md5_hash pvk_file sha1_hash signature_hash subject_name_md5_hash subject_public_key_md5_hash} {
        test cert_store_find_certificate-${prop}-7.0 "Find certificate - property $prop" -setup {
            set hstore [twapi::cert_system_store_open CA]
        } -body [format {
            set cert [twapi::cert_store_find_certificate $hstore property %1$s]
            if {$cert ne ""} {
                # Ensure we can get the property with no errors
                twapi::cert_property $cert %1$s
                twapi::cert_release $cert
            }
        } $prop] -cleanup {
            twapi::cert_store_release $hstore
        } -result {}

        test cert_store_find_certificate-${prop}-7.1 "Find certificate - numeric property [twapi::_cert_prop_id $prop]" -setup {
            set hstore [twapi::cert_system_store_open CA]
        } -body [format {
            set cert [twapi::cert_store_find_certificate $hstore property %1$s]
            if {$cert ne ""} {
                # Ensure we can get the property with no errors
                twapi::cert_property $cert %1$s
                twapi::cert_release $cert
            }
        } [twapi::_cert_prop_id $prop]] -cleanup {
            twapi::cert_store_release $hstore
        } -result {}

    }

    test cert_store_find_certificate-7.x {
        TBD - Need better tests for property - above tests just check no errors generated
    } -constraints {
        TBD
    } -setup {
    } -body {
    } -result TBD

    test cert_store_find_certificate-8.0 {
        Find certificate - subject_public_key_md5_hash
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
        set cert [pick_cert $hstore]
        set hash [twapi::cert_property $cert subject_public_key_md5_hash]
    } -body {
        set cert2 [twapi::cert_store_find_certificate $hstore subject_public_key_md5_hash $hash]
        set hash2 [twapi::cert_property $cert2 subject_public_key_md5_hash]; # since cert2 will be freed 
        set cert3 [twapi::cert_store_find_certificate $hstore subject_public_key_md5_hash $hash $cert2]; # Frees cert2
        list [string equal $hash $hash2] $cert3
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {1 {}}

    test cert_store_find_certificate-10.0 {
        Find certificate -public_key
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
        set cert [pick_cert $hstore]
        set pubkey [dict get [twapi::cert_info $cert] -publickey]
    } -body {
        # Assumes exactly one cert with that pub key
        set cert2 [twapi::cert_store_find_certificate $hstore public_key $pubkey]
        equal_certs $cert $cert2
    } -cleanup {
        twapi::cert_store_release $hstore
        twapi::cert_release $cert
        twapi::cert_release $cert2
    } -result 1

    test cert_store_find_certificate-11.0 {
        Find certificate - sha1_hash
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
        set cert [pick_cert $hstore]
        set hash [twapi::cert_property $cert sha1_hash]
    } -body {
        set cert2 [twapi::cert_store_find_certificate $hstore sha1_hash $hash]
        set hash2 [twapi::cert_property $cert2 sha1_hash]; # since cert2 will be freed 
        set cert3 [twapi::cert_store_find_certificate $hstore sha1_hash $hash $cert2]; # Frees cert2
        list [string equal $hash $hash2] $cert3
    } -cleanup {
        twapi::cert_store_release $hstore
        twapi::cert_release $cert
    } -result {1 {}}

    test cert_store_find_certificate-11.1 {
        Find certificate - sha1_hash (fail)
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
        set cert [pick_cert $hstore]
        set hash [twapi::cert_property $cert sha1_hash]
        set hash "[string range $hash 0 end-1]\0"
    } -body {
        twapi::cert_store_find_certificate $hstore sha1_hash $hash
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {}

    test cert_store_find_certificate-12.0 {
        Find certificate - signature_hash
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
        set cert [pick_cert $hstore]
        set hash [twapi::cert_property $cert signature_hash]
    } -body {
        set cert2 [twapi::cert_store_find_certificate $hstore signature_hash $hash]
        set hash2 [twapi::cert_property $cert2 signature_hash]; # since cert2 will be freed 
        set cert3 [twapi::cert_store_find_certificate $hstore signature_hash $hash $cert2]; # Frees cert2
        list [string equal $hash $hash2] $cert3
    } -cleanup {
        twapi::cert_store_release $hstore
        twapi::cert_release $cert
    } -result {1 {}}

    test cert_store_find_certificate-12.1 {
        Find certificate - signature_hash (fail)
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
        set cert [pick_cert $hstore]
        set hash [twapi::cert_property $cert signature_hash]
        set hash "[string range $hash 0 end-1]\0"
    } -body {
        twapi::cert_store_find_certificate $hstore signature_hash $hash
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {}

    test cert_store_find_certificate-13.0 {
        Find certificate - subject_name
    } -setup {
        # Choose CA (Intermediate Auth) so issuer not same as subject
        set hstore [twapi::cert_system_store_open CA]
        set cert [pick_cert $hstore]
        set subject_name [twapi::cert_subject_name $cert -name rdn]
    } -body {
        # Assumes exactly one cert with that pub key
        set cert2 [twapi::cert_store_find_certificate $hstore subject_name [twapi::cert_name_to_blob $subject_name]]
        string equal $subject_name [twapi::cert_subject_name $cert2 -name rdn]
    } -cleanup {
        twapi::cert_store_release $hstore
        twapi::cert_release $cert
        twapi::cert_release $cert2
    } -result 1

    test cert_store_find_certificate-13.1 {
        Find certificate - subject_name (fail)
    } -setup {
        set hstore [twapi::cert_system_store_open CA]
        set cert [pick_cert $hstore 0]
        set hstore2 [twapi::cert_file_store_open [temp_file_store_path]]
        set subject_name [twapi::cert_subject_name $cert -name rdn]
    } -body {
        twapi::cert_store_find_certificate $hstore2 subject_name [twapi::cert_name_to_blob $subject_name]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
        twapi::cert_store_release $hstore2
    } -result ""

    test cert_store_find_certificate-14.0 {
        Find certificate - subject_substring
    } -setup {
        # Choose CA (Intermediate Auth) so issuer not same as subject
        set hstore [twapi::cert_system_store_open CA]
    } -body {
        set cert [twapi::cert_store_find_certificate $hstore subject_substring microsoft]
        string match -nocase *microsoft* [twapi::cert_subject_name $cert -name rdn -format simple]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result 1

    test cert_store_find_certificate-14.1 {
        Find certificate - subject_substring (fail)
    } -setup {
        # Choose CA (Intermediate Auth) so issuer not same as subject
        set hstore [twapi::cert_system_store_open CA]
    } -body {
        twapi::cert_store_find_certificate $hstore subject_substring XmicrosoftX
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result ""

    test cert_store_find_certificate-14.2 {
        Find certificate - subject_substring (multiple)
    } -setup {
        # Choose CA (Intermediate Auth) so issuer not same as subject
        set hstore [twapi::cert_system_store_open CA]
    } -body {
        set count 0
        set matches 0
        set cert NULL
        while {1} {
            set cert [twapi::cert_store_find_certificate $hstore subject_substring verisign $cert]
            if {$cert eq ""} break
            incr count
            incr matches [string match -nocase *verisign* [twapi::cert_subject_name $cert -name rdn]]
        }
        list [expr {$count > 1}] [expr {$count == $matches}]
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result {1 1}

    ################################################################

    test cert_store_enum_contents-1.0 {
        Enum certificate store contents
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
    } -body {
        twapi::cert_release [twapi::cert_store_enum_contents $hstore]
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result {}

    test cert_store_enum_contents-1.1 {
        Enum certificate store contents
    } -setup {
        set hstore [twapi::cert_system_store_open Root]
    } -body {
        set hcert NULL
        set count 0
        while {1} {
            set hcert2 [twapi::cert_store_enum_contents $hstore $hcert]
            if {[llength $hcert2] == 0} break; # Iteration over
            incr count
            # Verify previous cert was released but skip if first iter or if
            # the new pointer is same as old (the call might have reused same memory)
            if {$hcert ne "NULL" && $hcert ne $hcert2} {
                if {! [catch {twapi::cert_release $hcert}]} {
                    error "Previous cert was not released"
                }
            }
            set hcert $hcert2
        }
        expr {$count > 1}
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result 1

    ################################################################

    test cert_store_add_certificate-1.0 {
        Add a certficate to a store
    } -setup {
        
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_store_add_encoded_certificate-1.0 {
        Add DER encoded certificate to store
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cer [sampleencodedcert]
    } -body {
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result twapitestfull

    test cert_store_add_encoded_certificate-1.1 {
        Add PEM encoded certificate to store (pem default)
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cer [samplepemencodedcert]
    } -body {
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result twapitestfull

    test cert_store_add_encoded_certificate-2.0 {
        Add duplicate encoded certificate to store
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cer [sampleencodedcert]
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer]
    } -body {
        list [catch {twapi::cert_store_add_encoded_certificate $hstore $cer}] [errorcode]
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result {1 {TWAPI_WIN32 -2146885627}}

    test cert_store_add_encoded_certificate-2.1 {
        Add duplicate encoded certificate to store -disposition preserve
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cer [sampleencodedcert]
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer -disposition preserve]
    } -body {
        list [catch {twapi::cert_store_add_encoded_certificate $hstore $cer -disposition preserve}] [errorcode]
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result {1 {TWAPI_WIN32 -2146885627}}

    test cert_store_add_encoded_certificate-2.2 {
        Add duplicate encoded certificate to store -disposition overwrite
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cer [samplepemencodedcert]
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer -disposition overwrite]
    } -body {
        set count 0
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer -disposition overwrite]
        twapi::cert_store_iterate $hstore cert {
            set subject [twapi::cert_subject_name $cert]
            incr count
        }
        list $count $subject
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result {1 twapitestfull}

    test cert_store_add_encoded_certificate-2.3 {
        Add duplicate encoded certificate to store -disposition duplicate
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cer [sampleencodedcert]
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer -disposition duplicate]
    } -body {
        set count 0
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer -disposition duplicate]
        twapi::cert_store_iterate $hstore cert {
            set subject [twapi::cert_subject_name $cert]
            incr count
        }
        list $count $subject
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result {2 twapitestfull}

    test cert_store_add_encoded_certificate-2.4 {
        Add duplicate encoded certificate to store -disposition update
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cer [sampleencodedcert]
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer -disposition update]
    } -body {
        list [catch {twapi::cert_store_add_encoded_certificate $hstore $cer -disposition update}] [errorcode]
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result {1 {TWAPI_WIN32 -2146885627}}

    test cert_store_add_encoded_certificate-2.5 {
        Add duplicate encoded certificate to store -disposition update (newer cert)
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cer [sampleencodedcert]
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer -disposition update]
    } -constraints {
        TBD - need to generate same cert with newer validity
    } -body {
        # TBD need to add a newer cert, not the same one
        set count 0
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer -disposition update]
        twapi::cert_store_iterate $hstore cert {
            set subject [twapi::cert_subject_name $hcert]
            incr count
        }
        list $count $subject
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result {1 twapitestfull}

    test cert_store_add_encoded_certificate-3.0 {
        Add encoded certificate to store -encoding der
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cer [sampleencodedcert]
    } -body {
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $cer -encoding der]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result twapitestfull

    test cert_store_add_encoded_certificate-3.1 {
        Add encoded certificate to store -encoding pem
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set pem [googleencodedcert]
    } -body {
        twapi::cert_release [twapi::cert_store_add_encoded_certificate $hstore $pem -encoding pem]
        set hcert [twapi::cert_store_enum_contents $hstore]
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
        twapi::cert_store_release $hstore
    } -result *.google.com

    ################################################################

    test cert_store_export_pfx-1.0 {
        Export a certificate store with empty password
    } -body {
        twapi::PFXIsPFXBlob [twapi::cert_store_export_pfx [samplestore] ""]
    } -result 1

    test cert_store_export_pfx-1.1 {
        Export a certificate store with empty password - openssl
    } -body {
        set path [write_test_file [twapi::cert_store_export_pfx [samplestore] ""]]
        lassign [openssl pkcs12 -in $path -info -passin pass:] stdout stderr
        list \
            [regexp -all {issuer=/CN=twapitest(ca|intermediate)/C=IN/O=Tcl/OU=twapi} $stdout] \
            [regexp -all {Certificate bag} $stderr] 
    } -result {7 7}

    test cert_store_export_pfx-2.0 {
        Export a certificate store with non empty password
    } -body {
        twapi::PFXIsPFXBlob [twapi::cert_store_export_pfx [samplestore] [twapi::conceal pkcspass]]
    } -result 1

    test cert_store_export_pfx-2.1 {
        Export a certificate store with password - openssl
    } -body {
        set path [write_test_file [twapi::cert_store_export_pfx [samplestore] [twapi::conceal pkcspass]]]
        lassign [openssl pkcs12 -in $path -info -passin pass:pkcspass] stdout stderr
        list \
            [regexp -all {issuer=/CN=twapitest(ca|intermediate)/C=IN/O=Tcl/OU=twapi} $stdout] \
            [regexp -all {Certificate bag} $stderr] 
    } -result {7 7}

    test cert_store_export_pfx-2.2 {
        Export a certificate store with password - openssl (fail)
    } -body {
        set path [write_test_file [twapi::cert_store_export_pfx [samplestore] [twapi::conceal pkcspass]]]
        openssl pkcs12 -in $path -info -passin pass:
    } -result {*invalid password*} -match glob -returnCodes error

    test cert_store_export_pfx-2.3 {
        Export a certificate store with password - openssl (fail)
    } -body {
        set path [write_test_file [twapi::cert_store_export_pfx [samplestore] [twapi::conceal pkcspass]]]
        openssl pkcs12 -in $path -info -passin pass:PKCSPASS
    } -result {*invalid password*} -match glob -returnCodes error

    test cert_store_export_pfx-3.0 {
        Export a certificate store with non empty password -exportprivatekeys false
    } -body {
        twapi::PFXIsPFXBlob [twapi::cert_store_export_pfx [samplestore] [twapi::conceal pkcspass] -exportprivatekeys 0]
    } -result 1

    test cert_store_export_pfx-3.1 {
        Export a certificate store with password - -exportprivatekeys false, openssl
    } -body {
        set path [write_test_file [twapi::cert_store_export_pfx [storewithkeys] [twapi::conceal pkcspass] -exportprivatekeys false]]
        lassign [openssl pkcs12 -in $path -info -passin pass:pkcspass -noout] stdout stderr
        list [llength [regexp -all -inline "Shrouded Keybag" $stderr]] [llength [regexp -all -inline "Certificate bag" $stderr]] 
    } -result {0 7}

    test cert_store_export_pfx-3.2 {
        Export a certificate store with password - -exportprivatekeys 1, openssl
    } -body {
        set path [write_test_file [twapi::cert_store_export_pfx [storewithkeys] [twapi::conceal pkcspass] -exportprivatekeys 1]]
        lassign [openssl pkcs12 -in $path -info -passin pass:pkcspass -noout] stdout stderr
        list [llength [regexp -all -inline "Shrouded Keybag" $stderr]] [llength [regexp -all -inline "Certificate bag" $stderr]] 
    } -result {7 7}

    test cert_store_export_pfx-4.0 {
        Export a certificate store -failonmissingkey
    } -constraints {
        TBD
    } -body {
        TBD - cannot generate a test case that tests this. Export always succeeds with private key exported even when crypt_acquire and cert_locate_private_key indicate key does not exist
    } -result TBD

    test cert_store_export_pfx-5.0 {
        Export a certificate store -failonunexportablekey
    } -constraints {
        TBD
    } -body {
        TBD - cannot generate a test case that tests this. Export always succeeds with private key exported even when crypt_acquire and cert_locate_private_key indicate key does not exist
    } -result TBD


    ################################################################

    test cert_store_export_pkcs12-1.0 {
        Export a certificate store with password - -exportprivatekeys 1, openssl
    } -body {
        set path [write_test_file [twapi::cert_store_export_pkcs12 [storewithkeys] [twapi::conceal pkcspass] -exportprivatekeys 1]]
        lassign [openssl pkcs12 -in $path -info -passin pass:pkcspass -noout] stdout output
        list [llength [regexp -all -inline "Shrouded Keybag" $output]] [llength [regexp -all -inline "Certificate bag" $output]] 
    } -result {7 7}

    ################################################################

    test cert_store_export_pkcs7-1.0 {
        Export a certificate store as pkcs7
    } -body {
        set path [write_test_file [twapi::cert_store_export_pkcs7 [samplestore]]]
        lassign [openssl pkcs7 -in $path -noout -inform pem -print_certs] output stderr
        llength [regexp -inline -all {subject=/CN=twapitest} $output]
    } -result 6

    test cert_store_export_pkcs7-2.0 {
        Export a certificate store as pkcs7 -encoding der
    } -body {
        set path [write_test_file [twapi::cert_store_export_pkcs7 [samplestore] -encoding der]]
        lassign [openssl pkcs7 -in $path -noout -inform der -print_certs] output stderr
        llength [regexp -inline -all {subject=/CN=twapitest} $output]
    } -result 6

    test cert_store_export_pkcs7-2.1 {
        Export a certificate store as pkcs7 -encoding pem
    } -body {
        set path [write_test_file [twapi::cert_store_export_pkcs7 [samplestore] -encoding pem]]
        lassign [openssl pkcs7 -in $path -noout -print_certs] output stderr
        llength [regexp -inline -all {subject=/CN=twapitest} $output]
    } -result 6

    ################################################################

    test cert_pkcs7_store_open {
        Open a pkcs 7 certificate store
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_store_serialize {
        Serialize a certificate store
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_store_commit {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_subject_name-1.0 {
        Get certificate subject name
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
    } -result twapitestfull

    test cert_subject_name-1.1 {
        Get certificate subject -name dns
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name dns
    } -cleanup {
        twapi::cert_release $hcert
    } -result full.twapitest.com

    test cert_subject_name-1.2 {
        Get certificate subject -name email
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name email
    } -cleanup {
        twapi::cert_release $hcert
    } -result twapitestfull@twapitest.com

    test cert_subject_name-1.3 {
        Get certificate subject name friendlydisplay
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name friendlydisplay
    } -cleanup {
        twapi::cert_release $hcert
    } -result twapitestfull

    test cert_subject_name-1.4 {
        Get certificate subject name simpledisplay
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name simpledisplay
    } -cleanup {
        twapi::cert_release $hcert
    } -result twapitestfull

    test cert_subject_name-1.5 {
        Get certificate subject name oid_common_name
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name oid_common_name
    } -cleanup {
        twapi::cert_release $hcert
    } -result twapitestfull

    test cert_subject_name-1.6 {
        Get certificate subject name rdn
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestfull, C=IN, O=Tcl, OU=twapi"

    test cert_subject_name-1.7 {
        Get certificate subject name upn
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name upn
    } -cleanup {
        twapi::cert_release $hcert
    } -result ""

    test cert_subject_name-1.8 {
        Get certificate subject name url
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name url
    } -cleanup {
        twapi::cert_release $hcert
    } -result http://twapitestfull.twapitest.com

    test cert_subject_name-2.0 {
        Get certificate subject name rdn -format x500
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -format x500
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestfull, C=IN, O=Tcl, OU=twapi"

    test cert_subject_name-2.1 {
        Get certificate subject name rdn -format oid
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -format oid
    } -cleanup {
        twapi::cert_release $hcert
    } -result "2.5.4.3=twapitestfull, 2.5.4.6=IN, 2.5.4.10=Tcl, 2.5.4.11=twapi"


    test cert_subject_name-2.2 {
        Get certificate subject name rdn -format simple
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -format simple
    } -cleanup {
        twapi::cert_release $hcert
    } -result "twapitestfull, IN, Tcl, twapi"

    test cert_subject_name-3.0 {
        Get certificate subject name rdn -format x500 -separator comma
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -format x500 -separator comma
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestfull, C=IN, O=Tcl, OU=twapi"

    test cert_subject_name-3.1 {
        Get certificate subject name rdn -format oid -separator semicolon
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -format oid -separator semicolon
    } -cleanup {
        twapi::cert_release $hcert
    } -result "2.5.4.3=twapitestfull; 2.5.4.6=IN; 2.5.4.10=Tcl; 2.5.4.11=twapi"

    test cert_subject_name-3.2 {
        Get certificate subject name rdn -format simple -format newline
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -format simple -separator newline
    } -cleanup {
        twapi::cert_release $hcert
    } -result "twapitestfull\r\nIN\r\nTcl\r\ntwapi"

    test cert_subject_name-4.0 {
        Get certificate subject name rdn -format x500 -reverse 0
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -format x500 -reverse 0
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestfull, C=IN, O=Tcl, OU=twapi"

    test cert_subject_name-4.1 {
        Get certificate subject name rdn -reverse 1
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -reverse 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "OU=twapi, O=Tcl, C=IN, CN=twapitestfull"

    test cert_subject_name-5.0 {
        Get certificate subject name rdn -format x500 -noplus 0
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -format x500 -noplus 0
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestfull, C=IN, O=Tcl, OU=twapi"

    test cert_subject_name-5.1 {
        Get certificate subject name rdn -format x500 -noplus 1
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -format x500 -noplus 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestfull, C=IN, O=Tcl, OU=twapi"

    test cert_subject_name-5.2 {
        Get certificate subject name rdn -format x500 -noplus 1 - need a cert with a plus in the name
    } -constraints {
        TBD
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -format x500 -noplus 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestfull, C=IN, O=Tcl, OU=twapi"

    test cert_subject_name-6.0 {
        Get certificate subject name rdn -noquote 0
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -noquote 0
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestfull, C=IN, O=Tcl, OU=twapi"

    test cert_subject_name-6.1 {
        Get certificate subject name rdn -noquote 1
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -noquote 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestfull, C=IN, O=Tcl, OU=twapi"

    test cert_subject_name-6.2 {
        Get certificate subject name rdn -noquote 1 - need a cert with a special char in the name
    } -constraints {
        TBD
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -noquote 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestfull, C=IN, O=Tcl, OU=twapi"

    test cert_subject_name-7.0 {
        Get certificate subject name from property - need a cert with a subject name property
    } -constraints {
        TBD
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_subject_name $hcert -name rdn -noquote 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestfull, C=IN, O=Tcl, OU=twapi"

    ################################################################

    test cert_issuer_name-1.0 {
        Get certificate issuer name
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert
    } -cleanup {
        twapi::cert_release $hcert
    } -result twapitestca

    test cert_issuer_name-1.1 {
        Get certificate issuer -name dns
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name dns
    } -cleanup {
        twapi::cert_release $hcert
    } -result twapitestca.twapitest.com

    test cert_issuer_name-1.2 {
        Get certificate issuer -name email
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name email
    } -cleanup {
        twapi::cert_release $hcert
    } -result twapitestca@twapitest.com

    test cert_issuer_name-1.3 {
        Get certificate issuer name friendlydisplay
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name friendlydisplay
    } -cleanup {
        twapi::cert_release $hcert
    } -result twapitestca

    test cert_issuer_name-1.4 {
        Get certificate issuer name simpledisplay
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name simpledisplay
    } -cleanup {
        twapi::cert_release $hcert
    } -result twapitestca

    test cert_issuer_name-1.5 {
        Get certificate issuer name oid_common_name
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name oid_common_name
    } -cleanup {
        twapi::cert_release $hcert
    } -result twapitestca

    test cert_issuer_name-1.6 {
        Get certificate issuer name rdn
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestca, C=IN, O=Tcl, OU=twapi"

    test cert_issuer_name-1.7 {
        Get certificate issuer name upn
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name upn
    } -cleanup {
        twapi::cert_release $hcert
    } -result ""

    test cert_issuer_name-1.8 {
        Get certificate issuer name url
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name url
    } -cleanup {
        twapi::cert_release $hcert
    } -result http://twapitestca.twapitest.com

    test cert_issuer_name-2.0 {
        Get certificate issuer name rdn -format x500
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -format x500
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestca, C=IN, O=Tcl, OU=twapi"


    test cert_issuer_name-2.1 {
        Get certificate issuer name rdn -format oid
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -format oid
    } -cleanup {
        twapi::cert_release $hcert
    } -result "2.5.4.3=twapitestca, 2.5.4.6=IN, 2.5.4.10=Tcl, 2.5.4.11=twapi"


    test cert_issuer_name-2.2 {
        Get certificate issuer name rdn -format simple
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -format simple
    } -cleanup {
        twapi::cert_release $hcert
    } -result "twapitestca, IN, Tcl, twapi"

    test cert_issuer_name-3.0 {
        Get certificate issuer name rdn -format x500 -separator comma
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -format x500 -separator comma
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestca, C=IN, O=Tcl, OU=twapi"

    test cert_issuer_name-3.1 {
        Get certificate issuer name rdn -format oid -separator semicolon
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -format oid -separator semicolon
    } -cleanup {
        twapi::cert_release $hcert
    } -result "2.5.4.3=twapitestca; 2.5.4.6=IN; 2.5.4.10=Tcl; 2.5.4.11=twapi"

    test cert_issuer_name-3.2 {
        Get certificate issuer name rdn -format simple -format newline
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -format simple -separator newline
    } -cleanup {
        twapi::cert_release $hcert
    } -result "twapitestca\r\nIN\r\nTcl\r\ntwapi"

    test cert_issuer_name-4.0 {
        Get certificate issuer name rdn -format x500 -reverse 0
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -format x500 -reverse 0
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestca, C=IN, O=Tcl, OU=twapi"

    test cert_issuer_name-4.1 {
        Get certificate issuer name rdn -reverse 1
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -reverse 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "OU=twapi, O=Tcl, C=IN, CN=twapitestca"

    test cert_issuer_name-5.0 {
        Get certificate issuer name rdn -format x500 -noplus 0
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -format x500 -noplus 0
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestca, C=IN, O=Tcl, OU=twapi"

    test cert_issuer_name-5.1 {
        Get certificate issuer name rdn -format x500 -noplus 1
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -format x500 -noplus 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestca, C=IN, O=Tcl, OU=twapi"

    test cert_issuer_name-5.2 {
        Get certificate issuer name rdn -format x500 -noplus 1 - need a cert with a plus in the name
    } -constraints {
        TBD 
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -format x500 -noplus 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestca, C=IN, O=Tcl, OU=twapi"

    test cert_issuer_name-6.0 {
        Get certificate issuer name rdn -noquote 0
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -noquote 0
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestca, C=IN, O=Tcl, OU=twapi"

    test cert_issuer_name-6.1 {
        Get certificate issuer name rdn -noquote 1
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -noquote 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestca, C=IN, O=Tcl, OU=twapi"

    test cert_issuer_name-6.2 {
        Get certificate issuer name rdn -noquote 1 - need a cert with a special char in the name
    } -constraints {
        TBD 
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -noquote 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestca, C=IN, O=Tcl, OU=twapi"

    test cert_issuer_name-7.0 {
        Get certificate issuer name from property - need a cert with a issuer name property
    } -constraints {
        TBD
    } -setup {
        set hcert [samplecert]
    } -body {
        twapi::cert_issuer_name $hcert -name rdn -noquote 1
    } -cleanup {
        twapi::cert_release $hcert
    } -result "CN=twapitestca, C=IN, O=Tcl, OU=twapi"

    ################################################################

    test blob_name_conversion-1.0 {
        Convert name blob to a string
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"}]
    } -result "CN=Common Name, C=Country, O=Organization, OU=Organizational Unit"

    test blob_name_conversion-1.1 {
        Convert name blob to a string -format x500
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"}] -format x500
    } -result "CN=Common Name, C=Country, O=Organization, OU=Organizational Unit"

    test blob_name_conversion-1.2 {
        Convert name blob to a string -format oid
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"}] -format oid
    } -result "2.5.4.3=Common Name, 2.5.4.6=Country, 2.5.4.10=Organization, 2.5.4.11=Organizational Unit"

    test blob_name_conversion-1.3 {
        Convert name blob to a string -format simple
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"}] -format simple
    } -result "Common Name, Country, Organization, Organizational Unit"

    test blob_name_conversion-2.0 {
        Convert name blob to a string -reverse false
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"}] -reverse false
    } -result "CN=Common Name, C=Country, O=Organization, OU=Organizational Unit"

    test blob_name_conversion-2.1 {
        Convert name blob to a string -reverse true
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"}] -reverse true
    } -result "OU=Organizational Unit, O=Organization, C=Country, CN=Common Name"

    test blob_name_conversion-3.0 {
        Convert name blob to a string -separator comma
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"}] -separator comma
    } -result "CN=Common Name, C=Country, O=Organization, OU=Organizational Unit"

    test blob_name_conversion-3.1 {
        Convert name blob to a string -separator semi
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"}] -separator semi
    } -result "CN=Common Name; C=Country; O=Organization; OU=Organizational Unit"

    test blob_name_conversion-3.2 {
        Convert name blob to a string -separator newline
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"}] -separator newline
    } -result "CN=Common Name\r\nC=Country\r\nO=Organization\r\nOU=Organizational Unit"

    test blob_name_conversion-4.0 {
        Convert name blob to a string -noquote true,false
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"} -noquote true] -noquote false
    } -result {CN=Common Name, C=Country, O=Organization, OU="""Organizational Unit"""}

    test blob_name_conversion-4.1 {
        Convert name blob to a string -noquote true,true
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"} -noquote true] -noquote true
    } -result {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"}

    test blob_name_conversion-4.2 {
        Convert name blob to a string -noquote false,false
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"} -noquote false] -noquote false
    } -result {CN=Common Name, C=Country, O=Organization, OU=Organizational Unit}

    test blob_name_conversion-4.3 {
        Convert name blob to a string -noquote false,true
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"} -noquote false] -noquote true
    } -result {CN=Common Name, C=Country, O=Organization, OU=Organizational Unit}

    test blob_name_conversion-4.4 {
        Convert name blob to a string -noquote false,default
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"} -noquote false]
    } -result {CN=Common Name, C=Country, O=Organization, OU=Organizational Unit}

    test blob_name_conversion-4.5 {
        Convert name blob to a string -noquote true,default
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob {CN=Common Name, C=Country, O=Organization, OU="Organizational Unit"} -noquote true]
    } -result {CN=Common Name, C=Country, O=Organization, OU="""Organizational Unit"""}

    test blob_name_conversion-5.0 {
        Convert name blob to string -noplus false,false
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob "CN=A+CN=B, O=Org" -noplus false] -noplus false
    } -result "CN=A + CN=B, O=Org"

    test blob_name_conversion-5.1 {
        Convert name blob to string -noplus false,true
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob "CN=A+CN=B, O=Org" -noplus false] -noplus true
    } -result "CN=A CN=B, O=Org"

    test blob_name_conversion-5.2 {
        Convert name blob to string -noplus true,false
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob "CN=A+CN=B, O=Org" -noplus true] -noplus false
    } -result {CN="A+CN=B", O=Org}

    test blob_name_conversion-5.3 {
        Convert name blob to string -noplus true,true
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob "CN=A+CN=B, O=Org" -noplus true] -noplus true
    } -result {CN="A+CN=B", O=Org}
                              
    test blob_name_conversion-5.4 {
        Convert name blob to string -noplus false,default
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob "CN=A+CN=B, O=Org" -noplus false]
    } -result "CN=A + CN=B, O=Org"

    test blob_name_conversion-5.2 {
        Convert name blob to string -noplus true,default
    } -body {
        twapi::cert_blob_to_name [twapi::cert_name_to_blob "CN=A+CN=B, O=Org" -noplus true]
    } -result {CN="A+CN=B", O=Org}

    ################################################################

    test cert_enum_properties-1.0 {
        Enumerate certificate properties
    } -setup {
        set hstore [twapi::cert_system_store_open CA user -readonly 1]
    } -body {
        set count 0
        twapi::cert_store_iterate $hstore hcert {
            foreach prop [twapi::cert_enum_properties $hcert] {
                twapi::cert_property $hcert $prop
            }
        }
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result ""

    test cert_enum_properties-1.1 {
        Enumerate certificate properties -names
    } -setup {
        set hstore [twapi::cert_system_store_open Root user -readonly 1]
    } -body {
        set count 0
        twapi::cert_store_iterate $hstore hcert {
            foreach prop [twapi::cert_enum_properties $hcert -names] {
                twapi::cert_property $hcert $prop
            }
        }
    } -cleanup {
        twapi::cert_store_release $hstore
    } -result ""

    ################################################################

    test cert_property {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_property_set-1.0 {
        Set certificate property friendly_name
    } -setup {
        set hstore [twapi::cert_file_store_open [temp_file_store_path]]
        set cert [pick_cert $hstore 0]
    } -body {
        twapi::cert_property_set $cert friendly_name "Cert friendly name"
        twapi::cert_release $cert
        twapi::cert_store_release $hstore

        set hstore [twapi::cert_file_store_open [temp_file_store_path]]
        set cert [pick_cert $hstore 0]
        twapi::cert_property $cert friendly_name
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result  "Cert friendly name"

    test cert_property_set-2.0 {
        Set certificate property description
    } -setup {
        set hstore [twapi::cert_file_store_open [temp_file_store_path]]
        set cert [pick_cert $hstore 0]
    } -body {
        twapi::cert_property_set $cert description "Cert description"
        twapi::cert_release $cert
        twapi::cert_store_release $hstore

        set hstore [twapi::cert_file_store_open [temp_file_store_path]]
        set cert [pick_cert $hstore 0]
        twapi::cert_property $cert description
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result  "Cert description"

    test cert_property_set-3.0 {
        Set certificate property pvk_file
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    test cert_property_set-4.0 {
        Set certificate property enhkey_usage
    } -setup {
        set hstore [twapi::cert_file_store_open [temp_file_store_path]]
        set cert [pick_cert $hstore 0]
    } -body {
        twapi::cert_property_set $cert enhkey_usage {server_auth client_auth code_signing}
        twapi::cert_release $cert
        twapi::cert_store_release $hstore

        set hstore [twapi::cert_file_store_open [temp_file_store_path]]
        set cert [pick_cert $hstore 0]
        twapi::cert_enhkey_usage $cert property
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {server_auth client_auth code_signing}

    ################################################################

    test cert_property_delete {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_set_key_prov {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_export_import-1.0 {
        Export and import certificates
    } -setup {
        set cert [samplecert]
    } -body {
        set cert2 [twapi::cert_import [twapi::cert_export $cert]]
        string equal [twapi::cert_thumbprint $cert] [twapi::cert_thumbprint $cert2]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_release $cert2
    } -result 1

    test cert_export_import-1.1.0 {
        Export and import certificates (der, default)
    } -setup {
        set cert [samplecert]
    } -body {
        set cert2 [twapi::cert_import [twapi::cert_export $cert -encoding der]]
        string equal [twapi::cert_thumbprint $cert] [twapi::cert_thumbprint $cert2]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_release $cert2
    } -result 1

    test cert_export_import-1.1.1 {
        Export and import certificates (pem, default)
    } -setup {
        set cert [samplecert]
    } -body {
        set cert2 [twapi::cert_import [twapi::cert_export $cert -encoding pem]]
        string equal [twapi::cert_thumbprint $cert] [twapi::cert_thumbprint $cert2]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_release $cert2
    } -result 1

    test cert_export_import-1.2 {
        Export and import certificates (default, pem)
    } -setup {
        set cert [samplecert]
    } -body {
        set cert2 [twapi::cert_import [twapi::cert_export $cert] -encoding pem]
        string equal [twapi::cert_thumbprint $cert] [twapi::cert_thumbprint $cert2]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_release $cert2
    } -result 1

    test cert_export_import-1.3 {
        Export and import certificates (der, der)
    } -setup {
        set cert [samplecert]
    } -body {
        set cert2 [twapi::cert_import [twapi::cert_export $cert -encoding der] -encoding der]
        string equal [twapi::cert_thumbprint $cert] [twapi::cert_thumbprint $cert2]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_release $cert2
    } -result 1

    test cert_export_import-2.0 {
        Export and import certificates (pem, pem)
    } -setup {
        set cert [samplecert]
    } -body {
        set cert2 [twapi::cert_import [twapi::cert_export $cert -encoding pem] -encoding pem]
        string equal [twapi::cert_thumbprint $cert] [twapi::cert_thumbprint $cert2]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_release $cert2
    } -result 1

    ################################################################

    test cert_enhkey_usage-1.0 {
        Cert enhanced key usage
    } -setup {
        set cert [samplecert]
    } -body {
        lsort [twapi::cert_enhkey_usage $cert]
    } -cleanup {
        twapi::cert_release $cert
    } -result {client_auth code_signing email_protection ipsec_end_system ipsec_tunnel ipsec_user ocsp_signing server_auth timestamp_signing}

    test cert_enhkey_usage-1.1 {
        Cert enhanced key usage - property (not present)
    } -setup {
        set cert [samplecert]
    } -body {
        lsort [twapi::cert_enhkey_usage $cert property]
    } -cleanup {
        twapi::cert_release $cert
    } -result *

    test cert_enhkey_usage-1.2 {
        Cert enhkey usage - extension not present
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cert [twapi::cert_store_add_encoded_certificate $hstore [sampleencodedcert min]]
    } -body {
        lsort [twapi::cert_enhkey_usage $cert]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result *

    test cert_enhkey_usage-1.3 {
        Cert enhkey usage - extension, extension not present
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cert [twapi::cert_store_add_encoded_certificate $hstore [sampleencodedcert min]]
    } -body {
        lsort [twapi::cert_enhkey_usage $cert extension]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result *

    test cert_enhkey_usage-2.0 {
        Cert enhkey usage (property)
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cert [twapi::cert_store_add_encoded_certificate $hstore [sampleencodedcert min]]
        twapi::cert_property_set $cert enhkey_usage {server_auth code_signing}
    } -body {
        lsort [twapi::cert_enhkey_usage $cert]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {code_signing server_auth}

    test cert_enhkey_usage-2.1 {
        Cert enhkey usage (property)
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cert [twapi::cert_store_add_encoded_certificate $hstore [sampleencodedcert]]
        twapi::cert_property_set $cert enhkey_usage {server_auth code_signing}
    } -body {
        lsort [twapi::cert_enhkey_usage $cert]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {code_signing server_auth}

    test cert_enhkey_usage-2.2 {
        Cert enhkey usage (property, both)
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cert [twapi::cert_store_add_encoded_certificate $hstore [sampleencodedcert]]
        twapi::cert_property_set $cert enhkey_usage {server_auth code_signing}
    } -body {
        lsort [twapi::cert_enhkey_usage $cert both]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {code_signing server_auth}

    test cert_enhkey_usage-2.3 {
        Cert enhkey usage (property, propertyonly)
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cert [twapi::cert_store_add_encoded_certificate $hstore [sampleencodedcert min]]
        twapi::cert_property_set $cert enhkey_usage {server_auth code_signing}
    } -body {
        lsort [twapi::cert_enhkey_usage $cert property]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {code_signing server_auth}

    test cert_enhkey_usage-2.4 {
        Cert enhkey usage (property, propertyonly)
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cert [twapi::cert_store_add_encoded_certificate $hstore [sampleencodedcert]]
        twapi::cert_property_set $cert enhkey_usage {server_auth code_signing}
    } -body {
        lsort [twapi::cert_enhkey_usage $cert property]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {code_signing server_auth}

    test cert_enhkey_usage-2.5 {
        Cert enhkey usage (property, extension)
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cert [twapi::cert_store_add_encoded_certificate $hstore [sampleencodedcert min]]
        twapi::cert_property_set $cert enhkey_usage {server_auth code_signing}
    } -body {
        lsort [twapi::cert_enhkey_usage $cert extension]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result *

    test cert_enhkey_usage-2.6 {
        Cert enhkey usage (property, extension)
    } -setup {
        set hstore [twapi::cert_temporary_store]
        set cert [twapi::cert_store_add_encoded_certificate $hstore [sampleencodedcert]]
        twapi::cert_property_set $cert enhkey_usage {server_auth code_signing}
    } -body {
        lsort [twapi::cert_enhkey_usage $cert extension]
    } -cleanup {
        twapi::cert_release $cert
        twapi::cert_store_release $hstore
    } -result {client_auth code_signing email_protection ipsec_end_system ipsec_tunnel ipsec_user ocsp_signing server_auth timestamp_signing}

    ################################################################

    test cert_key_usage {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_thumbprint-1.0 {
        Certificate thumbprint
    } -setup {
        set cert [samplecert]
    } -body {
        twapi::cert_thumbprint $cert
    } -cleanup {
        twapi::cert_release $cert
    } -result 20ad48b8edc2e6902b6605f2c40a96f1b38a4cdb

    ################################################################

    test cert_info {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_extension {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_create_self_signed {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_create_self_signed_from_crypt_context {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_create {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test cert_request_create-1.0 {
        Create a certificate request for a TLS client (DER)
    } -setup {
        set subject twapitest-[clock microseconds]
        set crypt [twapi::crypt_acquire $subject -create 1]
        twapi::crypt_key_free [twapi::crypt_generate_key $crypt keyexchange -exportable 1]
    } -body {
        set x509_name "CN=$subject SSL Client, O=Twapi Open Source, OU=test"
        set req [twapi::cert_request_create $x509_name $crypt keyexchange -purpose client -encoding der]
        set path [write_test_file $req wb]
        lassign [openssl req -inform der -in $path -noout -text -verify] stdout stderr
        list [regexp "Certificate Request:.+Subject: $x509_name.+X509v3 Basic Constraints: critical.+CA:FALSE.+X509v3 Key Usage: critical.+Digital Signature, Key Encipherment, Key Agreement\n.+X509v3 Extended Key Usage: critical.+TLS Web Client Authentication\n.+" $stdout] \
            [string match "*verify OK*" $stderr]
    } -result {1 1}
    
    test cert_request_create-1.1 {
        Create a certificate request for a TLS server (PEM)
    } -setup {
        set subject twapitest-[clock microseconds]
        set crypt [twapi::crypt_acquire $subject -create 1]
        twapi::capi_key_free [twapi::crypt_generate_key $crypt keyexchange -exportable 1]
    } -body {
        set x509_name "CN=$subject SSL Server, O=Twapi Open Source, OU=test"
        set req [twapi::cert_request_create $x509_name $crypt keyexchange -purpose server -encoding pem]
        set path [write_test_file $req w]
        lassign [openssl req -in $path -noout -text -verify] stdout stderr
        list [regexp "Certificate Request:.+Subject: $x509_name.+X509v3 Basic Constraints: critical.+CA:FALSE.+X509v3 Key Usage: critical.+Digital Signature, Key Encipherment, Key Agreement\n.+X509v3 Extended Key Usage: critical.+TLS Web Server Authentication\n" $stdout] \
            [string match "*verify OK*" $stderr]
    } -result {1 1}
    
    test cert_request_create-1.2 {
        Create a certificate request with no options
    } -setup {
        set subject twapitest-[clock microseconds]
        set crypt [twapi::crypt_acquire $subject -create 1]
        twapi::capi_key_free [twapi::crypt_generate_key $crypt keyexchange -exportable 1]
    } -body {
        set x509_name "CN=$subject No Options, O=Twapi Open Source, OU=test"
        set req [twapi::cert_request_create $x509_name $crypt keyexchange]
        set path [write_test_file $req wb]
        lassign [openssl req -in $path -inform pem -noout -text -verify] stdout stderr
        list [regexp "Certificate Request:.+Subject: $x509_name.+X509v3 Basic Constraints: critical.+CA:FALSE\\s+Signature Algorithm:" $stdout] \
            [string match "*verify OK*" $stderr]
    } -result {1 1}

    test cert_request_create-1.3 {
        Create a full certificate request (PEM)
    } -setup {
        set subject twapitest-[clock microseconds]
        set crypt [twapi::crypt_acquire $subject -create 1]
        twapi::capi_key_free [twapi::crypt_generate_key $crypt keyexchange -exportable 1]
    } -body {
        set x509_name "CN=$subject Full, O=Twapi Open Source, OU=test"
        set altnames [list [list [list email ${subject}@twapitest.com] [list dns ${subject}.twapitest.com] [list url http://${subject}.twapitest.com] [list directory [twapi::cert_name_to_blob "CN=${subject}altname"]] [list ip [binary format c4 {127 0 0 1}]]]]
        set req [twapi::cert_request_create $x509_name $crypt keyexchange \
                     -encoding pem \
                     -keyusage [list {crl_sign data_encipherment digital_signature key_agreement key_cert_sign key_encipherment non_repudiation} 1] \
                     -enhkeyusage [list {client_auth code_signing email_protection ipsec_end_system  ipsec_tunnel ipsec_user server_auth timestamp_signing ocsp_signing} 0] \
                     -altnames $altnames]
        set path [write_test_file $req w]
        lassign [openssl req -in $path -noout -text -verify] stdout stderr
        
        # Single regexp overflows the stack so we need break it up
        list [regexp "Certificate Request:.+Subject: $x509_name.+X509v3 Basic Constraints: critical.+CA:FALSE.+X509v3 Key Usage: critical.+Digital Signature, Non Repudiation, Key Encipherment, Data Encipherment, Key Agreement, Certificate Sign, CRL Sign\\s+X509v3 Extended Key Usage:\\s+OCSP Signing, TLS Web Server Authentication, IPSec End System, IPSec Tunnel, TLS Web Client Authentication, IPSec User, Code Signing, Time Stamping, E-mail Protection\\s" $stdout] \
            [regexp ".+X509v3 Subject Alternative Name:.+email:${subject}@twapitest.com, DNS:${subject}.twapitest.com, URI:http://${subject}.twapitest.com, DirName:/CN=${subject}altname, IP Address:127.0.0.1" $stdout] \
            [string match "*verify OK*" $stderr]
    } -result {1 1 1}


    ################################################################

    test cert_request_parse-1.0 {
        Parse a certificate request
    } -setup {
        set subject twapitest-[clock microseconds]
        set crypt [twapi::crypt_acquire $subject -create 1]
        twapi::capi_key_free [twapi::crypt_generate_key $crypt keyexchange -exportable 1]
        set x509_name "CN=$subject Full, O=Twapi Open Source, OU=test"
        set altnames [list [list [list email ${subject}@twapitest.com] [list dns ${subject}.twapitest.com] [list url http://${subject}.twapitest.com] [list directory [twapi::cert_name_to_blob "CN=${subject}altname"]] [list ip [binary format c4 {127 0 0 1}]]]]
        set req [twapi::cert_request_create $x509_name $crypt keyexchange \
                     -encoding der \
                     -keyusage [list {crl_sign data_encipherment digital_signature key_agreement key_cert_sign key_encipherment non_repudiation} 1] \
                     -enhkeyusage [list {client_auth code_signing email_protection ipsec_end_system  ipsec_tunnel ipsec_user server_auth timestamp_signing ocsp_signing} 0] \
                     -altnames $altnames]
    } -body {
        set csr [twapi::cert_request_parse $req]
        set altnames [concat {*}[lindex [dict get $csr extensions -altnames] 0]]
        list \
            [dict get $csr version] \
            [expr {[dict get $csr subject] eq $x509_name}] \
            [dict get $csr extensions -basicconstraints] \
            [lindex [dict get $csr extensions -keyusage] 1] \
            [equal_sets [lindex [dict get $csr extensions -keyusage] 0] {digital_signature non_repudiation key_encipherment data_encipherment key_agreement key_cert_sign crl_sign}] \
            [dict exists $csr attributes] \
            [lindex [dict get $csr extensions -enhkeyusage] 1] \
            [equal_sets [lindex [dict get $csr extensions -enhkeyusage] 0] {ocsp_signing server_auth ipsec_end_system ipsec_tunnel client_auth ipsec_user code_signing timestamp_signing email_protection}] \
            [string equal [dict get $altnames email] ${subject}@twapitest.com] \
            [string equal [dict get $altnames dns] ${subject}.twapitest.com] \
            [string equal [dict get $altnames url] http://${subject}.twapitest.com] \
            [string equal [dict get $altnames directory] [twapi::cert_name_to_blob "CN=${subject}altname"]] \
            [string equal [dict get $altnames ip] [binary format c4 {127 0 0 1}]]
    } -result {0 1 {{0 0 0} 1} 1 1 1 0 1 1 1 1 1 1}


    test cert_request_parse-1.1 {
        Parse a certificate request (PEM, openssl)
    } -setup {
        set subject twapitest-[clock microseconds]
        set x509_name "/CN=$subject/O=Twapi/OU=test"
        lassign [openssl req -new -batch -nodes -keyout [tcltest::makeFile "" $subject.key] -subj $x509_name] req stderr
    } -body {
        set csr [twapi::cert_request_parse $req -encoding pem]
        list \
            [dict get $csr version] \
            [string equal [dict get $csr subject] "CN=$subject, O=Twapi, OU=test"] \
            [dict get $csr attributes] \
            [dict exists $csr extensions] \
            [dict exists $csr pubkey]
    } -result {0 1 {} 0 1}

    test cert_request_parse-1.1.1 {
        Parse a certificate request (PEM default encoding, openssl)
    } -setup {
        set subject twapitest-[clock microseconds]
        set x509_name "/CN=$subject/O=Twapi/OU=test"
        lassign [openssl req -new -batch -nodes -keyout [tcltest::makeFile "" $subject.key] -subj $x509_name] req stderr
    } -body {
        set csr [twapi::cert_request_parse $req]
        list \
            [dict get $csr version] \
            [string equal [dict get $csr subject] "CN=$subject, O=Twapi, OU=test"] \
            [dict get $csr attributes] \
            [dict exists $csr extensions] \
            [dict exists $csr pubkey]
    } -result {0 1 {} 0 1}

    
    ################################################################

    test cert_tls_verify-1.0 {
        Verify TLS certificate with trusted system root (success, server)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -server www.google.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-1.1 {
        Verify TLS certificate with trusted system root (client)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-1.2 {
        Verify TLS certificate - common name matches (server)
    } -setup {
        set ca [samplecert ca]
        set server [samplecert server]
    } -body {
        twapi::cert_tls_verify $server -revocationcheck none -trustedroots [list $ca] -hstore [samplestore] -server twapitestserver
    } -cleanup {
        twapi::cert_release $ca
        twapi::cert_release $server
    } -result ok

    test cert_tls_verify-1.3 {
        Verify TLS certificate - DNS name matches
    } -setup {
        set ca [samplecert ca]
        set server [samplecert altserver]
    } -body {
        # Note altserver has no CN in subject, otherwise that would 
        # have been used
        list \
            [twapi::cert_tls_verify $server -revocationcheck none -trustedroots [list $ca] -hstore [samplestore] -server altserver.twapitest.com] \
            [twapi::cert_tls_verify $server -revocationcheck none -trustedroots [list $ca] -hstore [samplestore] -server altserver2.twapitest.com]
    } -cleanup {
        twapi::cert_release $ca
        twapi::cert_release $server
    } -result {ok ok}

    test cert_tls_verify-2.0 {
        Verify TLS certificate with trusted system root (cnmatch)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -server www.yahoo.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result cnmatch

    test cert_tls_verify-2.1 {
        Verify TLS certificate with trusted system root (cnmatch, ignoreerror)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -server www.yahoo.com -ignoreerrors {name}
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-3.0 {
        Verify TLS certificate with trusted system root (usageany)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -server www.google.com -usageany {server_auth}
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-3.1 {
        Verify TLS certificate with trusted system root (usageany, wrongusage)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -server www.google.com -usageany {code_signing}
    } -cleanup {
        twapi::cert_release $hcert
    } -result wrongusage

    test cert_tls_verify-3.2 {
        Verify TLS certificate with trusted system root (usageany, any)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -server www.google.com -usageany {code_signing server_auth}
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-4.0 {
        Verify TLS certificate with trusted system root (usageall)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -server www.google.com -usageall {server_auth}
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-4.1 {
        Verify TLS certificate with trusted system root (usageall, wrongusage)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -server www.google.com -usageall {server_auth code_signing}
    } -cleanup {
        twapi::cert_release $hcert
    } -result wrongusage

    test cert_tls_verify-4.2 {
        Verify TLS certificate with trusted system root (usageall, all)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -server www.google.com -usageall {client_auth server_auth}
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-5.0 {
        Verify TLS certificate with trusted system root (engine user)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -server www.google.com -engine user
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-5.1 {
        Verify TLS certificate with trusted system root (engine machine)
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -server www.google.com -engine machine
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-6.0 {
        Verify TLS certificate with errors
    } -setup {
        set hcert [samplecert server]
    } -body {
        twapi::cert_tls_verify $hcert
    } -cleanup {
        twapi::cert_release $hcert
    } -result untrustedroot

    test cert_tls_verify-6.1 {
        Verify TLS certificate with errors
    } -setup {
        set hcert [samplecert server]
    } -body {
        twapi::cert_tls_verify $hcert -ignoreerrors {}
    } -cleanup {
        twapi::cert_release $hcert
    } -result untrustedroot

    test cert_tls_verify-6.2 {
        Verify TLS certificate with errors
    } -setup {
        set hcert [samplecert server]
    } -body {
        twapi::cert_tls_verify $hcert -ignoreerrors {unknownca}
    } -cleanup {
        twapi::cert_release $hcert
    } -result wrongusage

    test cert_tls_verify-6.3 {
        Verify TLS certificate with errors
    } -setup {
        set hcert [samplecert server]
    } -body {
        twapi::cert_tls_verify $hcert -ignoreerrors {unknownca usage} -usageany {client_auth}
    } -cleanup {
        twapi::cert_release $hcert
    } -result revocationoffline

    test cert_tls_verify-6.4 {
        Verify TLS certificate with errors
    } -setup {
        set hcert [samplecert server]
    } -body {
        twapi::cert_tls_verify $hcert -ignoreerrors {unknownca usage revocation} -usageany {client_auth}
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-6.5 {
        Verify TLS certificate with errors -ignoreerrors name
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -ignoreerrors {name} -server www.yahoo.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-6.6 {
        Verify TLS certificate with -ignoreerrors criticalextensions basicconstraints policy time
    } -constraints {
        TBD
    } -setup {
        set hcert [samplecert server]
    } -body {
        twapi::cert_tls_verify $hcert -ignoreerrors {unknownca usage revocation} -usageany {client_auth}
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-6.7 {
        Verify TLS expired certificate  -ignoreerrors time
    } -setup {
        set cert [expiredcert]
    } -body {
        twapi::cert_tls_verify $cert -ignoreerrors time
    } -result ok

    test cert_tls_verify-7.0 {
        Verify TLS certificate with errors -cacheendcert false
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -cacheendcert false -server www.google.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-7.1 {
        Verify TLS certificate with errors -cacheendcert true
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -cacheendcert 1 -server www.google.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-7.2 {
        Verify TLS certificate with errors -cacheendcert true need test to verify end cert is cached
    } -constraints {
        TBD 
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -cacheendcert 1 -server www.google.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-8.0 {
        Verify TLS certificate with errors -disableauthrootautoupdate false
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -disableauthrootautoupdate false -server www.google.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-8.1 {
        Verify TLS certificate with errors -disableauthrootautoupdate true
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -disableauthrootautoupdate 1 -server www.google.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-8.2 {
        Verify TLS certificate with errors -disableauthrootautoupdate true - verify autoupdate disabled
    } -constraints {
        TBD
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -disableauthrootautoupdate 1 -server www.google.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-9.0 {
        Verify TLS certificate with -hstore, -trustedroots
    } -setup {
        set ca [samplecert ca]
        set intermediate [samplecert intermediate]
        set client [samplecert client]
    } -body {
        list \
            [twapi::cert_tls_verify $client -revocationcheck none] \
            [twapi::cert_tls_verify $client -revocationcheck none -trustedroots [list $ca]] \
            [twapi::cert_tls_verify $client -revocationcheck none -trustedroots [list $ca]] \
            [twapi::cert_tls_verify $client -revocationcheck none -trustedroots {} -hstore [samplestore]] \
            [twapi::cert_tls_verify $client -revocationcheck none -trustedroots [list $intermediate] -hstore [samplestore]] \
            [twapi::cert_tls_verify $client -trustedroots [list $ca] -hstore [samplestore]] \
            [twapi::cert_tls_verify $client -revocationcheck none -trustedroots [list $ca] -hstore [samplestore]]
    } -cleanup {
        twapi::cert_release $ca
        twapi::cert_release $intermediate
        twapi::cert_release $client
    } -result {untrustedroot untrustedroot untrustedroot untrustedroot untrustedroot revocationoffline ok}

    test cert_tls_verify-10.0 {
        Verify TLS revoked certificate 
    } -setup {
        set cert [revokedcert]
    } -body {
        list \
            [twapi::cert_tls_verify $cert] \
            [twapi::cert_tls_verify $cert -revocationcheck all] \
            [twapi::cert_tls_verify $cert -revocationcheck leaf] \
            [twapi::cert_tls_verify $cert -revocationcheck excluderoot] \
            [twapi::cert_tls_verify $cert -revocationcheck none] \
    } -result {revoked revoked revoked revoked ok}

    test cert_tls_verify-11.0 {
        Verify TLS certificate with errors -urlretrievalcacheonly false
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -urlretrievalcacheonly false -server www.google.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-11.1 {
        Verify TLS certificate with errors -urlretrievalcacheonly true
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -urlretrievalcacheonly 1 -server www.google.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-11.2 {
        Verify TLS certificate with errors -urlretrievalcacheonly true - verify only cache
    } -constraints {
        TBD
    } -setup {
        set hcert [googlecert]
    } -body {
        twapi::cert_tls_verify $hcert -urlretrievalcacheonly 1 -server www.google.com
    } -cleanup {
        twapi::cert_release $hcert
    } -result ok

    test cert_tls_verify-12.0 {
        Verify TLS expired certificate
    } -setup {
        set cert [expiredcert]
    } -body {
        twapi::cert_tls_verify $cert
    } -result expired

    ################################################################

    test cert_locate_private_key {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test crypt_acquire {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test crypt_free {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test crypt_key_container_delete {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test crypt_generate_key {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test crypt_keypair {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test crypt_public_key_export {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    test crypt_public_key_import {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test crypt_get_security_descriptor {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test crypt_set_security_descriptor {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test crypt_key_container_name-1.0 {
        Get key container name
    } -setup {
        set name [new_name]
        set hcrypt [twapi::crypt_acquire $name -create 1]
    } -body {
        string equal [twapi::crypt_key_container_name $hcrypt] $name
    } -cleanup {
        twapi::crypt_free $hcrypt
    } -result 1

    ################################################################

    test crypt_key_container_unique_name-1.0 {
        Get key container name
    } -setup {
        set name [new_name]
        set hcrypt [twapi::crypt_acquire $name -create 1]
    } -body {
        twapi::crypt_key_container_unique_name $hcrypt
    } -cleanup {
        twapi::crypt_free $hcrypt
    } -result {^[[:xdigit:]]+_[[:xdigit:]]+-[[:xdigit:]]+-[[:xdigit:]]+-[[:xdigit:]]+-[[:xdigit:]]+$} -match regexp

    ################################################################

    test crypt_csp-1.0 {
        Get CSP (default)
    } -setup {
        set container [new_name]
        set crypt [twapi::crypt_acquire $container -create 1]
    } -body {
        twapi::crypt_csp $crypt
    } -cleanup {
        twapi::crypt_free $crypt
        twapi::crypt_key_container_delete $container
    } -result {Microsoft Strong Cryptographic Provider}


    ################################################################

    test crypt_algorithms-1.0 {
        Get Crypt algorithms
    } -setup {
        unset -nocomplain algs
        set crypt [twapi::crypt_acquire]
    } -body {
        set l [twapi::crypt_algorithms $crypt]
        verify_list_kl_fields $l {algid defkeylen minkeylen maxkeylen protocols name description}
        foreach e $l {
            if {[dict get $e defkeylen] > [dict get $e maxkeylen] ||
                [dict get $e defkeylen] < [dict get $e minkeylen]} {
                error "Invalid key length fields for [dict get $e name]"
            }
            set algs([dict get $e name]) $e
        }
        list [dict get $algs(RSA_KEYX) algid] [dict get $algs(RSA_KEYX) defkeylen] [dict get $algs(RSA_KEYX) minkeylen] [dict get $algs(RSA_KEYX) maxkeylen] [dict get $algs(RSA_KEYX) protocols] [dict get $algs(RSA_KEYX) description]
    } -cleanup {
        twapi::crypt_free $crypt
    } -result {41984 1024 384 16384 {ipsec signing} {RSA Signature}}
    
    test crypt_implementation_type-1.0 {Get crypt implementation} -setup {
        set crypt [twapi::crypt_acquire]
    } -body {
        twapi::crypt_implementation_type $crypt
    } -cleanup {
        twapi::crypt_free $crypt
    } -result software
    
    test crypt_key_specifiers-1.0 {Get crypt key specifiers} -setup {
        set crypt [twapi::crypt_acquire]
    } -body {
        twapi::crypt_key_specifiers $crypt
    } -cleanup {
        twapi::crypt_free $crypt
    } -result {keyexchange signature}
    
    test crypt_sig_keysize_increment {Get crypt sig size incr} -setup {
        set crypt [twapi::crypt_acquire]
    } -body {
        twapi::crypt_sig_keysize_increment $crypt
    } -cleanup {
        twapi::crypt_free $crypt
    } -result 8
    
    test crypt_keyx_keysize_increment {Get crypt keyx size incr} -setup {
        set crypt [twapi::crypt_acquire]
    } -body {
        twapi::crypt_keyx_keysize_increment $crypt
    } -cleanup {
        twapi::crypt_free $crypt
    } -result 8
    
    ################################################################

    test csps-1.0 {
        Get CSPs on the system
    } -body {
        set csps [twapi::csps]
        set status ok
        if {[llength $csps] < 2} {
            set status fail
        } else {
            foreach csp $csps {
                if {[llength $csp] != 2} {set status fail; break}
            }
            if {[lsearch -exact -index 0 $csps prov_rsa_full] < 0} {set status fail}
            if {[lsearch -exact -index 1 $csps {Microsoft Base Cryptographic Provider v1.0}] < 0} {set status fail}
        }
        set status
    } -result ok

    test crypt_csps-1.0 {
        Get CSPs on the system
    } -body {
        set csps [twapi::crypt_csps]
        set status ok
        if {[llength $csps] < 2} {
            set status fail
        } else {
            foreach csp $csps {
                if {[llength $csp] != 2} {set status fail; break}
            }
            if {[lsearch -exact -index 0 $csps prov_rsa_full] < 0} {set status fail}
            if {[lsearch -exact -index 1 $csps {Microsoft Base Cryptographic Provider v1.0}] < 0} {set status fail}
        }
        set status
    } -result ok
    ################################################################

    test crypt_csp_type-1.0 {
        Get CSP type (default)
    } -setup {
        set container [new_name]
        set crypt [twapi::crypt_acquire $container -create 1]
    } -body {
        twapi::crypt_csp_type $crypt
    } -cleanup {
        twapi::crypt_free $crypt
        twapi::crypt_key_container_delete $container
    } -result prov_rsa_full

    ################################################################

    test csp_types-1.0 {
        Get CSP types on the system
    } -body {
        set csps [twapi::csp_types]
        set status ok
        if {[llength $csps] < 2} {
            set status fail
        } else {
            foreach csp $csps {
                if {[llength $csp] != 2} {set status fail; break}
            }
            if {[lsearch -exact -index 0 $csps prov_rsa_full] < 0} {set status fail}
            if {[lsearch -exact -index 1 $csps {RSA Full (Signature and Key Exchange)}] < 0} {set status fail}
        }
        set status
    } -result ok

    test crypt_csptypes-1.0 {
        Get CSP types on the system
    } -body {
        set csps [twapi::crypt_csptypes]
        set status ok
        if {[llength $csps] < 2} {
            set status fail
        } else {
            foreach csp $csps {
                if {[llength $csp] != 2} {set status fail; break}
            }
            if {[lsearch -exact -index 0 $csps prov_rsa_full] < 0} {set status fail}
            if {[lsearch -exact -index 1 $csps {RSA Full (Signature and Key Exchange)}] < 0} {set status fail}
        }
        set status
    } -result ok

    ################################################################

    test crypt_key_container_names-1.0 {
        Get key container names
    } -setup {
        set container [new_name]
        set crypt [twapi::crypt_acquire $container -create 1]
    } -body {
        set containers [twapi::crypt_key_container_names $crypt]
        list [expr {[llength $containers] > 1}] [expr {$container in $containers}]
    } -cleanup {
        twapi::crypt_free $crypt
        twapi::crypt_key_container_delete $container
    } -result {1 1}

    ################################################################

    test crypt_session_key_size {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test crypt_keyset_type {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test crypt_symmetric_key_size {
        TBD
    } -body {
        TBD 
    } -constraints {
        TBD
    } -result TBD

    ################################################################

    test protect_data-1.0 {
        Protect and unprotect data
    } -body {
        encoding convertfrom utf-8 [twapi::unprotect_data [twapi::protect_data [encoding convertto utf-8 a]]]
    } -result a

    test protect_data-1.1 {
        Protect and unprotect data
    } -body {
        lassign [twapi::unprotect_data [twapi::protect_data [encoding convertto utf-8 a]] -withdescription 1] data description
        list [encoding convertfrom utf-8 $data] $description
    } -result {a {}}

    test protect_data-2.0 {
        Protect and unprotect data
    } -body {
        lassign [twapi::unprotect_data [twapi::protect_data [encoding convertto utf-8 [string repeat "\0\1abc" 1000]] -description "This is a description"] -withdescription 1] data description
        list [encoding convertfrom utf-8 $data] $description
    } -result [list [string repeat "\0\1abc" 1000] {This is a description}]

    test protect_data-3.0 {
        Protect and unprotect data with prompt
    } -constraints {
        userInteraction
    } -body {
        set data [encoding convertfrom utf-8 [twapi::unprotect_data [twapi::protect_data [encoding convertto utf-8 a] -prompt "Encrypt data"] -prompt "Decrypt data"]]
        list $data [yesno "Did you see two dialogs with different title prompts?"]
    } -result {a 1}

    test protect_data-4.0 {
        Protect and unprotect data with prompt -noui 0 -noui false
    } -constraints {
        userInteraction
    } -body {
        set data [encoding convertfrom utf-8 [twapi::unprotect_data [twapi::protect_data [encoding convertto utf-8 a] -prompt "Encrypt data" -noui 0] -prompt "Decrypt data" -noui false]]
        list $data [yesno "Did you see two dialogs with different title prompts?"]
    } -result {a 1}

    test protect_data-4.1 {
        Protect and unprotect data with prompt -noui 1
    } -constraints {
        userInteraction
    } -body {
        list [catch {twapi::protect_data [encoding convertto utf-8 a] -prompt "Encrypt data" -noui 1}] [errorcode]
    } -result {1 {TWAPI_WIN32 1325}}

    test protect_data-4.2 {
        Protect and unprotect data with prompt -noui 0 -noui 1
    } -constraints {
        userInteraction
    } -body {
        list [catch {twapi::unprotect_data [twapi::protect_data [encoding convertto utf-8 a] -prompt "Encrypt data"] -prompt "Decrypt data" -noui 1}] [errorcode]
    } -result {1 {TWAPI_WIN32 1325}}

    test protect_data-5.0 {
        Protect and unprotect data -localmachine
    } -body {
        # TBD - how to verify localmachine ?
        encoding convertfrom utf-8 [twapi::unprotect_data [twapi::protect_data [encoding convertto utf-8 a] -localmachine 1]]
    } -result a

    test protect_data-6.0 {
        Protect and unprotect data -audit
    } -body {
        # TBD - how to verify audit ?
        encoding convertfrom utf-8 [twapi::unprotect_data [twapi::protect_data [encoding convertto utf-8 a] -audit 1]]
    } -result a

    ################################################################

    test capi_algid-1.0 {Alg Id for a numeric} -body {
        twapi::capi_algid 1000
    } -result 1000

    test capi_algid-2.0 {Alg Id for md5} -body {
        twapi::capi_algid md5
    } -result 0x00008003

    test capi_algid-2.1 {Alg Id for sha1} -body {
        twapi::capi_algid sha1
    } -result 0x00008004

    test capi_algid-2.2 {Alg Id for sha_256} -body {
        twapi::capi_algid sha_256
    } -result 0x0000800c

    test capi_algid-2.3 {Alg Id for at_keyexchange} -body {
        twapi::capi_algid at_keyexchange
    } -result 1

    test capi_algid-2.4 {Alg Id for at_signature} -body {
        twapi::capi_algid at_signature
    } -result 2

    test capi_algid-3.0 {Alg Id for OID} -body {
        twapi::capi_algid oid_oiwsec_md5rsa
    } -result 0x00008003

    test capi_algid-3.1 {Alg Id for OID} -body {
        twapi::capi_algid 1.2.840.113549.1.1.4
    } -result 0x00008003
    
    test capi_algid-4.0 {Alg Id for bad token} -body {
        twapi::capi_algid xxx
    } -result "" -returnCodes error
    
    test capi_algid-4.1 {Alg Id for bad OID} -body {
        twapi::capi_algid 1.2.840.113549.1.1.40 
    } -result "" -returnCodes error
    
    ################################################################

    test md5-1.0 {md5 bin} -body {
        twapi::md5 $hash_bin_operand
    } -result [md5::md5 $hash_bin_operand]
    
    test md5-1.1 {md5 bin openssl} -body {
        twapi::hex [twapi::md5 [read_binary crypto.test]]
    } -result [lindex [openssl dgst -md5 -r crypto.test] 0 0]
    
    test md5-2.0 {md5 utf-8} -body {
        twapi::md5 $hash_str_operand utf-8
    } -result [md5::md5 [encoding convertto utf-8 $hash_str_operand]]
    
    test md5-2.1 {md5 unicode} -body {
        twapi::md5 $hash_str_operand unicode
    } -result [md5::md5 [encoding convertto unicode $hash_str_operand]]
    
    test sha1-1.0 {sha1 bin} -body {
        twapi::sha1 $hash_bin_operand
    } -result [sha1::sha1 -bin -- $hash_bin_operand]
    
    test sha1-1.1 {sha1 bin openssl} -body {
        twapi::hex [twapi::sha1 [read_binary crypto.test]]
    } -result [lindex [openssl dgst -sha1 -r crypto.test] 0 0]
    
    test sha1-2.0 {sha1 utf-8} -body {
        twapi::sha1 $hash_str_operand utf-8
    } -result [sha1::sha1 -bin -- [encoding convertto utf-8 $hash_str_operand]]
    
    test sha1-2.1 {sha1 unicode} -body {
        twapi::sha1 $hash_str_operand unicode
    } -result [sha1::sha1 -bin -- [encoding convertto unicode $hash_str_operand]]

    test sha256-1.0 {sha256 bin} -body {
        twapi::sha256 $hash_bin_operand
    } -result [sha2::sha256 -bin -- $hash_bin_operand]
    
    test sha256-1.1 {sha256 bin openssl} -body {
        twapi::hex [twapi::sha256 [read_binary crypto.test]]
    } -result [lindex [openssl dgst -sha256 -r crypto.test] 0 0]
    
    test sha256-2.0 {sha256 utf-8} -body {
        twapi::sha256 $hash_str_operand utf-8
    } -result [sha2::sha256 -bin -- [encoding convertto utf-8 $hash_str_operand]]
    
    test sha256-2.1 {sha256 unicode} -body {
        twapi::sha256 $hash_str_operand unicode
    } -result [sha2::sha256 -bin -- [encoding convertto unicode $hash_str_operand]]
    # There is no 384 or 512 bit tcllib sha
    test sha384-1.0 {sha384 bin} -body {
        string length [twapi::sha384 $hash_bin_operand]
    } -result 48
    
    test sha384-1.1 {sha384 bin openssl} -body {
        twapi::hex [twapi::sha384 [read_binary crypto.test]]
    } -result [lindex [openssl dgst -sha384 -r crypto.test] 0 0]
    
    test sha384-2.0 {sha384 bin} -body {
        string length [twapi::sha384 $hash_str_operand utf-8]
    } -result 48
    
    test sha512-1.0 {sha512 bin} -body {
        string length [twapi::sha512 $hash_bin_operand]
    } -result 64
    
    test sha512-1.1 {sha512 bin openssl} -body {
        twapi::hex [twapi::sha512 [read_binary crypto.test]]
    } -result [lindex [openssl dgst -sha512 -r crypto.test] 0 0]
    
    test sha512-2.0 {sha512 bin} -body {
        string length [twapi::sha512 $hash_str_operand utf-8]
    } -result 64
    
    test capi_hash-99 {
        TBD - all hash routines - test against other hash implementations
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    ################################################################
    
    test capi_key_algid-99 {
        TBD - capi_key_algid-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_blocklen-99 {
        TBD - capi_key_blocklen-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_test_certificate-99 {
        TBD - capi_key_certificate-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_keylen-99 {
        TBD -
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_salt-99 {
        TBD - capi_key_salt-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_iv-99 {
        TBD - capi_key_iv-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_dss_p-99 {
        TBD - capi_key_dss_p-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_dss_q-99 {
        TBD - capi_key_dss_q-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_dss_g-99 {
        TBD - capi_key_dss_g-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_effective_keylen-99 {
        TBD - capi_key_effective_keylen-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_mode_bits-99 {
        TBD - capi_key_mode_bits-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_mode-99 {
        TBD - capi_key_mode-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_padding-99 {
        TBD - capi_key_padding-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_key_permissions-99 {
        TBD - capi_key_permissions-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    ################################################################

    test pbkdf2-sha1-1.0 {
        Empty password
    } -body {
        twapi::hex [twapi::reveal [twapi::pbkdf2 [twapi::conceal ""] 160 sha1 salt 1]]
    } -result a33dddc30478185515311f8752895d36ea4363a2
    
    test pbkdf2-sha1-1.1 {
        pbkdf2 8/4/1/160
    } -body {
        twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 160 sha1 salt 1]
    } -result [binary format c* {0x0c 0x60 0xc8 0x0f 0x96 0x1f 0x0e 0x71 0xf3 0xa9 0xb5 0x24 0xaf 0x60 0x12 0x06 0x2f 0xe0 0x37 0xa6}]

    test pbkdf2-sha1-1.2 {
        pbkdf2 8/4/2/160
    } -body {
        twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 160 sha1 salt 2]
    } -result [binary format c* {0xea 0x6c 0x01 0x4d 0xc7 0x2d 0x6f 0x8c 0xcd 0x1e 0xd9 0x2a 0xce 0x1d 0x41 0xf0 0xd8 0xde 0x89 0x57}]

    test pbkdf2-sha1-1.3 {
        pbkdf2 8/4/4096/160
    } -body {
        twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 160 sha1 salt 4096]
    } -result [binary format c* {0x4b 0x00 0x79 0x01 0xb7 0x65 0x48 0x9a 0xbe 0xad 0x49 0xd9 0x26 0xf7 0x21 0xd0 0x65 0xa4 0x29 0xc1}]

    test pbkdf2-sha1-1.4 {
        pbkdf2 8/8/2048/192
    } -body {
        twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 192 sha1 [binary format c* {0x78 0x57 0x8E 0x5A 0x5D 0x63 0xCB 0x06}] 2048]
    } -result [binary format c* {0xBF 0xDE 0x6B 0xE9 0x4D 0xF7 0xE1 0x1D 0xD4 0x09 0xBC 0xE2 0x0A 0x02 0x55 0xEC 0x32 0x7C 0xB9 0x36 0xFF 0xE9 0x36 0x43}]

    test pbkdf2-sha1-1.5 {
        pbkdf2 11/8/1000/160
    } -body {
        twapi::reveal [twapi::pbkdf2 [twapi::conceal "Hello World"] 160 sha1 [binary format c* {0xDB 0x2F 0x38 0xA2 0x24 0x39 0x03 0xDE}] 1000]
    } -result [binary format c* {0xEC 0xD1 0x54 0x2B 0x2E 0xFB 0x3F 0x52 0x0F 0x12 0xA5 0x27 0xE3 0x86 0xB3 0x3C 0xF4 0xAD 0xE3 0xA2}]

    test pbkdf2-sha1-1.6 {
        pbkdf2 8/21/1/256
    } -body {
        twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 256 sha1 "ATHENA.MIT.EDUraeburn" 1]
    } -result [binary format c* {
        0xcd 0xed 0xb5 0x28 0x1b 0xb2 0xf8 0x01
        0x56 0x5a 0x11 0x22 0xb2 0x56 0x35 0x15
        0x0a 0xd1 0xf7 0xa0 0x4b 0xb9 0xf3 0xa3
        0x33 0xec 0xc0 0xe2 0xe1 0xf7 0x08 0x37
    }]

    test pbkdf2-sha1-1.7 {
        pbkdf2 8/21/2/256
    } -body {
        twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 256 sha1 "ATHENA.MIT.EDUraeburn" 2]
    } -result [binary format c* {
        0x01 0xdb 0xee 0x7f 0x4a 0x9e 0x24 0x3e 
        0x98 0x8b 0x62 0xc7 0x3c 0xda 0x93 0x5d
        0xa0 0x53 0x78 0xb9 0x32 0x44 0xec 0x8f
        0x48 0xa9 0x9e 0x61 0xad 0x79 0x9d 0x86
    }]

    test pbkdf2-sha1-1.8 {
        pbkdf2 8/21/1200/256
    } -body {
        twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 256 sha1 "ATHENA.MIT.EDUraeburn" 1200]
    } -result [binary format c* {
        0x5c 0x08 0xeb 0x61 0xfd 0xf7 0x1e 0x4e
        0x4e 0xc3 0xcf 0x6b 0xa1 0xf5 0x51 0x2b
        0xa7 0xe5 0x2d 0xdb 0xc5 0xe5 0x14 0x2f
        0x70 0x8a 0x31 0xe2 0xe6 0x2b 0x1e 0x13
    }]

    test pbkdf2-sha1-1.9 {
        pbkdf2 8/8/5/256
    } -body {
        twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 256 sha1 "\0224VxxV4\022" 5]
    } -result [binary format c* {
        0xd1 0xda 0xa7 0x86 0x15 0xf2 0x87 0xe6
        0xa1 0xc8 0xb1 0x20 0xd7 0x06 0x2a 0x49
        0x3f 0x98 0xd2 0x03 0xe6 0xbe 0x49 0xa6
        0xad 0xf4 0xfa 0x57 0x4b 0x6e 0x64 0xee
    }]

    test pbkdf2-sha1-1.10 {
        pbkdf2 pass phrase equals block size
    } -body {
        twapi::reveal [twapi::pbkdf2 [twapi::conceal [string repeat X 64]] 256 sha1 "pass phrase equals block size" 1200]
    } -result [binary format c* {
        0x13 0x9c 0x30 0xc0 0x96 0x6b 0xc3 0x2b
        0xa5 0x5f 0xdb 0xf2 0x12 0x53 0x0a 0xc9
        0xc5 0xec 0x59 0xf1 0xa4 0x52 0xf5 0xcc
        0x9a 0xd9 0x40 0xfe 0xa0 0x59 0x8e 0xd1
    }]

    test pbkdf2-sha1-1.11 {
        pbkdf2 pass phrase exceeds block size
    } -body {
        twapi::reveal [twapi::pbkdf2 [twapi::conceal [string repeat X 65]] 256 sha1 "pass phrase exceeds block size" 1200]
    } -result [binary format c* {
        0x9c 0xca 0xd6 0xd4 0x68 0x77 0x0c 0xd5
        0x1b 0x10 0xe6 0xa6 0x87 0x21 0xbe 0x61
        0x1a 0x8b 0x4d 0x28 0x26 0x01 0xdb 0x3b
        0x36 0xbe 0x92 0x46 0x91 0x5e 0xc8 0x2a
    }]

    test pbkdf2-sha1-1.12 {
        pbkdf2 binary password
    } -constraints {
        TBD - fails because binary passphrases not supported due to conceal as unicode strings and conversion to utf-8
    } -body {
        set pass [binary format H* f09d849e]
        twapi::reveal [twapi::pbkdf2 [twapi::conceal $pass] 256 sha1 EXAMPLE.COMpianist 50]
    } -result [binary format c* {
        0x6b 0x9c 0xf2 0x6d 0x45 0x45 0x5a 0x43
        0xa5 0xb8 0xbb 0x27 0x6a 0x40 0x3b 0x39
        0xe7 0xfe 0x37 0xa0 0xc4 0x1e 0x02 0xc2
        0x81 0xff 0x30 0x69 0xe1 0xe9 0x4f 0x52
    }]

    test pbkdf2-sha1-1.13 {
        Empty Salt
    } -body {
        twapi::hex [twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 160 sha1 "" 1]]
    } -result 8754c32c64b0f524fc50c00f788135de2d2dd767
    
    test pbkdf2-sha1-2.0 {
        pbkdf2 rfc6070 iterations=16777216
    } -body {
        twapi::hex [twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 160 sha1 salt 16777216]]
    } -result eefe3d61cd4da4e4e9945b3d6ba2158c2634e984

    test pbkdf2-sha1-2.1 {
        pbkdf2 rfc6070 
    } -body {
        twapi::hex [twapi::reveal [twapi::pbkdf2 [twapi::conceal passwordPASSWORDpassword] 200 sha1 [string repeat saltSALT 4]salt 4096]]
    } -result 3d2eec4fe41c849b80c8d83662c0e44a8b291a964cf2f07038
    
    test pbkdf2-sha1-2.2 {
        pbkdf2 rfc6070 nulls
    } -body {
        twapi::hex [twapi::reveal [twapi::pbkdf2 [twapi::conceal "pass\0word"] 128 sha1 "sa\0lt" 4096]]
    } -result 56fa6aa75548099dcc37d7f03425e0c3

    test pbkdf2-sha1-3.0 {
        Unencrypted password
    } -body {
        twapi::pbkdf2 password 160 sha1 salt 1
    } -result "Invalid pad*" -match glob -returnCodes error

    test pbkdf2-sha1-3.1 {
        Negative key length
    } -body {
        twapi::pbkdf2 [twapi::conceal password] -160 sha1 salt 1
    } -result "Number of key bits must be a positive multiple of 8.*" -match glob -returnCodes error

    test pbkdf2-sha1-3.2 {
        Key length 0
    } -body {
        twapi::pbkdf2 [twapi::conceal password] 0 sha1 salt 1
    } -result "Number of key bits must be a positive multiple of 8.*" -match glob -returnCodes error

    test pbkdf2-sha1-3.3 {
        Key length not multiple of 8
    } -body {
        twapi::pbkdf2 [twapi::conceal password] 159 sha1 salt 1
    } -result "Number of key bits must be a positive multiple of 8.*" -match glob -returnCodes error

    test pbkdf2-sha1-3.4 {
        Negative iterations
    } -body {
        twapi::pbkdf2 [twapi::conceal password] 160 sha1 salt -1
    } -result "Number of iterations must be a positive integer.*" -match glob -returnCodes error

    test pbkdf2-sha1-3.5 {
        Zero iterations
    } -body {
        twapi::pbkdf2 [twapi::conceal password] 160 sha1 salt 0
    } -result "Number of iterations must be a positive integer.*" -match glob -returnCodes error

    test pbkdf2-sha1-3.6 {
        Bad PRF
    } -body {
        twapi::pbkdf2 [twapi::conceal password] 160 des salt 1
    } -result "Invalid PRF value specified.*" -match glob -returnCodes error

    test pbkdf2-sha_256-1.0 {
        Josefsson set 1
    } -body {
        twapi::hex [twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 256 sha_256 salt 1]]
    } -result 120fb6cffcf8b32c43e7225256c4f837a86548c92ccc35480805987cb70be17b
    
    test pbkdf2-sha_256-1.1 {
        Josefsson set 2
    } -body {
        twapi::hex [twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 256 sha_256 salt 2]]
    } -result ae4d0c95af6b46d32d0adff928f06dd02a303f8ef3c251dfd6e2d85a95474c43
    
    test pbkdf2-sha_256-1.2 {
        Josefsson set 3
    } -body {
        twapi::hex [twapi::reveal [twapi::pbkdf2 [twapi::conceal password] 256 sha_256 salt 4096]]
    } -result c5e478d59288c841aa530db6845c4c8d962893a001ce4e11a4963873aa98134a
    
    test pbkdf2-sha_256-1.3 {
        Josefsson set 5
    } -body {
        twapi::hex [twapi::reveal [twapi::pbkdf2 [twapi::conceal passwordPASSWORDpassword] 320 sha_256 saltSALTsaltSALTsaltSALTsaltSALTsalt 4096]]
    } -result 348c89dbcbd32b2f32d814b8116e84cf2b17347ebc1800181c4e2a1fb8dd53e1c635518c7dac47e9

    test pbkdf2-sha_256-1.4 {
        Josefsson set 6
    } -body {
        twapi::hex [twapi::reveal [twapi::pbkdf2 [twapi::conceal pass\0word] 128 sha_256 sa\0lt 4096]]
    } -result 89b69d0516f829893c696226650a8687
    
    ################################################################

    proc testdef {id desc bytes args} {
        tcltest::test capi_hash_sign-$id "capi_sign_hash - $desc" -setup {
            set hcryptsign [crypt_rsa 1024]
            set hcryptverify [twapi::crypt_acquire]
            set hhashsign [twapi::capi_hash_create $hcryptsign sha1]
            set hhashverify [twapi::capi_hash_create $hcryptverify sha1]
            set hkverify [twapi::crypt_public_key_import $hcryptverify [twapi::crypt_public_key_export $hcryptsign signature]]
        } -cleanup {
            twapi::capi_key_free $hkverify
            twapi::capi_hash_free $hhashsign
            twapi::capi_hash_free $hhashverify
            twapi::crypt_free $hcryptsign
            twapi::crypt_free $hcryptverify
        } -body {
            twapi::capi_hash_bytes $hhashsign $bytes
            set sig [twapi::capi_hash_sign $hhashsign signature {*}$args]
            twapi::capi_hash_bytes $hhashverify $bytes
            twapi::capi_hash_verify $hhashverify $sig $hkverify {*}$args
        } -result 1
    }
    testdef 1.0 "single byte" "a"
    testdef 1.1 "multiple bytes" "\x00\x01\x20\x40\x50\x80\xff"
    testdef 1.2 "bytes more than sig size" [string repeat \x80 1000]
    testdef 2.0 "single byte" "a" -nohashoid 1
    testdef 2.1 "multiple bytes" "\x00\x01\x20\x40\x50\x80\xff" -nohashoid 0
    testdef 2.2 "bytes more than sig size" [string repeat \x80 1000] -nohashoid 1
    testdef 3.0 "single byte" "a" -x931format 1
    testdef 3.1 "multiple bytes" "\x00\x01\x20\x40\x50\x80\xff" -x931format 0
    testdef 3.2 "bytes more than sig size" [string repeat \x80 1000] -x931format 1


    ################################################################

    test capi_encrypt_bytes-1.0.0 {
        Encrypt single byte - des
    } -setup {
        set hcrypt [twapi::crypt_acquire]
        set hk [twapi::crypt_derive_key $hcrypt des [twapi::conceal abc]]
    } -cleanup {
        twapi::capi_key_free $hk
        twapi::crypt_free $hcrypt
    } -body {
        set enc [twapi::capi_encrypt_bytes "\001" $hk]
        list [string length $enc] [twapi::capi_decrypt_bytes $enc $hk]
    } -result [list 8 "\001"]
    
    test capi_encrypt_bytes-1.0.1 {
        Encrypt block size byte - des
    } -setup {
        set hcrypt [twapi::crypt_acquire]
        set hk [twapi::crypt_generate_key $hcrypt des]
    } -cleanup {
        twapi::capi_key_free $hk
        twapi::crypt_free $hcrypt
    } -body {
        set enc [twapi::capi_encrypt_bytes "\x00\x01\x20\x30\x40\x50\x80\xff" $hk]
        list [string length $enc] [twapi::capi_decrypt_bytes $enc $hk]
    } -result [list 16 "\x00\x01\x20\x30\x40\x50\x80\xff"]

    test capi_encrypt_bytes-1.0.2 {
        Encrypt block size byte - des
    } -setup {
        set hcrypt [twapi::crypt_acquire]
        set hk [twapi::crypt_generate_key $hcrypt des]
    } -cleanup {
        twapi::capi_key_free $hk
        twapi::crypt_free $hcrypt
    } -body {
        set bytes [string repeat "\x00\x01\x20\x40\x50\x80\xff" 1000]
        set enc [twapi::capi_encrypt_bytes $bytes $hk]
        string equal $bytes [twapi::capi_decrypt_bytes $enc $hk]
    } -result 1

    test capi_encrypt_bytes-1.1.0 {
        Encrypt single byte - 3des
    } -setup {
        set hcrypt [twapi::crypt_acquire]
        set hk [twapi::crypt_derive_key $hcrypt 3des [twapi::conceal abc]]
    } -cleanup {
        twapi::capi_key_free $hk
        twapi::crypt_free $hcrypt
    } -body {
        set enc [twapi::capi_encrypt_bytes "\001" $hk]
        list [string length $enc] [twapi::capi_decrypt_bytes $enc $hk]
    } -result [list 8 "\001"]
    
    test capi_encrypt_bytes-1.1.1 {
        Encrypt block size byte
    } -setup {
        set hcrypt [twapi::crypt_acquire]
        set hk [twapi::crypt_generate_key $hcrypt 3des]
    } -cleanup {
        twapi::capi_key_free $hk
        twapi::crypt_free $hcrypt
    } -body {
        set enc [twapi::capi_encrypt_bytes "\x00\x01\x20\x30\x40\x50\x80\xff" $hk]
        list [string length $enc] [twapi::capi_decrypt_bytes $enc $hk]
    } -result [list 16 "\x00\x01\x20\x30\x40\x50\x80\xff"]

    test capi_encrypt_bytes-1.1.2 {
        Encrypt block size byte
    } -setup {
        set hcrypt [twapi::crypt_acquire]
        set hk [twapi::crypt_generate_key $hcrypt 3des]
    } -cleanup {
        twapi::capi_key_free $hk
        twapi::crypt_free $hcrypt
    } -body {
        set bytes [string repeat "\x00\x01\x20\x40\x50\x80\xff" 1000]
        set enc [twapi::capi_encrypt_bytes $bytes $hk]
        string equal $bytes [twapi::capi_decrypt_bytes $enc $hk]
    } -result 1
    
    test capi_encrypt_bytes-1.2.0 {
        Encrypt single byte - aes_128
    } -setup {
        set hcrypt [twapi::crypt_acquire -csptype prov_rsa_aes]
        set hk [twapi::crypt_derive_key $hcrypt aes_128 [twapi::conceal abc]]
    } -cleanup {
        twapi::capi_key_free $hk
        twapi::crypt_free $hcrypt
    } -body {
        set enc [twapi::capi_encrypt_bytes "\001" $hk]
        list [string length $enc] [twapi::capi_decrypt_bytes $enc $hk]
    } -result [list 16 "\001"]
    
    test capi_encrypt_bytes-1.2.1 {
        Encrypt block size byte - aes_192
    } -setup {
        set hcrypt [twapi::crypt_acquire -csptype prov_rsa_aes]
        set hk [twapi::crypt_generate_key $hcrypt aes_192]
    } -cleanup {
        twapi::capi_key_free $hk
        twapi::crypt_free $hcrypt
    } -body {
        set enc [twapi::capi_encrypt_bytes "\x00\x01\x20\x30\x40\x50\x80\xff" $hk]
        list [string length $enc] [twapi::capi_decrypt_bytes $enc $hk]
    } -result [list 16 "\x00\x01\x20\x30\x40\x50\x80\xff"]

    test capi_encrypt_bytes-1.2.2 {
        Encrypt block size byte - aes_256
    } -setup {
        set hcrypt [twapi::crypt_acquire -csptype prov_rsa_aes]
        set hk [twapi::crypt_generate_key $hcrypt aes_256]
    } -cleanup {
        twapi::capi_key_free $hk
        twapi::crypt_free $hcrypt
    } -body {
        set bytes [string repeat "\x00\x01\x20\x40\x50\x80\xff" 1000]
        set enc [twapi::capi_encrypt_bytes $bytes $hk]
        string equal $bytes [twapi::capi_decrypt_bytes $enc $hk]
    } -result 1

    proc testdef {id desc bytes args} {
        tcltest::test capi_encrypt_bytes-$id "capi_encrypt_bytes - RSA $desc" -setup {
            set hcrypt [crypt_rsa 1024]
            set hk [twapi::crypt_keypair $hcrypt keyexchange]
        } -cleanup {
            twapi::capi_key_free $hk
            twapi::crypt_free $hcrypt
        } -body {
            set enc [twapi::capi_encrypt_bytes $bytes $hk]
            twapi::capi_decrypt_bytes $enc $hk
        } -result $bytes {*}$args
    }
    testdef 2.0.0 "single byte" "a"
    testdef 2.0.1 "multiple bytes" "\x00\x01\x20\x40\x50\x80\xff"
    testdef 2.0.2 "max size bytes" [string repeat \x80 86]
    testdef 2.0.3 "over limit size bytes" [string repeat \x80 87] -returnCodes error -result "Bad Data."
    
    # Define the test for rsa with OAEP
    proc testdef {id desc bytes args} {
        tcltest::test capi_encrypt_bytes-$id "capi_encrypt_bytes - RSA OAEP $desc" -setup {
            set hcrypt [crypt_rsa 1024]
            set hk [twapi::crypt_keypair $hcrypt keyexchange]
        } -cleanup {
            twapi::capi_key_free $hk
            twapi::crypt_free $hcrypt
        } -body {
            set enc [twapi::capi_encrypt_bytes $bytes $hk -pad oaep]
            twapi::capi_decrypt_bytes $enc $hk -pad oaep
        } -result $bytes {*}$args
    }
    testdef 2.1.0 "single byte" "a"
    testdef 2.1.1 "multiple bytes" "\x00\x01\x20\x40\x50\x80\xff"
    testdef 2.1.2 "max size bytes" [string repeat \x80 86]
    testdef 2.1.3 "over limit size bytes" [string repeat \x80 87] -returnCodes error -result "Bad Data."

    # Define the test for rsa with PKCS1
    proc testdef {id desc bytes args} {
        tcltest::test capi_encrypt_bytes-$id "capi_encrypt_bytes - RSA PKCS1 $desc" -setup {
            set hcrypt [crypt_rsa 1024]
            set hk [twapi::crypt_keypair $hcrypt keyexchange]
        } -cleanup {
            twapi::capi_key_free $hk
            twapi::crypt_free $hcrypt
        } -body {
            set enc [twapi::capi_encrypt_bytes $bytes $hk -pad pkcs1]
            twapi::capi_decrypt_bytes $enc $hk -pad pkcs1
        } -result $bytes {*}$args
    }
    testdef 2.2.0 "single byte" "a"
    testdef 2.2.1 "multiple bytes" "\x00\x01\x20\x40\x50\x80\xff"
    testdef 2.2.2 "max size bytes" [string repeat \x80 117]
    testdef 2.2.3 "over limit size bytes" [string repeat \x80 118] -returnCodes error -result "Bad Length."

    # Test vectors from https://github.com/pyca/cryptography/blob/master/vectors/cryptography_vectors/asymmetric/RSA/pkcs-1v2-1d2-vec/oaep-vect.txt
    proc testdef {id bytes pad nbits} {
        tcltest::test capi_encrypt_bytes-$nbits-$pad-2.3.$id "capi_encrypt_bytes - RSA $pad vector $id (openssl)" -setup {
            set hcrypt [twapi::crypt_acquire]
            set hk [twapi::crypt_public_key_import $hcrypt [read_file certs/rsa-$nbits-public.pem]]
        } -cleanup {
            twapi::capi_key_free $hk
            twapi::crypt_free $hcrypt
        } -body {
            set encpath [write_test_file [string reverse [twapi::capi_encrypt_bytes [hexbin $bytes] $hk -pad $pad]]]
            set outpath [tcltest::makeFile "" twapitest-[info cmdcount]]
            openssl pkeyutl -decrypt -in $encpath -inkey certs/rsa-$nbits-private.pem  -out $outpath -pkeyopt rsa_padding_mode:$pad
            read_binary  $outpath
        } -result [hexbin $bytes]

        tcltest::test capi_decrypt_bytes-$nbits-$pad-2.3.$id "capi_decrypt_bytes - RSA $pad vector $id (openssl)" -setup {
            set hcrypt [crypt_rsa $nbits]
            set hk [twapi::crypt_keypair $hcrypt keyexchange]
            set inpath [write_test_file [hexbin $bytes]]
            set pubpem [twapi::crypt_public_key_export $hcrypt keyexchange -encoding pem]
            set keyfile [tcltest::makeFile $pubpem twapitest-[info cmdcount]]
            set outpath [tcltest::makeFile "" twapitest-[info cmdcount]]
        } -cleanup {
            twapi::capi_key_free $hk
            twapi::crypt_free $hcrypt
        } -body {
            openssl pkeyutl -encrypt -in $inpath -pubin -inkey $keyfile -out $outpath -pkeyopt rsa_padding_mode:$pad
            twapi::capi_decrypt_bytes [string reverse [read_binary $outpath]] $hk -pad $pad
        } -result [hexbin $bytes]
    }
    testdef 1.1 {
        66 28 19 4e 12 07 3d b0 3b a9 4c da 9e f9 53 23 
        97 d5 0d ba 79 b9 87 00 4a fe fe 34
    } oaep 1024
    testdef 1.2 {
        75 0c 40 47 f5 47 e8 e4 14 11 85 65 23 29 8a c9 
        ba e2 45 ef af 13 97 fb e5 6f 9d d5
    } oaep 1024
    testdef 1.3 {
        d9 4a e0 83 2e 64 45 ce 42 33 1c b0 6d 53 1a 82 
        b1 db 4b aa d3 0f 74 6d c9 16 df 24 d4 e3 c2 45 
        1f ff 59 a6 42 3e b0 e1 d0 2d 4f e6 46 cf 69 9d 
        fd 81 8c 6e 97 b0 51
    } oaep 1024
    testdef 1.4 {
        52 e6 50 d9 8e 7f 2a 04 8b 4f 86 85 21 53 b9 7e 
        01 dd 31 6f 34 6a 19 f6 7a 85 
    } oaep 1024
    testdef 1.5 {
        8d a8 9f d9 e5 f9 74 a2 9f ef fb 46 2b 49 18 0f 
        6c f9 e8 02
    } oaep 1024
    testdef 1.6 {26 52 10 50 84 42 71} oaep 1024
    testdef 1.1 {
        66 28 19 4e 12 07 3d b0 3b a9 4c da 9e f9 53 23 
        97 d5 0d ba 79 b9 87 00 4a fe fe 34
    } pkcs1 1024
    testdef 1.2 {
        75 0c 40 47 f5 47 e8 e4 14 11 85 65 23 29 8a c9 
        ba e2 45 ef af 13 97 fb e5 6f 9d d5
    } pkcs1 1024
    testdef 1.3 {
        d9 4a e0 83 2e 64 45 ce 42 33 1c b0 6d 53 1a 82 
        b1 db 4b aa d3 0f 74 6d c9 16 df 24 d4 e3 c2 45 
        1f ff 59 a6 42 3e b0 e1 d0 2d 4f e6 46 cf 69 9d 
        fd 81 8c 6e 97 b0 51
    } pkcs1 1024
    testdef 1.4 {
        52 e6 50 d9 8e 7f 2a 04 8b 4f 86 85 21 53 b9 7e 
        01 dd 31 6f 34 6a 19 f6 7a 85 
    } pkcs1 1024
    testdef 1.5 {
        8d a8 9f d9 e5 f9 74 a2 9f ef fb 46 2b 49 18 0f 
        6c f9 e8 02
    } pkcs1 1024
    testdef 1.6 {26 52 10 50 84 42 71} pkcs1 1024
    testdef 1.7 {8a 84 7d d9 e2} pkcs1 1024
    testdef 1.8 {
        37 32 36 b7 20 2d 39 b2 ee 30 cf b4 6d b0 95 11 
        f6 f3 07 cc 61 cc 21 60 6c 18 a7 5b 8a 62 f8 22 
        df 03 1b a0 e0 e8 2d d2 f3 e5 d3 1e 4e a2 57 b1 
        5b
    } pkcs1 1024
    testdef 1.9 {
        97 e0 b6 36 bf dd b8 e1 c8 a9 cf 5b 30 5c ef 3a 
        8f 47 f9 a8 b3 34 4f 13 55 fa 3d ba b6 7b b9 72 
        10 
    } pkcs1 1024
    testdef 1.10 {
        82 b5 07 5b fc 88 f4 00 65 76 aa 80 a0 00 7a 74 
        51 18 4d 4f 76 0c f9 24 28 04 22 2b 0e 07 26 f5 
        55 03 0e 4e 6b 01 f7 93 b0 97 01 81 27 82 4a 3e 
        40 24 57 d8 49 5f c0
    } pkcs1 1024
    testdef 10.1 {
        8b ba 6b f8 2a 6c 0f 86 d5 f1 75 6e 97 95 68 70 
        b0 89 53 b0 6b 4e b2 05 bc 16 94 ee 
    } oaep 2048
    testdef 15.1 {
        2a ac ec 86 f4 23 dd 92 5e c1 58 82 2a 74 8c be 
        6c 31 a0
    } pkcs1 2048
    
    test capi_encrypt_bytes-99 {
        TBD - more capi_encrypt_bytes tests
    } -constraints {
        TBD
    } -body {
        TBD - HHASH parameter, other encryptions DSS
    } -result TBD
    
    ################################################################
    
    test capi_encrypt_string-1.0.0 {
        Encrypt empty string - des
    } -setup {
        set hcrypt [twapi::crypt_acquire]
        set hk [twapi::crypt_derive_key $hcrypt des [twapi::conceal abc]]
    } -cleanup {
        twapi::capi_key_free $hk
        twapi::crypt_free $hcrypt
    } -body {
        set enc [twapi::capi_encrypt_string "" $hk]
        list [string length $enc] [twapi::capi_decrypt_string $enc $hk]
    } -result [list 8 ""]
    
    test capi_encrypt_string-1.0.1 {
        Encrypt single char - des
    } -setup {
        set hcrypt [twapi::crypt_acquire]
        set hk [twapi::crypt_derive_key $hcrypt des [twapi::conceal abc]]
    } -cleanup {
        twapi::capi_key_free $hk
        twapi::crypt_free $hcrypt
    } -body {
        set enc [twapi::capi_encrypt_string "\u0100" $hk]
        list [string length $enc] [twapi::capi_decrypt_string $enc $hk]
    } -result [list 8 "\u0100"]
    
    test capi_encrypt_string-99 {
        TBD - more capi_encrypt_string tests
    } -constraints {
        TBD
    } -body {
        TBD - HHASH parameter, other encryptions, particularly rsa
    } -result TBD

    ################################################################

    test hmac-1.0 {hmac bin} -body {
        twapi::hmac $hash_bin_operand [twapi::conceal mykey]
    } -result [sha1::hmac -bin -key mykey $hash_bin_operand]
    
    test hmac-1.1 {hmac bin openssl} -body {
        twapi::hex [twapi::hmac [read_binary crypto.test] [twapi::conceal mykey]]
    } -result [lindex [openssl dgst -sha1 -hmac mykey crypto.test] 0 1]
    
    test hmac-1.2 {hmac bin empty key} -body {
        twapi::hmac $hash_bin_operand [twapi::conceal ""]
    } -result [sha1::hmac -bin -key "" $hash_bin_operand]
    
    test hmac-1.3 {hmac bin empty data} -body {
        twapi::hmac "" [twapi::conceal mykey]
    } -result [sha1::hmac -bin -key mykey ""]
    
    test hmac-2.0 {hmac utf-8} -body {
        twapi::hmac $hash_str_operand [twapi::conceal mykey] sha1 utf-8
    } -result [sha1::hmac -bin -key mykey [encoding convertto utf-8 $hash_str_operand]]
    
    test hmac-2.1 {hmac unicode} -body {
        twapi::hmac $hash_str_operand [twapi::conceal $hash_bin_operand] sha1 unicode
    } -result [sha1::hmac -bin -key $hash_bin_operand [encoding convertto unicode $hash_str_operand]]
    
    # Test vectors from RFC 4868
    set testnum -1
    foreach {prf data key hmac} {
        sha1 4869205468657265 0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b b617318655057264e28bc0b6fb378c8ef146be00
        sha_256 4869205468657265 0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7
        sha_384 4869205468657265 0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b afd03944d84895626b0825f4ab46907f15f9dadbe4101ec682aa034c7cebc59cfaea9ea9076ede7f4af152e8b2fa9cb6
        sha_512 4869205468657265 0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b 87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cdedaa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854

        sha1 7768617420646f2079612077616e7420666f72206e6f7468696e673f  4a656665 effcdf6ae5eb2fa2d27416d5f184df9c259a7c79
        sha_256 7768617420646f2079612077616e7420666f72206e6f7468696e673f  4a656665 5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843
        sha_384 7768617420646f2079612077616e7420666f72206e6f7468696e673f  4a656665 af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736322445e8e2240ca5e69e2c78b3239ecfab21649
        sha_512 7768617420646f2079612077616e7420666f72206e6f7468696e673f  4a656665 164b7a7bfcf819e2e395fbe73b56e0a387bd64222e831fd610270cd7ea2505549758bf75c05a994a6d034f65f8f0e6fdcaeab1a34d4a6b4b636e070a38bce737
        
        sha1 dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 125d7342b9ac11cd91a39af48aa17b4f63f175d3
        sha_256 dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 773ea91e36800e46854db8ebd09181a72959098b3ef8c122d9635514ced565fe
        sha_384 dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 88062608d3e6ad8a0aa2ace014c8a86f0aa635d947ac9febe83ef4e55966144b2a5ab39dc13814b94e3ab6e101a34f27
        sha_512 dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa fa73b0089d56a284efb0f0756c890be9b1b5dbdd8ee81a3655f83e33b2279d39bf3e848279a722c806b485a47e67c807b946a337bee8942674278859e13292fb

        sha1 cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd 0102030405060708090a0b0c0d0e0f10111213141516171819 4c9007f4026250c6bc8414f9bf50c86c2d7235da
        sha_256 cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd 0102030405060708090a0b0c0d0e0f10111213141516171819 82558a389a443c0ea4cc819899f2083a85f0faa3e578f8077a2e3ff46729665b
        sha_384 cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd 0102030405060708090a0b0c0d0e0f10111213141516171819 3e8a69b7783c25851933ab6290af6ca77a9981480850009cc5577c6e1f573b4e6801dd23c4a7d679ccf8a386c674cffb
        sha_512 cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd 0102030405060708090a0b0c0d0e0f10111213141516171819 b0ba465637458c6990e5a8c5f61d4af7e576d97ff94b872de76f8050361ee3dba91ca5c11aa25eb4d679275cc5788063a5f19741120c4f2de2adebeb10a298dd

        sha1 54657374205573696e67204c6172676572205468616e20426c6f636b2d53697a65204b6579202d2048617368204b6579204669727374 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 90d0dace1c1bdc957339307803160335bde6df2b
        sha_256 54657374205573696e67204c6172676572205468616e20426c6f636b2d53697a65204b6579202d2048617368204b6579204669727374 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54
        sha_384 54657374205573696e67204c6172676572205468616e20426c6f636b2d53697a65204b6579202d2048617368204b6579204669727374 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 4ece084485813e9088d2c63a041bc5b44f9ef1012a2b588f3cd11f05033ac4c60c2ef6ab4030fe8296248df163f44952
        sha_512 54657374205573696e67204c6172676572205468616e20426c6f636b2d53697a65204b6579202d2048617368204b6579204669727374 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 80b24263c7c1a3ebb71493c1dd7be8b49b46d1f41b4aeec1121b013783f8f3526b56d037e05f2598bd0fd2215d6a1e5295e64f73f63f0aec8b915a985d786598

        sha1 5468697320697320612074657374207573696e672061206c6172676572207468616e20626c6f636b2d73697a65206b657920616e642061206c6172676572207468616e20626c6f636b2d73697a6520646174612e20546865206b6579206e6565647320746f20626520686173686564206265666f7265206265696e6720757365642062792074686520484d414320616c676f726974686d2e aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 217e44bb08b6e06a2d6c30f3cb9f537f97c63356
        sha_256 5468697320697320612074657374207573696e672061206c6172676572207468616e20626c6f636b2d73697a65206b657920616e642061206c6172676572207468616e20626c6f636b2d73697a6520646174612e20546865206b6579206e6565647320746f20626520686173686564206265666f7265206265696e6720757365642062792074686520484d414320616c676f726974686d2e aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 9b09ffa71b942fcb27635fbcd5b0e944bfdc63644f0713938a7f51535c3a35e2
        sha_384 5468697320697320612074657374207573696e672061206c6172676572207468616e20626c6f636b2d73697a65206b657920616e642061206c6172676572207468616e20626c6f636b2d73697a6520646174612e20546865206b6579206e6565647320746f20626520686173686564206265666f7265206265696e6720757365642062792074686520484d414320616c676f726974686d2e aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 6617178e941f020d351e2f254e8fd32c602420feb0b8fb9adccebb82461e99c5a678cc31e799176d3860e6110c46523e
        sha_512 5468697320697320612074657374207573696e672061206c6172676572207468616e20626c6f636b2d73697a65206b657920616e642061206c6172676572207468616e20626c6f636b2d73697a6520646174612e20546865206b6579206e6565647320746f20626520686173686564206265666f7265206265696e6720757365642062792074686520484d414320616c676f726974686d2e aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa e37b6a775dc87dbaa4dfa9f96e5e3ffddebd71f8867289865df5a32d20cdc944b6022cac3c4982b10d5eeb55c3e4de15134676fb6de0446065c97440fa8c6a58
    } {
        test hmac-rfc4868-[incr testnum] "hmac $prf" -body {twapi::hex [twapi::hmac [hexbin $data] [twapi::conceal [hexbin $key]] $prf]} -result $hmac
    }
        
    ################################################################

    test crypt_derive_key-99 {
        TBD - crypt_derive_key-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test crypt_export_key-99 {
        TBD - more crypt_export_key-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test crypt_import_key-99 {
        TBD - more crypt_import_key-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_parse-99 {
        TBD - more capi_parse-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    test capi_parse_file-99 {
        TBD - more capi_parse_file-99
    } -constraints {
        TBD
    } -body {
        TBD
    } -result TBD

    
}

patience "Cleaning test certs"
cleanup_test_cert_files
::tcltest::cleanupTests
namespace delete ::twapi::crypto::test
