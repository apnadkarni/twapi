#
# Copyright (c) 2010, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for commands from crypto.tcl

package require tcltest
eval tcltest::configure $argv

source [file join [file dirname [info script]] testutil.tcl]
load_twapi_package twapi_crypto

proc setup_contexts {package} {
    set ccred [twapi::sspi_new_credentials -usage outbound -package $package]
    set scred [twapi::sspi_new_credentials -usage inbound -package $package]
    set cctx [twapi::sspi_client_new_context $ccred -target LUNA -confidentiality true -connection true]
    foreach {step data cctx} [twapi::sspi_security_context_next $cctx] break
    set sctx [twapi::sspi_server_new_context $scred $data]
    foreach {step data sctx} [twapi::sspi_security_context_next $sctx] break
    foreach {step data cctx} [twapi::sspi_security_context_next $cctx $data] break
    foreach {step data sctx} [twapi::sspi_security_context_next $sctx $data] break
    twapi::sspi_free_credentials $scred
    twapi::sspi_free_credentials $ccred
    return [list $cctx $sctx]
}

proc encrypt_test {cctx sctx} {
    lassign [twapi::sspi_encrypt $cctx abc] sig data padding
    set data1 [twapi::sspi_decrypt $sctx $sig $data $padding]
    lassign [twapi::sspi_encrypt $cctx 123 -seqnum 1] sig data padding
    set data2 [twapi::sspi_decrypt $sctx $sig $data $padding]
    lassign [twapi::sspi_encrypt $cctx \001\002\003 -seqnum 2] sig data padding
    set data3 [twapi::sspi_decrypt $sctx $sig $data $padding]
    return [equal_lists [list $data1 $data2 $data3] [list abc 123 \001\002\003]]
}

proc encrypt_test_noseq {cctx sctx} {
    lassign [twapi::sspi_encrypt $cctx abc] sig data padding
    set data1 [twapi::sspi_decrypt $sctx $sig $data $padding]
    lassign [twapi::sspi_encrypt $cctx 123] sig data padding
    set data2 [twapi::sspi_decrypt $sctx $sig $data $padding]
    lassign [twapi::sspi_encrypt $cctx \001\002\003] sig data padding
    set data3 [twapi::sspi_decrypt $sctx $sig $data $padding]
    return [equal_lists [list $data1 $data2 $data3] [list abc 123 \001\002\003]]
}

namespace eval twapi::crypto::test {
    namespace import ::tcltest::test
    ::tcltest::testConstraint win2k [twapi::min_os_version 5]

    foreach pkg {NTLM Negotiate Kerberos WDigest} {
        test encrypt-${pkg}-1.0 "Verify basic encryption and decryption - $pkg" -setup "lassign \[setup_contexts $pkg\] cctx sctx" -body {
            encrypt_test $cctx $sctx
        } -cleanup {
            twapi::sspi_close_security_context $sctx
            twapi::sspi_close_security_context $cctx
        } -result 1

        test encrypt-${pkg}-1.1 "Verify basic encryption and decryption without seq num - $pkg" -setup "lassign \[setup_contexts $pkg\] cctx sctx" -body {
            encrypt_test_noseq $cctx $sctx
        } -cleanup {
            twapi::sspi_close_security_context $sctx
            twapi::sspi_close_security_context $cctx
        } -result 1
    }

    test sign-1.0 {
        Verify basic signing and verification
    } -setup {
        foreach {cctx sctx} [setup_contexts NTLM] break
    } -body {
        foreach {sig data} [twapi::sspi_generate_signature $cctx abcd] break
        set flags1 [twapi::sspi_verify_signature $sctx $sig $data]
        foreach {sig data} [twapi::sspi_generate_signature $cctx 1234] break
        set flags2 [twapi::sspi_verify_signature $sctx $sig $data]
        list [string is integer -strict $flags1] [string is integer -strict $flags2]
    } -cleanup {
        twapi::sspi_close_security_context $sctx
        twapi::sspi_close_security_context $cctx
    } -result [list 1 1]
        
    test sspi_enumerate_packages-1.0 {
        Enumerate SSPI providers
    } -body {
        set packages [twapi::sspi_enumerate_packages]
        expr {
              [lsearch -exact $packages NTLM] >= 0 &&
              [lsearch -exact $packages Kerberos] >= 0 &&
              [lsearch -exact $packages Schannel] >= 0 &&
              [lsearch -exact $packages Negotiate] >= 0
          }
    } -result 1

    test sspi_enumerate_packages-2.0 {
        Enumerate SSPI providers -all
    } -body {
        set packages [twapi::sspi_enumerate_packages -all]
        set missing {}
        foreach pkgname {NTLM Kerberos Schannel Negotiate} {
            foreach field {-capabilities -version -rpcid -name -maxtokensize -comment} {
                if {![dict exists $packages $pkgname $field]} {
                    lappend missing $pkgname.$field
                }
            }
        }
        set missing
    } -result {}

    test sspi_enumerate_packages-2.1 {
        Enumerate SSPI providers -all extra args
    } -body {
        set packages [twapi::sspi_enumerate_packages -all somearg]
    } -returnCodes error -result "Command has extra arguments specified: somearg"

    test sspi_enumerate_packages-3.0 {
        Enumerate SSPI providers -capabilities
    } -body {
        set packages [twapi::sspi_enumerate_packages -capabilities]
        set errors {}
        # Just some random sanity checks
        foreach {name cap} {
            Schannel stream
            Schannel mutualauth
            Negotiate connection
            Negotiate gsscompatible
            NTLM multirequired
            Kerberos datagram
        } {
            if {[lsearch -exact [dict get $packages $name -capabilities] $cap] < 0} {
                lappend errors "Capability $cap missing in $name"
            }
        }
        foreach {name cap} {
            Schannel logon
            Schannel datagram
            Negotiate stream
            Negotiate mutualauth
            NTLM gsscompatible
            NTLM datagram
            NTLM stream
            Kerberos stream
        } {
            if {[lsearch -exact [dict get $packages $name -capabilities] $cap] >= 0} {
                lappend errors "Capability $cap should not be present in $name"
            }
        }

        set errors
    } -result {}

    test sspi_enumerate_packages-4.0 {
        Enumerate SSPI providers -version
    } -body {
        set packages [twapi::sspi_enumerate_packages -version]
        set errors {}
        if {[dict size $packages] == 0} {
            lappend errors "No security packages listed"
        } else {
            dict for {pkgname pkg} $packages {
                if {[dict get $pkg -version] != 1} {
                    lappend errors "$pkgname version is not 1"
                }
            }
        }
        set errors
    } -result {}

    test sspi_enumerate_packages-5.0 {
        Enumerate SSPI providers -rpcid
    } -body {
        set packages [twapi::sspi_enumerate_packages -rpcid]
        set errors {}
        if {[dict size $packages] == 0} {
            lappend errors "No security packages listed"
        } else {
            dict for {pkgname pkg} $packages {
                if {![string is integer -strict [dict get $pkg -rpcid]]} {
                    lappend errors "$pkgname rpcid is not an integer"
                }
            }
        }
        set errors
    } -result {}

    test sspi_enumerate_packages-6.0 {
        Enumerate SSPI providers -maxtokensize
    } -body {
        set packages [twapi::sspi_enumerate_packages -maxtokensize]
        set errors {}
        if {[dict size $packages] == 0} {
            lappend errors "No security packages listed"
        } else {
            dict for {pkgname pkg} $packages {
                if {![string is integer -strict [dict get $pkg -maxtokensize]]} {
                    lappend errors "$pkgname maxtokensize is not an integer"
                }
                if {[dict get $pkg -maxtokensize] < 0} {
                    lappend errors "$pkgname maxtokensize is less than 0"
                }
            }
        }
        set errors
    } -result {}

    test sspi_enumerate_packages-7.0 {
        Enumerate SSPI providers -name
    } -body {
        set packages [twapi::sspi_enumerate_packages -name]
        set errors {}
        if {[dict size $packages] == 0} {
            lappend errors "No security packages listed"
        } else {
            dict for {pkgname pkg} $packages {
                if {$pkgname ne [dict get $pkg -name]} {
                    lappend errors "$pkgname name does not match"
                }
            }
        }
        set errors
    } -result {}

    test sspi_enumerate_packages-8.0 {
        Enumerate SSPI providers -comment
    } -body {
        set packages [twapi::sspi_enumerate_packages -comment]
        set errors {}
        if {[dict size $packages] == 0} {
            lappend errors "No security packages listed"
        } else {
            dict for {pkgname pkg} $packages {
                # Nothing to check except that the field exists
                dict get $pkg -comment
            }
        }
        set errors
    } -result {}


    #
    # Clean up
    ::tcltest::cleanupTests
}

namespace delete ::twapi::crypto::test
