[comment {-*- tcl -*- doctools manpage}]
[manpage_begin "Cryptographic API" n ""]
[copyright "2007-2009 Ashok P. Nadkarni"]
[moddesc "Cryptographic API"]
[titledesc "Commands related to cryptographical operations"]
[require twapi_crypto]
[description]
[para]

[emph "This module is still experimental and liable to change."]

[para]
This package provides procedures related to cryptographic services
provided by the Windows platforms including 
privacy, authentication
and integrity.

[section "Overview"]

This page describes the commands related to the Win32 CryptoAPI which
includes functions related to encryption, decryption, signatures
and ancillary services for certificate and key management.

[para]
The Win32 CryptoAPI includes the Security Support Provider Interface (SSPI)
related to secure communication protocols.
Those commands are documented separately on the [uri sspi.html "SSPI page"].

[para]
This documentation expects the reader is familiar with the use of cryptography.
An overview of the concepts in the CryptoAPI is provided but the API itself
is fairly complex and the reader may wish to
refer to the
[uri http://msdn.microsoft.com/en-us/library/windows/desktop/aa380255(v=vs.85).aspx "Windows SDK CryptoAPI documentation"] for detailed guides
and reference documentation.

[section "Cryptographic Service Providers"]
A Cryptographic Service Providers (CSP) on Windows is a software module that 
implements a set of cryptographical functions such as encryption
or key storage.
There may be multiple such
modules on a system, each implementing one of more cryptographic algorithms
for one or more cryptographic functions. Applications implement cryptographic
operations by calling a standard interface defined by Windows
and implemented by the CSPs.

[para]
Some CSP's come with the Windows operating system while others are
implemented by third parties. The feature set implemented by each CSP
is different and can depend on factors such as
the operating system version, and because of US export restrictions,
the country. Based on the supported features, CSP's have an associated
CSP type. For example, a CSP of type [const PROV_RSA_FULL] supports
digital signatures and encryption using the RSA public key algorithm.
On the other hand, a CSP of type [const PROV_DSS] uses the DSA algorithm and
only supports hashes and signatures. When creating a
[sectref "Cryptographic Context"], an application needs to specify 
a CSP type that supports the desired operations.

[para]
Two standard providers shipped as part of Windows are
[const "Microsoft Base Cryptographic Provider"]
and the
[const "Microsoft Strong Cryptographic Provider"].
On most systems, the latter is the default when no specific CSP is selected
and is sufficient in most cases unless some special functionality like
hardware based cryptography is desired.

[section "Keys and Key Containers"]
The keys used for cryptographic operations are stored in 
[emph "key containers"] within a CSP's control.
The keys are not generally exposed directly to an application but rather
the CSP carries out the operations using the keys on the application's behalf.

[para]
A CSP may be associated with multiple key containers, each identified by a name.
The specific key container and the keys within that container that
are used for an operation depends on the 
[sectref "Cryptographic Context"] is bound at the time the context is
created via the [uri #crypt_context_acquire [cmd crypt_context_acquire]]
command. This command also allows creation of new key containers within
a CSP if they do not exist. 

[para]
To delete key containers, use the
[uri #crypt_key_container_delete [cmd crypt_key_container_delete]] command.

[para]
Depending on the CSP chosen, key containers may be empty when created. 
The command [uri #crypt_context_generate_key [cmd crypt_context_generate_key]]
adds keys to the container. The algorithm with which the key will be
used and the purpose (encryption, signing etc.) can be specified
so the appropriate type of key is generated. The container may
contain multiple keys and appropriate key must be chosen when
cryptographic operations are invoked.

[para]
A key container may be created as a user key set or a computer key set.
These are distinguished based on where they are stored and
who has access to them.
Refer to the [uri http://msdn.microsoft.com/en-us/library/windows/desktop/aa380255(v=vs.85).aspx "Windows SDK CryptoAPI documentation"]
for details. It is possible to change the default access permissions
for a key container. The
[uri #crypt_context_security_descriptor [cmd crypt_context_security_descriptor]]
command can be used retrieve and change the security descriptor for
a key container.

[para]
The key algorithm is specified using mnemonics such as [const 3des],
[const sha256] etc. In some cases, the key is identified not by
the algorithm but the intended use. In particular,
in the case of public key cryptography, two types of keys
are commonly used - one for signing, and one for exchanging a symmetric
key for encryption. When generating keys or selecting them
for operations, these are identified as [const signature] and
[const keyexchange] respectively. For a list of algorithm identifiers
see the description of 
[uri #crypt_context_generate_key [cmd crypt_context_generate_key]].
Note that not all algorithms are supported on all platforms.

[section "Cryptographic Context"]
In order to perform cryptographic operations, an application must
choose a CSP, the algorithms to use and their parameters including keys.
The command [uri #crypt_context_acquire [cmd crypt_context_acquire]]
takes these are parameters and
returns a handle to a [emph "cryptographic context"] that
binds the desired combination together. This handle can then be used
in further cryptographic operation.

[para]
Once a context is created, the various parameters associated with it can
be retrieved.
[list_begin bullet]
[bullet]
[uri #crypt_context_csp [cmd crypt_context_csp]] returns the name
of the owning CSP.
[bullet]
[uri #crypt_context_csptype [cmd crypt_context_csptype]] returns the type
of the CSP.
[bullet]
[uri #crypt_context_key_container [cmd crypt_context_key_container]]
returns the name of key container currently associated with the context.
[bullet]
[uri #crypt_context_key_containers [cmd crypt_context_key_containers]]
returns the names of the other key containers owned by the CSP.
[bullet]
[uri #crypt_context_get_key [cmd crypt_context_get_key]] returns the
keys in the container.
[bullet]
[uri #crypt_context_keyset_type [cmd crypt_context_keyset_type]] returns
whether the key set in the container is per-user or per-machine.
[uri #crypt_context_session_key_size [cmd crypt_context_session_key_size]] 
and
[uri #crypt_context_symmetric_key_size [cmd crypt_context_symmetric_key_size]]
return the size of the keys in the container.

[list_end]

[section "Certificates"]
The CryptoAPI interface provides functions for certificate handling 
and storage.

TBD - this section to be written

[section "Certificate Stores"]
A [emph "certificate store"] is a container for certificates.
The container may be a physical store, for example on disk or in memory,
or a logical store which is a collection of physical stores presented
to the application as a single store.

TBD - this sections to be written

[section Commands]

[list_begin definitions]

[call [cmd crypt_context_acquire] [opt [arg options]]]
Returns a handle to a cryptographic context based on the specified options.
[list_begin opt]
[opt_def [cmd -confidentiality] [arg BOOL]]
If specified as [const true], messages are to be encrypted.
[list_end]

[list_end]

[keywords authentication "message digest" encryption decryption SSPI ]

[manpage_end]
