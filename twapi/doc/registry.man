[comment {-*- tcl -*- doctools manpage}]
[manpage_begin "Registry" n ""]
[copyright "2020 Ashok P. Nadkarni"]
[moddesc "Registry access in Windows"]
[titledesc "Commands for accessing the Windows registry"]
[require twapi_registry]
[description]
[para]

This module contains commands dealing with the Windows registry and supplants
the [cmd registry] package that is included with the Tcl core distribution. The
commands in the Tcl [cmd registry] package are in most cases easier to use and
may in many cases be more performant as well. This package is useful to fill in
missing capabilities there such as accessing security descriptors, receiving
change notifications. Certain bulk operations may also be more efficient through
the explicit ues of registry handles in this package.

[section "Predefined keys"]

The following registry key handles are predefined:
[const HKEY_CLASSES_ROOT],
[const HKEY_CURRENT_USER],
[const HKEY_LOCAL_MACHINE],
[const HKEY_USERS],
[const HKEY_PERFORMANCE_DATA],
[const HKEY_PERFORMANCE_TEXT],
[const HKEY_PERFORMANCE_NLSTEXT],
[const HKEY_CURRENT_CONFIG] or
[const HKEY_CURRENT_USER_LOCAL_SETTINGS].
These may be directly passed as key handles without an explicit call to
[cmd reg_key_open] or [cmd reg_key_create].

[section "Registry data types"]

The data stored in the registry may be one of several types listed below. When
setting or retrieving registry data, the value is always paired with its type.

[list_begin opt]
[opt_def binary] Binary data represented in Tcl as a binary string.
[opt_def dword] 32-bit integer in little-endian format
represented in Tcl as a decimal string.
[opt_def dword_be] 32-bit integer in big-endian format
represented in Tcl as a decimal string.
[opt_def expand_sz] Same as the [const sz] type but expected to contain
environment variables that should be expanded. 
[opt_def link] Symbolic link and represented in Tcl as a binary string.
[opt_def multi_sz] List of strings represented in Tcl as such.
[opt_def qword] 64-bit little-endian format integer
represented in Tcl as a decimal string.
[opt_def resource_descriptor] Resource descriptor represented in Tcl as a binary
string.
[opt_def resource_list] Resource list represented in Tcl as a binary string.
[opt_def resource_requirements_list] Resource requirements list represented in
Tcl as a binary string.
[opt_def sz] Null-terminated text represented as a Tcl string.
[list_end]

Command may return registry value either in raw or cooked form. The former
is returned as a pair consisting of a data type from the list above and the
corresponding data value. A cooked value returns only the data value which
is also transformed based on the type. In particular, data of type
[const dword_be] are converted to native format, [const expand_sz] have
embedded environment variables expanded.

[section "Registry commands"]

[list_begin definitions]


[call [cmd reg_connect] [arg SYSTEM] [arg HPREDEFINE]]

Returns a handle to a predefined registry key on a remote system.
[arg SYSTEM] specifies the name of the remote system.
[arg HPREDEFINE] must be one of the predefined keys
[const HKEY_USERS], [const HKEY_LOCAL_MACHINE] or [const HKEY_PERFORMANCE_DATA].

[call [cmd reg_disable_current_user_cache]]

Disables the caching of the [const HKEY_CURRENT_USER] handle for the current
process.

[call [cmd reg_iterator] [arg HKEY] [opt [arg options]]]

Returns an iterator command that can be invoked to iterate over all keys and
values under a registry key. The following options may be specified with
the command:

[list_begin opt]
[opt_def [cmd -subkey] [arg SUBKEY]] Registry path relative to [arg HKEY]
iterate over. If unspecified, the root of the iteration tree is [arg HKEY]
itself.
[opt_def [cmd -raw] [arg BOOLEAN]] If [const false] (default), values are
returned in cooked form. If [const true] the value data is a pair consisting
of the type and data.
[opt_def [cmd -withkeys] [arg BOOLEAN]] If [const true] (default), keys
are included in the items returned by the iteration. If [const false] they
are excluded.
[opt_def [cmd -withvalues] [arg BOOLEAN]] If [const true] (default), values
are included in the items returned by the iteration. If [const false] they
are excluded.
[list_end]

The iterator command should be invoked with zero or one argument. If invoked
with no arguments or the argument [cmd next], the iterator returns the next
item in the iteration. If invoked with an argument of [cmd skipchildren],
the iterator returns the next key at the same level at the current level.
In other words, all children of the current item, both keys and values are
skipped in the iteration. Note this argument value has the same effect
as [cmd next] when the current item is a value since values never have
children. The [cmd skipsiblings] is similar except that it skips items
at the same level as the current leve. Finally, the argument [cmd stop]
will end the iteration (even if more items remain). Any further attempt
to invoke the iterator command will result in an error being raised.

The return value from the iterator invocation is a list of three elements.
The first element is a list containing the relative path to the current item.
The second element is the type of the item, either [const Key] or [const Values]
depending on whether the item is a registry key or a dictionary of values.
If the former, the third element is the key name. If the latter, the third
element is a dictionary keyed by the value name. The value data may
be in cooked or raw form depending on the [cmd -raw] option value.

The iterator will return an empty list when no more items remain. Invoking
it again will raise an error.

[call [cmd reg_key_close] [arg HKEY]]

Releases the passed registry key handle. [arg HKEY] must not be one of
the predefined registry handles.

[call [cmd reg_key_copy] [arg HFROM] [arg SUBKEY] [arg HTO]]

Copies the contents of the key identified by the key path [arg SUBKEY] under
the handle [arg HFROM] to the target key with handle [arg HTO].

[call [cmd reg_key_create] [arg HKEY] [arg SUBKEY] [opt [arg options]]]

Returns a handle to a registry key.
[arg HKEY] must be a handle to a registry key as returned by a prior call to
[cmd reg_key_open], [uri \#reg_key_create [cmd reg_key_create]] etc. or a
predefined key handle such as [const HKEY_LOCAL_MACHINE]. [arg SUBKEY] is the
path to the subkey to be created under [arg HKEY]. It is not an error if
the subkey already exists. In that case, it is opened and its handle returned.

The following options may be specified:
[list_begin opt]
[opt_def [cmd -32bit]] Specifies that the 32-bit registry view should be
accessed.
[opt_def [cmd -64bit]] Specifies that the 64-bit registry view should be
accessed.
[opt_def [cmd -access] [arg ACCESSRIGHTS]] Specifies the desired access
rights and may be
specified as a list of integer access rights flags or symbols as described in
[uri security.html#accessrights "Access Rights"]. Defaults to [const generic_read].
[opt_def [cmd -backup] [arg BOOL]] If [const true], the key opened with access
required for backup and restore. The [cmd -access] option is ignored. Default is
[const false].
[opt_def [cmd -disposition] [arg VARNAME]] If specified, [arg VARNAME] is
treated as a variable name in caller's context and is set to [const created]
if the key was created and [const existed] if it was already present.
[opt_def [cmd -inherit] [arg BOOL]]
If true, the returned handle is inheritable by child processes. Defaults
to [const false].
[opt_def [cmd -link] [arg BOOL]] If [const true], [arg SUBKEY] is stored as the
value of the [const SymbolicLinkValue] value under [arg HKEY]. Default is
[const false].
[opt_def [cmd -secd] [arg SECURITY_DESCRIPTOR]]
Specifies a [uri security.html\#securitydescriptors "security descriptor"]
to be attached to the file or device if it has to be created. Defaults
to a null security descriptor which results in the process' default
security descriptor being applied.
[opt_def [cmd -volatile] [arg BOOL]] If [const true], the key is only stored
in memory and not preserved to disk when the registry hive is unloaded. Default
is [const false].

[list_end]

The returned key handle should be released by calling the
[uri \#reg_key_close [cmd reg_key_close]] command.

[call [cmd reg_key_current_user] [opt [arg options]]]
Returns a handle to the [const HKEY_CURRENT_USER] key for the user that
the current thread is impersonating. Note this is not necessarily the same
as the [const HKEY_CURRENT_USER] handle cached for the process. If the
user profile is not loaded, the default profile is used.

The following options may be specified:
[list_begin opt]
[opt_def [cmd -32bit]] Specifies that the 32-bit registry view should be
accessed.
[opt_def [cmd -64bit]] Specifies that the 64-bit registry view should be
accessed.
[opt_def [cmd -access] [arg ACCESSRIGHTS]] Specifies the desired access
rights and may be
specified as a list of integer access rights flags or symbols as described in
[uri security.html#accessrights "Access Rights"]. Defaults to [const generic_read].
[list_end]

[call [cmd reg_key_delete] [arg HKEY] [arg SUBKEY]]
Deletes the key identified by the key path [arg SUBKEY] under
the key specified by the handle [arg HKEY] and any values it contains.
The key must not have any subkeys. No error is raised if the key does
not exist.

[call [cmd reg_key_export] [arg HKEY] [arg FILEPATH] [opt [arg options]]]
Exports a key and its contents to the file [arg FILEPATH]. The following
options may be specified.
[list_begin opt]
[opt_def [cmd -compress] [arg BOOL]] If [const true], the file is
written in compressed format. Otherwise uncompressed. Default is [const false].
[opt_def [cmd -format] [arg FORMAT]] Specifies the format for the file.
[arg FORMAT] must be one of [const win2k] or [const xp]. Default is [const xp]
which is not readable on earlier (pre-XP) Windows systems.
[opt_def [cmd -secd] [arg SECD]] Specifies a security descriptor to use when
creating the file.
[list_end]

[call [cmd reg_key_import] [arg HKEY] [arg FILEPATH] [opt [arg options]]]
Imports an exported registry key from a file. The following
options may be specified.
[list_begin opt]
[opt_def [cmd -force] [arg BOOL]] If [const true], the file is imported even if
there are open handles under [arg HKEY]. Default is [const false].
[opt_def [cmd -volatile] [arg BOOL]] If [const true], a new volatile hive is
created into which the file is imported. In this case, [arg HKEY] must be
[const HKEY_USERS] or [const HKEY_LOCAL_MACHINE]. Default is [const false].
[list_end]

[call [cmd reg_key_load] [arg HKEY] [arg SUBKEY] [arg REGFILE]]
Creates a key [arg SUBKEY] under [arg HKEY] and loads the contents of
the file [arg REGFILE] under it. [arg HKEY] must be one of the predefined keys
[const HKEY_LOCAL_MACHINE] or [const HKEY_USERS] or a handle returned by
[uri \#reg_connect [cmd reg_connect]]. [arg REGFILE] must be
a file in the format saved by [uri \#reg_key_export [cmd reg_key_export]].
The [uri \#reg_key_unload [cmd reg_key_unload]] command may be used to
undo the operation.

Note the caller process must be running with [const SE_BACKUP_NAME] and
[const SE_RESTORE_NAME] privileges.

[call [cmd reg_key_unload] [arg HKEY] [arg SUBKEY]]
Unloads the registry hive at key path [arg SUBKEY] under the key with
handle [arg HKEY]. [arg HKEY] must be one of the predefined keys
[const HKEY_LOCAL_MACHINE] or [const HKEY_USERS] or a handle returned by
[uri \#reg_connect [cmd reg_connect]]. This reverses the effect
of the [uri \#reg_key_load [cmd reg_key_load]] command.

Note the caller process must be running with [const SE_BACKUP_NAME] and
[const SE_RESTORE_NAME] privileges.

[call [cmd reg_key_monitor] [arg HKEY] [opt [arg options]]]

Monitors a registry key for changes. The following options control the types of
changes that are monitored.

[list_begin opt]
[opt_def [cmd -attr] [arg BOOL]] Monitors changes in key attributes like
security descriptors.
[opt_def [cmd -keys] [arg BOOL]] Monitors addition and deletion of immediate
child keys to the specified key.
[opt_def [cmd -secd] [arg BOOL]] Monitors changes to the security attributes.
[opt_def [cmd -subtree] [arg BOOL]] Monitors the entire tree below the specified
key. If [const false] (default), only monitors the specified key.
[opt_def [cmd -values] [arg BOOL]] Monitors changes to the values in the key
including additions and deletions.
[list_end]

If none of the options [cmd -attr], [cmd -keys], [cmd -secd] and [cmd -values]
are specified as [const true], all are enabled.

By default, the command is synchrnous and will return only after a change of the
requested type has been signalled. The [cmd -hevent] option may be used for
asynchronous notifications. The argument to the option must be a handle to
an event as returned by [uri synch.html#create_event [cmd create_event]]. The
event will be signalled when the key changes. The caller can wait on the
passed event or register a callback using the
[uri base.html#wait_on_handle [cmd wait_on_handle]] command.

Note the following important points about asynchronous operation:

[list_begin bullet]
[bullet] The event is signalled only once. To continue to receive notifications,
the command must be called again on the handle.
[bullet] Moreover, the command must not be called
on the key handle again until the previously registered notification request has
been signalled.
[list_end]

[call [cmd reg_key_open] [arg HKEY] [arg SUBKEY] [opt [arg options]]]

Returns a handle to a registry key.
[arg HKEY] must be a handle to a registry key as returned by a prior call to
[cmd reg_key_open], [uri \#reg_key_create [cmd reg_key_create]] etc. or a
predefined key handle such as [const HKEY_LOCAL_MACHINE]. [arg SUBKEY] is the
path to the subkey under [arg HKEY] whose handle is to be returned.

The following options may be specified:
[list_begin opt]
[opt_def [cmd -32bit]] Specifies that the 32-bit registry view should be
accessed.
[opt_def [cmd -64bit]] Specifies that the 64-bit registry view should be
accessed.
[opt_def [cmd -access] [arg ACCESSRIGHTS]] Specifies the desired access
rights and may be
specified as a list of integer access rights flags or symbols as described in
[uri security.html#accessrights "Access Rights"]. Defaults to [const generic_read].
[opt_def [cmd -link] [arg BOOL]] If [const true], specifies the key is a
symbolic link. Defaults to [const false].
[list_end]

The command will raise an error if the specified key does not exist.

The returned key handle should be released by calling the
[uri \#reg_key_close [cmd reg_key_close]] command.

[call [cmd reg_key_override] [arg HPREDEFINED] [arg HKEY]]
Maps a predefined key with handle [arg HPREDEFINE] to the key with handle
[arg HKEY]. This will cause all access to [arg HPREDEFINED] to be redirected
to [arg HKEY]. The override can be reversed by calling
[uri \#reg_key_override_undo [cmd reg_key_override_undo]].

[arg HPREDEFINED] must be one of the predefined keys
[const HKEY_CLASSES_ROOT],
[const HKEY_CURRENT_CONFIG],
[const HKEY_CURRENT_USER],
[const HKEY_LOCAL_MACHINE],
[const HKEY_USERS] or
[const HKEY_PERFORMANCE_DATA].


[call [cmd reg_key_prune] [arg HKEY] [arg SUBKEY]]
Deletes the tree rooted at the key identified by the key path [arg SUBKEY] under
the key specified by the handle [arg HKEY]. No error is raised if the key does
not exist.

[call [cmd reg_key_user_classes_root] [arg USERTOKEN] [opt [arg options]]]
Returns a handle to the [emph merged] [const HKEY_CLASSES_ROOT] key for the user
corresponding to the passed [arg USERTOKEN] which must be a user token as
returned by
[uri security.html#get_user_token [cmd get_user_token]],
[uri process.html#get_process_token [cmd get_process_token]],
[uri process.html#get_thread_token [cmd get_thread_token]] etc.

The following options may be specified:
[list_begin opt]
[opt_def [cmd -32bit]] Specifies that the 32-bit registry view should be
accessed.
[opt_def [cmd -64bit]] Specifies that the 64-bit registry view should be
accessed.
[opt_def [cmd -access] [arg ACCESSRIGHTS]] Specifies the desired access
rights and may be
specified as a list of integer access rights flags or symbols as described in
[uri security.html#accessrights "Access Rights"]. Defaults to [const generic_read].
[list_end]


[call [cmd reg_keys] [arg HKEY] [opt [cmd -withtime]]]
Returns the list of keys under the key specified by the handle [arg HKEY].
If the option [cmd -withtime] is specified, the returned list consists
of pairs the first element being the key name and the second being the time
of last modification in 100ns since Jan 1, 1601.

[call [cmd reg_value] [arg HKEY] [opt [arg SUBKEY]] [arg VALUENAME]]
Returns the cooked data value for a registry value. If
[arg SUBKEY] is not specified, the returned data is from the value
[arg VALUENAME] under [arg HKEY] which is a handle to a registry key.
If [arg SUBKEY] is specified, it must be a registry path under [arg HKEY]
and [arg VALUENAME] is retrieved from that key.

[call [cmd reg_value_delete] [arg HKEY] [opt [arg SUBKEY]] [arg VALUENAME]]
If the optional [arg SUBKEY] argument is not specified, the command deletes the
specified registry value under the key specified by the handle [arg HKEY].
If [arg SUBKEY] is specified, it should be a key path under [arg HKEY].
In this case the value is deleted from that key.

[call [cmd reg_value_names] [arg HKEY]]
Returns the list of names of values under the key specified by the handle [arg HKEY].

[call [cmd reg_value_raw] [arg HKEY] [opt [arg SUBKEY]] [arg VALUENAME]]

Returns a pair consisting of the type and data for a registry value. If
[arg SUBKEY] is not specified, the returned data is from the value
[arg VALUENAME] under [arg HKEY] which is a handle to a registry key.
If [arg SUBKEY] is specified, it must be a registry path under [arg HKEY]
and [arg VALUENAME] is retrieved from that key.

[call [cmd reg_value_set] [arg HKEY] [opt [arg SUBKEY]] [arg VALUENAME] [arg TYPE] [arg DATA]]

Stores the data [arg DATA] as a registry value of type [arg TYPE]. If
[arg SUBKEY] is not specified, the data is stored as
[arg VALUENAME] under [arg HKEY] which is a handle to a registry key.
If [arg SUBKEY] is specified, it must be a registry path under [arg HKEY]
and the data is stored in [arg VALUENAME] under that key.

[call [cmd reg_values] [arg HKEY]]
Returns a dictionary keyed by the value names in the specified registry key
[arg HKEY]. The value data is in cooked form.

[call [cmd reg_values_raw] [arg HKEY]]
Returns a dictionary keyed by the value names in the specified registry key
[arg HKEY]. The value data is in raw form as a pair containing the data type
and data value.

[list_end]

[keywords "Registry"]

[manpage_end]
