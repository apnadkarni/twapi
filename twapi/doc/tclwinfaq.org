#+STYLE: <style type='text/css'>html { font-family: sans-serif;} </style>
* About Tcl
** What is Tcl and why should I learn it?
   Tcl is a high-level dynamic language that runs on a wide variety of platforms,
   from mainstream operating systems like Unix/Linux, Windows and MacOS 
   to embedded systesm like Cisco routers. Code written on one platform
   will run practically unchanged on another. Tcl's simple but powerful
   and expressive nature make it suitable for applications ranging from
   customized systems administration utilities to standalone desktop applications
   to scalable, distributed servers.

** What is Tk ?
   :PROPERTIES:
   :CUSTOM_ID: tk
   :END:
   Tk is a toolkit for building cross-platform graphical user interfaces.
   Although bindings exist for other languages such as Perl and Python,
   it was originally built as a complement to Tcl and has the tightest
   binding to that language. Hence, the two are most commonly refered
   together as Tcl/Tk.
   This FAQ focuses only on Tcl and does NOT target Tk-related questions.

** What Windows platforms does Tcl support ?
   The current official release of Tcl, version 8.5, supports newer Windows
   platforms starting with Windows 2000. Version 8.6, currently in beta,
   requires Windows XP or later. Earlier versions of Windows, Windows NT 4.0
   and the Windows 98 series, require Tcl 8.4 and are
   not covered by this FAQ. 

** Does Tcl support 64-bit Windows?
   Yes. There are separate 32- and 64-bit builds of Tcl. Of course, the
   32-bit build will also work on 64-bit Windows as a WoW64 process.

** Why should I use Tcl instead of VBScript or PowerShell?
   There are several reasons why you might want to use Tcl instead of
   PowerShell or VBScript for scripting tasks on Windows. First, Tcl
   deployment is simple, with the option of a single executable
   distribution that includes your scripts and with no external
   dependencies. This allows deployment even to systems such as Windows
   2008 Server Core which did not support PowerShell due to its
   dependence on the .NET framework.  Second, because of its use of
   native Windows interfaces, Tcl is lightweight and efficient in use of
   system resources including CPU, memory and disk. Third, generic
   scripts such as for XML processing, will run on non-Windows platforms
   without any modifications.

** Why should I use Tcl instead of C#/C++/VB.Net
   Simply put, it's all about minding your P's and Q's:
   - Productivity - Tcl's dynamic nature, expressiveness and
     high level constructs greatly increase programming productivity
     with shorter development cycles and greater robustness.
   - Portability - large portions of your code base, and even entire
     applications are portable to other platforms with minimal
     effort.
   - Quality - By freeing programmers from low level details Tcl allows
     them to focus on application logic and architecture. It facilitates
     incremental development where test case generation fits naturally
     with writing code.

** When should I not use Tcl on Windows?
   There are a few types of applications for which Tcl is not an ideal fit.
   In particular, applications with sophisticated graphics or printing
   needs are not good candidates for Tcl.
   Nevertheless, note Tcl can still be used productively in such
   applications as the "glue" language that drives and automates the
   core application engine. For example, Tcl is the de facto standard
   for scripting in the commercial CAD world even though the core applications
   are in C++.

** How is Tcl licensed? Can I use it in commercial applications?
   Tcl is covered under the very liberal open source BSD license.
   This means Tcl and its associated libraries can be used in all applications,
   including commercial ones.
** Where can I find documentation for Tcl?
   The reference documentation for all Tcl versions can be downloaded or
   browsed on-line at http://www.tcl.tk/man. The [[#activestatedistro][ActiveState distribution]] also
   contains a Windows Help CHM file that includes not only the core 
   documentation but also documentation for various extensions and libraries.
   A standalone CHM help file, with similar content, is available from
   the [[#twapi][TWAPI]] download area.

** Is there a Tcl tutorial?
   See the [[http://www.tcl.tk/man/tcl/tutorial/tcltutorial.html][online Tcl tutorial]]. In addition, the [[http://wiki.tcl.tk][Tcler's Wiki]] provides 
   tutorials, explanations
   and sample code in all areas. It is also an excellent jump point
   to the various Tcl resources on the net.

** Where can I get help on Tcl?
   You can get questions answered on the comp.lang.tcl newsgroup or the
   #tcl channel on irc.freenode.net. Commercial support is available from
   [[http://www.activestate.com/activetcl][ActiveState]].

** About this FAQ
   This FAQ is targeted towards using Tcl on Windows. Specifically,
   it addresses recent releases of Tcl (8.4, 8.5, 8.6) on 
   Windows 2000 or later.
   It does not address general Tcl platform-independent features. Nor does
   it address questions related to Tk.

* Installing Tcl
** What Tcl distributions are available for Windows?
   There are several freely downloadable binary distributions of Tcl available:
   - The most commonly used distribution for Tcl is from
     [[http://www.activestate.com/activetcl][ActiveState]] which provides both free and commercially supported
     editions of their Tcl package for multiple platforms. These
     distributions include libraries and extensions in addition to
     the Tcl core.
   - The [[http://tcl.sourceforge.net][Tcl SourceForge download area]] contains Tcl distributions for
     multiple platforms but does not include extensions and libraries.
   - Roy Keene's site [[http://kitcreator.rkeene.org][KitCreator]] site provides customisable
     Tcl distributions for download which can optionally include
     other libraries and extensions.
   - Builds of daily snapshots are available from [[http://www.patthoyts.tk/tclkit/win32-ix86/daily/][Pat Thoyt's site]].
     These are single file executables.

** What are starpacks, starkits, tclkits?

** Does Tcl have a standard library?

* General Usage
** What are =tclsh= and =wish=?
   Windows distinguishes between console mode and graphical interface programs.
   Tcl distributions correspondingly come with two different programs,
   =tclsh.exe= and =wish.exe=. The former is used for scripts that run in
   console mode and the latter for applications with a graphical user interface,
   generally based on [[#tk][Tk]].

   Depending on the actual Tcl distribution being used, the executables
   may be named differently, for example =tclsh86t.exe= and =wish86t.exe=.

** How do I run Tcl in interactive mode?
   To run the Tcl interpreter, so that you can interactively invoke Tcl
   commands, simply type in the name of the appropriate executable.
   This will display a Tcl shell prompt where you can type in commands.
#+BEGIN_SRC tcl
  c:\> tclsh
  % puts "Hello world"
  Hello world
  % exit
  c:>
#+END_SRC

** How do I run a Tcl script from the command line?
   To run a console script, invoke the =tclsh.exe= program, passing
   it the path to the script file. Any additional arguments on the command
   line are passed as a list to the script in the =argv= global variable.
#+BEGIN_SRC tcl
  # File printargs.tcl
  foreach arg $::argv {puts $arg} 
#+END_SRC
  We can invoke this script from the command line:
#+BEGIN_SRC tcl
  c:\> tclsh printargs.tcl first "second arg"
  first
  second arg
  c:\>
#+END_src

** How can I associate a Tcl script with the Tcl interpreter application?
   Windows can associate a file with an application so that typing the
   name of the file will result in the application being invoked.
   During its install, the
   [[#activestatedistro][ActiveState distribution]] gives the user the option to associate
   files ending in =.tcl= with the =wish= graphical Tcl shell. If you
   are not using this distribution, or you want to associate the =.tcl=
   extension with =tclsh= instead, you can change the association from
   the =File Types= tab in the =Folder Options= dialog in Explorer.

   In addition, if you want to run the script from the command line simply
   by typing its name, add the extension to the =PATHEXT= environment
   variable.

   You may wish to associate separate extensions, for example =.tcl= and
   =.tk=, depending on whether you want the script invoked with =tclsh=
   or =wish=.

** How can I invoke a Tcl script from Explorer?
   In order to run a Tcl script by double-clicking the script file, the file
   type must be associated with the Tcl shell. See the previous entry
   in this FAQ.

** How can I embed a Tcl script in a batch file?
   As an alternative to making =.tcl= files directly executable, you may
   prefer to make scripts executable by embedding them in batch files.
   For example, assume printargs.bat is somewhere in your PATH and
   contains the following:

#+BEGIN_SRC tcl
  ::if no {
  @tclsh "%~f0" %*
  @goto :eof 
  }
  # Tcl code start
  
  foreach arg $argv { puts $arg }
  # Tcl code end \
  :eof
#+END_SRC

  Invoking the file:

#+BEGIN_SRC tcl
  C:\>printargs first "second arg"
  first
  second arg
#+END_SRC

   See more sophisticated versions and alternatives in the 
   [[http://wiki.tcl.tk/2455][Tcl wiki]].

** How can I have Tcl always execute a certain set of commands on starting?
   On startup, =tclsh.exe= reads and executes commands in the file
   =tclshrc.tl= in the user's home directory. The user's home directory
   is given by the environment variable =USERPROFILE= or can be displayed
   with the Tcl command
: % file normalize ~

** When should I use a Tcl extension versus an external program?
Some tasks can be accomplished from Tcl by invoking external programs or
through the use of a Tcl extension ([[#killprocess][example]]). If you are writing a one-off
script with limited use or the command is rarely invoked, using an
external program might be sufficient. In other cases, use of an extension
is likely to be beneficial. It is generally much faster and also protects
against the external program not being available or installed
on the target system (this is true event for Windows components)
and differences arising from localization.
* General Windows programming
** How can I access the Windows registry?
   Tcl provides the [[http://www.tcl.tk/man/tcl8.5/TclCmd/registry.htm][=registry=]] command for doing various operations on
   the Windows registry. You will need to load the =registry= package
   first:

#+BEGIN_SRC tcl
   % package require registry
   % registry get HKEY_CURRENT_USER\\Environment PATH
   c:\bin;c:\tcl\tcl86\bin;c:\msys\bin
#+END_SRC

** How can I get system information?
   The Tcl global array =tcl_platform= provides basic information about
   the system such as the operating system, version number etc. Additional
   information is provided in the Windows environment variables which
   can be accessed via the global =env= array. For more extensive
   details, use the =osinfo= module in the [[#twapi][TWAPI]] extension.

** How can I print from a script?
* Processes
** How can I start a new process?
   :PROPERTIES:
   :CUSTOM_ID: exec
   :END:
   Tcl provides the [[http://www.tcl.tk/man/tcl8.5/TclCmd/exec.htm][=exec=]] command for starting new processes. The command
   supports pipes with multiple subprocesses, I/O redirection and background
   processes. The command [[www.tcl.tk/man/tcl8.5/TclCmd/library.htm][=auto_execok=]] is useful in conjunction with
   =exec=. It returns the full command line required for invocation filling
   in the path, extension if missing as well as checking for =cmd.exe=
   built-in commands.

#+BEGIN_SRC dos
   % auto_execok notepad
   C:/WINDOWS/system32/notepad.EXE
   % auto_execok dir
   C:/WINDOWS/system32/cmd.exe /c dir
#+END_SRC

   For additional control over the child process, such as its display
   properties, security attributes, priority etc., use the
   =create_process= command from the [[#twapi][TWAPI]] extension.

** How can I read from and write to a child process?
   Use the Tcl =open= command to open a pipe by prefixing the child
   process command line with a =|= character. Then read and write
   using the standard Tcl I/O commands =puts=. =gets=, =read= etc.
#+BEGIN_SRC tcl
   % set fd [open "| cmd.exe /c dir"]
   file94e0d8
   % while {![eof $fd]} {puts [gets $fd]}
   % close $fd
#+END_SRC
** How can I start the application associated with a document or URL?
   To start up an application associated with a file or URL,
   invoke the Windows =cmd.exe= internal
   =start= command. For example,
: % exec [auto_execok start] myfile.doc
: % exec [auto_execok start] http://www.google.com

   Alternatively, see the [[#shellexecute][next entry]].

** How can I invoke an action, like print, on a document?
   The Windows Explorer Shell associates certain actions that can
   be carried out on a document based on its file type. These actions,
   such as =Open=, =Edit=, =Print= can be invoked from the right-click
   menu in Explorer. To invoke the action using Tcl, use the
   =shell_execute= command from the [[#twapi][TWAPI]] extension.

   The following will use the default action =Open= to start
   editing the file with Microsoft Word.
: twapi::shell_execute -path sample.doc

   To print the file:
: twapi::shell_execute -path sample.doc -verb print

   To componse an email message:
: twapi::shell_execute -path mailto:someone@somewhere.com

** How can I start a privileged process under UAC?
   Windows Vista and later versions implement User Account Control (UAC)
   under which even processes belonging to privileged accounts run with
   reduced privileges unless explicitly elevated by the user.
   To start a process in elevated mode, use the 
   =shell_execute= command from the [[#twapi][TWAPI]] extension with the =runas= action.
: twapi::shell_execute -verb runas -path services.msc

** How can I terminate a process?
   :PROPERTIES:
   :CUSTOM_ID: killprocess
   :END:
   You can invoke the Windows command line program =taskkill.exe= 
   using Tcl's [[#exec][=exec=]] command to terminate a process by its PID or name.
#+BEGIN_SRC tcl
   exec [auto_execok taskkill] /PID 1234
   exec [auto_execok taskkill] /IM notepad.exe
#+END_SRC
   The  [[#twapi][TWAPI]] extension provides another alternative to do the same.
: twapi::end_process 1234
: foreach pid [twapi::get_process_ids -name notepad.exe] {twapi::end_process $pid}
* Files and Disks
** How can I get a list of drives in the system?
   Use Tcl's =file volumes= command.
: % file volumes
: C:/ D:/
** How can I access files on remote shares?
   Tcl understands UNC names of the form =\\SERVER\SHARE\some\file=
   so the standard Tcl I/O commands can be used to open and access
   files on remote shares.
** How can I monitor changes to the file system?
** How can I get notified when the media changes in my CD drive?
** How can I get notified when a USB pen drive is inserted?
** How can I create desktop shortcuts?
** How can I read and write the event log?
** How can I write a Windows service using Tcl?
For an example of a service using [[#twapi][TWAPI]], 
see the [[http://wiki.tcl.tk/20993][network echo service sample]] on the Tcl wiki.
** How can I read and write file resources?
** How can I register a hotkey to invoke a script?
** How can I install an icon in the system tray?
** How can I play audio files?
The [[#snack][Snack]] extension is a complete and powerful cross-platform package for
audio generation, playback, recording and analysis.
See the [[http://www.speech.kth.se/snack/tutorial.html][Snack tutorial]] for examples.

   For very basic needs, [[#twapi][TWAPI]] has a module that can play =WAV= files
   and system sounds.
: % twapi::play_sound c:/windows/media/chimes.wav

* Working with other applications
** How can Tcl communicate with other applications using DDE?
Tcl's built-in [[http://www.tcl.tk/man/tcl8.5/TclCmd/dde.htm][=dde package=]] allows Tcl scripts to act
as a DDE client or server. However, DDE is a legacy technology
and you should use COM interfaces instead wherever possible.
** How can Tcl act as a COM client?
   Several extensions support COM client access from Tcl.
   - The [[#tcom][TCOM]] extension
   - The 


** How can Tcl act as a COM server?
** How can I automate Internet Explorer with Tcl?
** How can I integrate with Microsoft Office?
** How can Tcl be used to write IIS-based applications?
** How can SQL Server be accessed from Tcl?


* Using Tcl for Windows System Administration
** How can I create and delete user accounts?
** How can I change the password for a user?
** How can I access Active Directory with Tcl?
** How can I use WMI for system management?
** How can I remotely administer a Windows system?
** How can I check if an application or service pack is installed?

* Interoperability with .Net
** How can I call .NET components from Tcl?
** Is there a .NET version of Tcl?

* Networking and Communications
** How can I communicate over the network?
** How can I communicate over named pipes?
** How can I communicate over serial ports?
** How can I retrieve a Web page?
** How can I download a file?
* Building Tcl for Windows
** General instructions and tools
Do not use spaces in paths. Use subst command if necessary
** Where can I get the Tcl source code?
** How do I build Tcl Visual C++ 6.0?
** How do I build Tcl using the free Windows 7 SDK compiler?
** How do I build Tcl using MinGW?
** How to I create a single executable Tcl distribution (tclkit)?

* Tcl extensions
** Tcl for Windows API (TWAPI)
   :PROPERTIES:
   :CUSTOM_ID: twapi
   :END:
   The TWAPI extension includes modules that cover a broad cross-section
   of the Windows API. It is available at http://twapi.sourceforge.net.
** Snack Sound Toolkit
   The [[http://www.speech.kth.se/snack/][Snack]] extension is a complete and powerful cross-platform package for
   audio generation, playback, recording and analysis. It is available
   at http://www.speech.kth.se/snack/.
** TCOM
   :PROPERTIES:
   :CUSTOM_ID: tcom
   :END:
   The TCOM extension provides support for both COM client and server
   access from Tcl. It is available from [[http://www.vex.net/~cthuang/tcom/]].
   Although stable, it is not under active development and there is no
   64-bit version available.
** Optcl
   The Optcl extension supports COM client and server access and also
   support for hosting ActiveX controls. It is available at
   http://www.patthoyts.tk/programming/optcl3010.zip. Like [[#tcom][TCOM]],
   it is not under active development and no 64-bit version is available.

** Writing a Tcl extension

#+TITLE:     Tcl on Windows FAQ
#+AUTHOR:    
#+EMAIL:     
#+DATE:      2012-04-14 Sat
#+DESCRIPTION: Frequently Asked Questions about Tcl on Windows
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
